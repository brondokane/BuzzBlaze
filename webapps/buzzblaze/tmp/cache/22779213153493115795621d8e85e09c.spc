a:4:{s:5:"child";a:1:{s:0:"";a:1:{s:3:"rss";a:1:{i:0;a:6:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:1:{s:7:"version";s:3:"2.0";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:0:"";a:1:{s:7:"channel";a:1:{i:0;a:6:{s:4:"data";s:0:"";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:4:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:8:"Snook.ca";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:16:"http://snook.ca/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:46:"Tips, Tricks and Bookmarks on Web Development.";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:8:"language";a:1:{i:0;a:5:{s:4:"data";s:2:"en";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"item";a:4:{i:0;a:6:{s:4:"data";s:0:"";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:6:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:29:"Journey into the World of Vim";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:65:"http://feedproxy.google.com/~r/snookca/~3/RXb_UJrZslc/word-of-vim";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:6:"author";a:1:{i:0;a:5:{s:4:"data";s:34:"jonathan@snook.ca (Jonathan Snook)";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:29:"Sun, 13 Feb 2011 23:13:47 PST";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:42:"http://snook.ca/archives/other/word-of-vim";s:7:"attribs";a:1:{s:0:"";a:1:{s:11:"isPermaLink";s:5:"false";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:6910:"<p>I used to make it a part of my day to learn a new tool or find a shortcut for something I already did. It's a habit I got out of for awhile. I called it my laziness: I don't want to spend time operating a tool; I want to spend time building what needs to get built. </p>

<p>In my heyday, I'd have my machine customized to the nines. Lots of shortcuts and gestures and bells and whistles to help me be productive. It was always awkward to hop onto somebody else's machine because I'd instinctively attempt to use a shortcut and it wouldn't be there. </p>
<h2>Transitioning</h2>
<p>When I switched to a Mac about three years ago, I kept it fairly minimalist. Yes, I had a bunch of new tools to learn. I had settled nicely into using <a href="http://macromates.com/">Textmate</a> as my main day-to-day editor. It's a perfectly reasonable editor with lots of great features. I used <a href="http://ciaranwal.sh/projectplus">ProjectPlus</a>, <a href="http://code.google.com/p/zen-coding/">Zen Coding</a>, and a couple other plug-ins. Textmate is a decent application and is easy to get started with. It's like most other text editors: cut, copy, paste with a number of handy options available at the click of a mouse. Expertise in the application grew as I learned a few more of the keyboard shortcuts within Textmate. </p>

<p>However, in my current job, I found my time split between working locally on my machine and needing to be logged into a remote server making to review and test changes. Sure, I could work locally and just copy the files back and forth. And this is exactly what I did. For awhile.</p>
<h2>First introduction to Vim</h2>
<p>I knew of Vim and would occasionally use it when working on remote servers. Edit an Apache configuration file here. Make a quick change to a file there. I first learned of Vi (of which Vim was born from) back around 1991 when I did a co-op placement and found myself in front of a Unix box.</p>

<p>I learned enough to know how to open a file from the command line (<kbd>vim filename.ext</kbd>), edit the file (<kbd>a</kbd> to go into insert mode), save it (<kbd>:w</kbd>), and then exit (<kbd>:q</kbd>). My skill with Vim really hadn't evolved in the 20 years since I first learned of the editor.</p>
<h2>Diving in deep</h2>
<p>I knew Vim could do more&mdash;much more. And so I decided to take the leap and make it my primary editor. I installed <a href="http://macvim.org/OSX/index.php">MacVim</a> and then watched these <a href="http://ontwik.com/tools/vim-from-novice-to-professional-by-derek-wyatt-p1/">great screencasts</a> by Derek Wyatt to get started.</p>

<p>The screencasts are a fantastic place to start because they focus on the core pieces of Vim that you need to know and will quickly pick up steam:</p>

<ul>
	<li>Movement</li>
	<li>Editing</li>
	<li>Buffers</li>
	<li>Windows</li>
</ul>

<p>The first three are really the key ones. Movement is important because a lot of the power in Vim is being able to move around a document quickly. Wyatt's screencasts cover the basic movements well. From there, having an understanding of how to get into Insert mode is helpful (beyond hitting <kbd>a</kbd>, like I used to do). </p>

<p>Buffers are really where it's at. A buffer is like having a document open in another editor. Except it's just sitting there in memory, waiting to be worked on. By default, you only see one document at a time. I used to have to save, exit out of Vim and then open another file to make changes. This is very tedious. I just didn't know any better. Once you discover how to have multiple files open and to switch between them, you're well on your way to using Vim as your primary editor.</p>

<p>Understanding buffers is just the first step to working with multiple files. The next step is to manage those buffers in a visual way. Two ways to do that include Windows and Tabs.</p>

<p>Tabs are a familiar paradigm. MacVim supports them much like tabs in any other desktop application. Hit Command-T and voila, you have a new tab. That new tab has access to the same list of buffers as all the other tabs. It's just a visual way of separating your work. Terminal-based Vim sessions can also do tabs. </p>

<p>Windows, on the other hand, are different than what you might expect. They're actually more like panes. A screen can be split into multiple panes. They can be split horizontally and vertically and split multiple times. </p>

<p>You might want to check out the <a href="http://www.vim.org/scripts/script.php?script_id=1658">NERDTree plug-in</a> which provides a browsable directory view, similar to ProjectPlus. NERDTree uses windows, so an understanding of how windows work will help you more readily use the plug-in.</p>
<h2>Diving deeper</h2>
<p>Since that time, my knowledge of Vim has continued to increase. I'll take time with a set of features, like tabs and windows, and work with them until they start to become second nature. Then I'll learn a new feature and continue on from there.</p>

<p>After the screencasts, I've gone on to learn how to customize my interface, such as getting a status line that I like. My vimrc file, a file that stores Vim preferences, is getting larger as more and more tweaks go in. It now handles indentation using the approach we have at work (four spaces instead of tabs). These are small things, I know, but I feel like I'm getting back into old habits&mdash;good habits: I'm customizing my environment to get the most out of it. As a result, I'm feeling more productive. I feel like I'm getting more out of my tools.</p>

<p>Yesterday, I took time to learn about code-folding (a feature that I, admittedly, have used very infrequently in any editor that I've used). Today, I was told to look into autocomplete, and so I did. Now there is a feature I will use heavily. Going back to plug-ins, I installed Zen Coding for Vim, since I find it quite handy. I mapped a handy keyboard shortcut for it, tweaked some of the snippets, and <em>bam</em>, I'm getting stuff done! I even wrote this blog post in Vim. </p>
<h2>All in!</h2>
<p>I have undoubtedly become a Vim convert and will likely use it for years to come. Yes, the learning curve is steep but for me, it's been worth it. </p><div class="feedflare">
<a href="http://feeds.feedburner.com/~ff/snookca?a=RXb_UJrZslc:aPUHqKKP9gY:yIl2AUoC8zA"><img src="http://feeds.feedburner.com/~ff/snookca?d=yIl2AUoC8zA" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/snookca?a=RXb_UJrZslc:aPUHqKKP9gY:F7zBnMyn0Lo"><img src="http://feeds.feedburner.com/~ff/snookca?i=RXb_UJrZslc:aPUHqKKP9gY:F7zBnMyn0Lo" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/snookca?a=RXb_UJrZslc:aPUHqKKP9gY:gIN9vFwOqvQ"><img src="http://feeds.feedburner.com/~ff/snookca?i=RXb_UJrZslc:aPUHqKKP9gY:gIN9vFwOqvQ" border="0"></img></a>
</div><img src="http://feeds.feedburner.com/~r/snookca/~4/RXb_UJrZslc" height="1" width="1"/>";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:42:"http://rssnamespace.org/feedburner/ext/1.0";a:1:{s:8:"origLink";a:1:{i:0;a:5:{s:4:"data";s:42:"http://snook.ca/archives/other/word-of-vim";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:1;a:6:{s:4:"data";s:0:"";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:6:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:22:"Assumptive Development";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:76:"http://feedproxy.google.com/~r/snookca/~3/E4Wa4bcpm5I/assumptive-development";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:6:"author";a:1:{i:0;a:5:{s:4:"data";s:34:"jonathan@snook.ca (Jonathan Snook)";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:29:"Tue, 01 Feb 2011 22:32:44 PST";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:55:"http://snook.ca/archives/opinion/assumptive-development";s:7:"attribs";a:1:{s:0:"";a:1:{s:11:"isPermaLink";s:5:"false";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:6485:"<p>As web developers, we want a way to ask "can you do this?" And there are varying degrees to which we can determine this.</p>
<p>One of those ways is to use user agent (UA) detection. We ask the browser some information about itself and it tells us. Based on what we know about a browser, we can make certain assumptions. If a browser tells you it is Internet Explorer, chances are you support the HTML, CSS and JavaScript that Internet Explorer supports. This detection could happen on the server-side or client-side.</p>
<p>Another way is feature detection. Feature detection uses JavaScript to test for a feature before using it. If I can access document.getElementById then almost assuredly I can use document.getElementById. Of course, to test for every feature before we use it would be extremely redundant. Generally, we'll test for a few known scenarios and with that, assume that other features are also available. For example, if I can access document.attachEvent, I'm almost definitely in IE and therefore can expect that all of the other event-related features of IE will work.</p>

<h2>Circumvention</h2>

<p>What happens when a bunch of web developers decide to use a particular approach to determining the capabilities of the browser? A new browser comes out and now needs to mimic or duplicate that approach to bypass the detection mechanism.</p>
<p>With UA detection, browsers only have one recourse: change the UA to say that it supports the features of another browser by saying it's another browser.</p>
<p>User agent strings are extremely limited, though, in the amount of information it can convey. They can't possibly describe the myriad of functionality it does or doesn't support.</p>
<p>Feature detection excels by being able to provide information at a micro level. Test the feature, use the feature. If a future browser comes out that implements the feature then the test should pass and the developer should (theoretically) not have any more work on their hands.</p>
<p>Sometimes a browser may sidestep feature detection with a partial implementation. For example, Firefox developed a limited implementation of document.all to get around feature detection. It only works in quirks mode and behaves differently than IE: <code>if(document.all){}</code> would fail but <code>if(document.all.maincontent){}</code> (assuming maincontent is an element on the page) would succeed.</p>
<p>At worst, a browser may test positive for the existence of a property, even when it doesn't really support it. <a href="http://www.modernizr.com/">Modernizr</a>, for example, runs into the occasional false positive and has to use alternate methods that test other specific expectations before determining a more accurate true or false. Do a search for "false positive" in the source and you'll see a few cases where things aren't always as they seem.</p>

<h2>What does it mean?</h2>

<p>We need to accept that, as web developers, we cannot test every permutation and, therefore, have to make assumptions somewhere.</p>

<p>While my argument for using UA detection versus feature detection may lean towards feature detection, let it not be the only recourse.</p>

<p>Alex Russell, for example, <a href="http://infrequently.org/2011/01/cutting-the-interrogation-short/">speaks of using UA detection</a> as a first line of offence. Use it to determine capabilities among a known subset of browsers and then fall back to using feature detection for the unknown browsers. In doing so, you gain the performance advantage of avoiding client-side feature detection (and avoid downloading an additional resource, in the case of Modernizr).</p> 

<p>Client-side feature detection also falls victim to environments where JavaScript may not be enabled, which could be <a href="http://developer.yahoo.com/blogs/ydn/posts/2010/10/how-many-users-have-javascript-disabled/">as much as 2% of your audience or more</a>. Yes, I understand that 2% may not sound like very much, but it's another set of users whose user experience you should plan for. </p>

<h2>Missing the point</h2>

<p>Those wishing to debate user agent detection versus feature detection may be missing the bigger conundrum: At the end of the day, you still have to decide what to do with a user who fails that test.</p>

<p>What happens to users who do not have JavaScript enabled? What happens to users who do not support the feature that you're testing for? What happens to users on browsers for which you can't test for?</p>


<p>There <em>are</em> a few options as to how to handle a failed test:</p>

<ol>
	<li>Deny the user</li>
	<li>Warn the user</li>
	<li>Limit functionality</li>
	<li>Hope for the best</li>
</ol>

<p>On Yahoo! Mail, for example, we do a combination of items 1 and 2. For some browsers, we deny them outright. Sorry, Internet Explorer 6. You're just out of luck. For other browsers, you'll get a warning page letting you know that you might run into a quirk or two. Yes, we use user agent detection to do this. Once you're in the application, however, we generally want you to be able to access everything. Feature and UA testing may be used to fork past differing browser implementations. For example, file uploads could use the Flash uploader or the basic POST upload.</p>

<p>For most of us, though, we just hope for the best. When was the last time you tested your project on Firefox 2 or Safari 3?</p>

<p>Relying on UA detection alone isn't likely to be very resilient in the long run, nor is relying on feature detection likely to solve every problem in every situation for every user. Like much of web development, it's a series of choices along the way that we have to make to craft the best experience for the most users as possible, even if that means making some assumptions along the way.</p><div class="feedflare">
<a href="http://feeds.feedburner.com/~ff/snookca?a=E4Wa4bcpm5I:UvlYug_B7EI:yIl2AUoC8zA"><img src="http://feeds.feedburner.com/~ff/snookca?d=yIl2AUoC8zA" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/snookca?a=E4Wa4bcpm5I:UvlYug_B7EI:F7zBnMyn0Lo"><img src="http://feeds.feedburner.com/~ff/snookca?i=E4Wa4bcpm5I:UvlYug_B7EI:F7zBnMyn0Lo" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/snookca?a=E4Wa4bcpm5I:UvlYug_B7EI:gIN9vFwOqvQ"><img src="http://feeds.feedburner.com/~ff/snookca?i=E4Wa4bcpm5I:UvlYug_B7EI:gIN9vFwOqvQ" border="0"></img></a>
</div><img src="http://feeds.feedburner.com/~r/snookca/~4/E4Wa4bcpm5I" height="1" width="1"/>";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:42:"http://rssnamespace.org/feedburner/ext/1.0";a:1:{s:8:"origLink";a:1:{i:0;a:5:{s:4:"data";s:55:"http://snook.ca/archives/opinion/assumptive-development";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:2;a:6:{s:4:"data";s:0:"";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:6:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:36:"Amazon launches Simple Email Service";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:73:"http://feedproxy.google.com/~r/snookca/~3/WdBmyS1RoHg/amazon-ses-launches";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:6:"author";a:1:{i:0;a:5:{s:4:"data";s:34:"jonathan@snook.ca (Jonathan Snook)";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:29:"Tue, 25 Jan 2011 08:21:05 PST";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:52:"http://snook.ca/archives/opinion/amazon-ses-launches";s:7:"attribs";a:1:{s:0:"";a:1:{s:11:"isPermaLink";s:5:"false";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:3053:"<p>Amazon has launched a new API for sending email &quot;in the cloud&quot; called <a href="http://aws.amazon.com/ses/">Simple Email Service</a>. </p>
<p>Like other Amazon services, one of the biggest draws&mdash;besides using the solid infrastructure&mdash;is the pricing. You can send up to 2,000 emails a day absolutely free. After that, you're looking at 10 cents per thousand emails and 15 cents per GB of data transfer.</p>
<p>Some basic list management functionalities such as tracking bouncebacks and marked-as-spam are included but all other list management functionality is not. This is a simple API designed for people who wish to manage the process on their own and would be a great addition to those who are using other <a href="http://aws.amazon.com/">Amazon Web Services</a>.</p>
<p>My first question was, &quot;How do they stop spammers?&quot; Amazon scans each email before it goes out and if it has questionable data, they'll stop it from sending. Good to know.</p>
<h2>Impact on the market</h2>
<p>My next thought was, &quot;What does CampaignMonitor and MailChimp think of this?&quot; To be clear, SES is not a direct competitor to either of these services. <a href="http://www.campaignmonitor.com/">CampaignMonitor</a> and <a href="http://www.mailchimp.com/">MailChimp</a> provide plenty of tools and a great interface for managing email campaigns and lists.</p>
<p>My thought goes in two directions. </p>
<p>One, could or would these services shift any of their infrastructure to take advantage of the SES services. I could foresee an adjusted pricing structure and a spot where I could enter my AWS API key.</p>
<p>The second thought I had is related in that other services could pop up that are full management applications like CampaignMonitor and MailChimp but built on the SES service and possibly providing more cost effective solutions. I would not be surprised to see at least a couple services running within the next six months doing just that.</p>
<p>For more direct competition, you'd need to look at <a href="http://postmarkapp.com/">Postmark</a> which, like SES, provides an API for you to integrate email services easily with your web application. That they have API code for a number of languages is already an advantage over Amazon's service.</p>
<p>It'll be interesting to see how the market evolves over the next year.</p><div class="feedflare">
<a href="http://feeds.feedburner.com/~ff/snookca?a=WdBmyS1RoHg:HDWCj5RDRYs:yIl2AUoC8zA"><img src="http://feeds.feedburner.com/~ff/snookca?d=yIl2AUoC8zA" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/snookca?a=WdBmyS1RoHg:HDWCj5RDRYs:F7zBnMyn0Lo"><img src="http://feeds.feedburner.com/~ff/snookca?i=WdBmyS1RoHg:HDWCj5RDRYs:F7zBnMyn0Lo" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/snookca?a=WdBmyS1RoHg:HDWCj5RDRYs:gIN9vFwOqvQ"><img src="http://feeds.feedburner.com/~ff/snookca?i=WdBmyS1RoHg:HDWCj5RDRYs:gIN9vFwOqvQ" border="0"></img></a>
</div><img src="http://feeds.feedburner.com/~r/snookca/~4/WdBmyS1RoHg" height="1" width="1"/>";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:42:"http://rssnamespace.org/feedburner/ext/1.0";a:1:{s:8:"origLink";a:1:{i:0;a:5:{s:4:"data";s:52:"http://snook.ca/archives/opinion/amazon-ses-launches";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:3;a:6:{s:4:"data";s:0:"";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:6:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:37:"How I Use VMWare Fusion and Snapshots";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:77:"http://feedproxy.google.com/~r/snookca/~3/RRv-kjB00iY/vmware-fusion-snapshots";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:6:"author";a:1:{i:0;a:5:{s:4:"data";s:34:"jonathan@snook.ca (Jonathan Snook)";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:29:"Wed, 15 Dec 2010 00:00:13 PST";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:54:"http://snook.ca/archives/other/vmware-fusion-snapshots";s:7:"attribs";a:1:{s:0:"";a:1:{s:11:"isPermaLink";s:5:"false";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:5477:"<p>Let&rsquo;s face it, testing multiple browsers on multiple systems isn&rsquo;t very practical. But it's still a fact of life for the web developer. What I&rsquo;m about to show you is how I manage testing in multiple browser versions. </p>
<p>About three years ago, I used to do all of my development on a Windows laptop. I had an old Mac G3 tower, an Ubuntu server, and a Windows 2000 server. All of these were separate&mdash;and rather ancient and noisy&mdash;machines that sat in my office. I would have IE7 and the latest version of Firefox on my machine. I would hop onto my Windows server for IE6 testing, onto my Mac for Safari testing, and ... well, okay, I didn&rsquo;t test any browser in Ubuntu.</p>
<p>When I got my Mac, I decided to try out <a href="http://www.vmware.com/products/fusion/">VMWare Fusion</a>. There wasn&rsquo;t anything in particular that drove me to try it over <a href="http://www.parallels.com/">Parallels</a> but it seemed to get mentioned more frequently and so I just went for it.</p>
<h2>The Virtual Machines</h2>
<p>I started off by installing Windows XP. After which, I installed Ubuntu and more recently, I installed Windows 7 and also the emulator for the soon-to-be-released BlackBerry PlayBook.</p>

<p><a href="http://www.flickr.com/photos/jonathansnook/5262178015/" title="VMWare Snapshots by Jonathan Snook, on Flickr"><img src="http://farm6.static.flickr.com/5209/5262178015_dd065440d2.jpg" width="500" height="387" alt="VMWare Snapshots" /></a></p>

<p>Admittedly, my Ubuntu VM doesn&rsquo;t get much love. I used it for testing Adobe AIR applications when I was still working on them and also test in Firefox, just in case something interesting comes of it.</p>

<p>I tried to install Windows Vista but it took forever to install and never seemed to work quite right. Thankfully, Windows 7 installed just fine and performs quite well in VMWare.</p>

<p>I was surprised to discover that the emulator for the upcoming BlackBerry PlayBook actually runs in VMWare Fusion. It made it quite easy to set up, although I&rsquo;m doubtful how often I&rsquo;ll be loading this one unless I start getting into some development.</p>

<h2>Snapshots</h2>

<p>Many people I know either use something like <a href="http://www.my-debugbar.com/wiki/IETester/HomePage">IETester</a> in their single VM or install multiple VMs, one for each browser that they wish to test with. In the case of using IETester, there are some known limitations which may impact accurate testing. In the case of multiple VMs, you&rsquo;ll need to have the hard drive space for multiple operating systems being installed on your system.</p>
<p>I took another route and realized that I could take a Snapshot of a particular point in time and then launch that snapshot whenever I wanted to.  By taking a snapshot while the system is running, I can load a snapshot without having to wait for a virtual machine to boot up. It&rsquo;s already booted. Loading a snapshot just copies the state of the virtual machine back into memory. I&rsquo;m usually back up and running from a snapshot within 15 seconds.</p>

<p>The amount of space that a snapshot takes on the hard drive is also much smaller than a virtual machine: it&rsquo;s just the size of memory, which may be between 512MB to 2GB, depending on VM configuration.</p>

<p><a href="http://www.flickr.com/photos/jonathansnook/5262787478/" title="VMWare Snapshots by Jonathan Snook, on Flickr"><img src="http://farm6.static.flickr.com/5001/5262787478_a1f958c9fe.jpg" width="500" height="484" alt="VMWare Snapshots" /></a></p>

<p>With IE6 on my machine, I took a snapshot. Then I installed IE7 and saved that as a snapshot. Then I installed IE8 and saved that as a snapshot. I used to keep various versions of Safari, Chrome and Firefox in those different VMs but I kept forgetting which snapshot had which alternate browser. So, I&rsquo;ve started saving the different versions of those browsers as separate snapshots, as well.</p>

<p>This approach has come in quite handy. For example, I needed to test a localized version of Chrome for China. I was able to install and test the browser without worrying about it overwriting or impacting my main configuration. Once I was done with it, I could just delete the snapshot or load another snapshot without saving my current configuration.</p>

<h2>Wishes</h2>
<p>My biggest wish right now is to be able to install Mac OS X as a virtual machine, too. Unfortunately, Apple&rsquo;s licensing doesn&rsquo;t allow it. (Although, there are some hacks on the Internet that can get around that.) I&rsquo;d love to have copies of 10.4 or 10.5 that I could load up and test.</p>

<p>Anyways, this is how I use VMWare Fusion. How do you handle your cross-browser, cross-platform testing?</p><div class="feedflare">
<a href="http://feeds.feedburner.com/~ff/snookca?a=RRv-kjB00iY:RGwuEksvZgo:yIl2AUoC8zA"><img src="http://feeds.feedburner.com/~ff/snookca?d=yIl2AUoC8zA" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/snookca?a=RRv-kjB00iY:RGwuEksvZgo:F7zBnMyn0Lo"><img src="http://feeds.feedburner.com/~ff/snookca?i=RRv-kjB00iY:RGwuEksvZgo:F7zBnMyn0Lo" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/snookca?a=RRv-kjB00iY:RGwuEksvZgo:gIN9vFwOqvQ"><img src="http://feeds.feedburner.com/~ff/snookca?i=RRv-kjB00iY:RGwuEksvZgo:gIN9vFwOqvQ" border="0"></img></a>
</div><img src="http://feeds.feedburner.com/~r/snookca/~4/RRv-kjB00iY" height="1" width="1"/>";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:42:"http://rssnamespace.org/feedburner/ext/1.0";a:1:{s:8:"origLink";a:1:{i:0;a:5:{s:4:"data";s:54:"http://snook.ca/archives/other/vmware-fusion-snapshots";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}}}s:27:"http://www.w3.org/2005/Atom";a:1:{s:4:"link";a:3:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"rel";s:4:"self";s:4:"type";s:19:"application/rss+xml";s:4:"href";s:35:"http://feeds.feedburner.com/snookca";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:1;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"rel";s:4:"self";s:4:"type";s:19:"application/rss+xml";s:4:"href";s:35:"http://feeds.feedburner.com/snookca";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:2;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:2:{s:3:"rel";s:3:"hub";s:4:"href";s:32:"http://pubsubhubbub.appspot.com/";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:42:"http://rssnamespace.org/feedburner/ext/1.0";a:2:{s:4:"info";a:1:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:1:{s:3:"uri";s:7:"snookca";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:15:"browserFriendly";a:1:{i:0;a:5:{s:4:"data";s:138:"This is an XML content feed. It is intended to be viewed in a newsreader or syndicated to another site, subject to copyright and fair use.";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:40:"http://www.w3.org/2003/01/geo/wgs84_pos#";a:2:{s:3:"lat";a:1:{i:0;a:5:{s:4:"data";s:7:"45.1800";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"long";a:1:{i:0;a:5:{s:4:"data";s:8:"-75.5500";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}}}}}}}}s:4:"type";i:128;s:7:"headers";a:11:{s:12:"content-type";s:23:"text/xml; charset=UTF-8";s:4:"etag";s:27:"WstGhcMm7kH88/yid8DLZ50xa3k";s:13:"last-modified";s:29:"Tue, 22 Feb 2011 14:11:40 GMT";s:16:"content-encoding";s:4:"gzip";s:17:"transfer-encoding";s:7:"chunked";s:4:"date";s:29:"Tue, 22 Feb 2011 14:21:14 GMT";s:7:"expires";s:29:"Tue, 22 Feb 2011 14:21:14 GMT";s:13:"cache-control";s:18:"private, max-age=0";s:22:"x-content-type-options";s:7:"nosniff";s:16:"x-xss-protection";s:13:"1; mode=block";s:6:"server";s:3:"GSE";}s:5:"build";s:14:"20110128231735";}