a:4:{s:5:"child";a:1:{s:0:"";a:1:{s:3:"rss";a:1:{i:0;a:6:{s:4:"data";s:3:"


";s:7:"attribs";a:1:{s:0:"";a:1:{s:7:"version";s:3:"2.0";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:0:"";a:1:{s:7:"channel";a:1:{i:0;a:6:{s:4:"data";s:50:"
	
	
	
	
	
	
	
	
	
		
		
		
		
		
		
		
		
		
		
	";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:4:{s:0:"";a:7:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:30:"Engine Yard Ruby on Rails Blog";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:30:"http://www.engineyard.com/blog";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:13:"lastBuildDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Fri, 18 Feb 2011 21:16:40 +0000";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:8:"language";a:1:{i:0;a:5:{s:4:"data";s:2:"en";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:9:"generator";a:1:{i:0;a:5:{s:4:"data";s:27:"http://wordpress.org/?v=3.0";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"item";a:10:{i:0;a:6:{s:4:"data";s:55:"
		
		
		
		
		
				
		
		
		
		

		
		
			
			
		


		";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:6:{s:0:"";a:8:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:64:"Engine Yard Cloud Out Loud S01E11: Hashrocket…err…RightBonus";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:57:"http://feedproxy.google.com/~r/engineyard/~3/cx7mVnUPkY0/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:8:"comments";a:1:{i:0;a:5:{s:4:"data";s:105:"http://www.engineyard.com/blog/2011/engine-yard-cloud-out-loud-s01e11-hashrocket-err-rightbonus/#comments";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Fri, 18 Feb 2011 19:06:06 +0000";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:8:"category";a:5:{i:0;a:5:{s:4:"data";s:13:"Uncategorized";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:1;a:5:{s:4:"data";s:14:"cloud out loud";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:2;a:5:{s:4:"data";s:14:"Obie Fernandez";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:3;a:5:{s:4:"data";s:7:"podcast";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:4;a:5:{s:4:"data";s:15:"The Rails 3 Way";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:38:"http://www.engineyard.com/blog/?p=7280";s:7:"attribs";a:1:{s:0:"";a:1:{s:11:"isPermaLink";s:5:"false";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:2588:"<p><a href="http://www.happywebbies.com/store/detail/obie-fernandez/"><img class="aligncenter" title="Obie Fernandez" src="https://img.skitch.com/20110218-m4rthjqa394cgt1qurykubqj99.jpg" alt="" width="570" height="330" /></a></p>
<div>
<p>In January, <a href="http://twitter.com/#!/obie">Obie</a> sat down with Dr. Nic to talk about his new book, <a href="http://www.amazon.com/Rails-Way-Addison-Wesley-Professional-Ruby/dp/0321601661"><em>The Rails 3 Way</em></a>, and to offer advice about how developers can start their own consultancies. Little did we know that the day before the release of this podcast, Obie would also be <a href="http://blog.obiefernandez.com/content/2011/02/since-i-finally-got-my-launchrock-invite.html">announcing his transition</a> to a new venture: revolutionary startup <a href="http://rightbonus.com/">RightBonus</a>. In this edition, we ask Obie for his opinion on whether Zed Shaw will ever come back to the Ruby community (we think you can make a guess as to his answer). In the end, things get personal when Dr. Nic asks the burning question: Did Obie really propose to his fiancé via Twitter? Inquiring minds want to know.</p>
<p><em>The Rails 3 Way</em> is coming soon to <a href="http://www.engineyard.com/blog/2010/rtfm/">R(*)TFM</a>. If you don&#8217;t want to miss it, sign-up for the <a href="http://pages.engineyard.com/RTFMSignUp.html">discount books and screencast e-mail list</a> to be notified about new Ruby and Cloud educational resources available to you on the cheap!</p>
<p>Next week on  Cloud Out Loud we talk with <a title="Mike Wolfe's crunchbase page" href="http://www.crunchbase.com/person/michael-wolfe" target="_blank">Michael Wolfe</a>. We discuss his path to becoming a successful entrepreneur, and learn a bit about <a title="ccLoop" href="http://www.ccloop.com/" target="_blank">ccLoop</a>, a new stealth startup, that just raised <a title="ccLoop TechCrunch article" href="http://techcrunch.com/2011/02/17/benchmark-capital-bets-on-super-quiet-stealth-shhhh-ccloop/" target="_blank">3.5 million led by Benchmark Capital.</a></p>
</div>
<p><audio controls preload="metadata" autobuffer><br />
      <source src="http://s3.amazonaws.com/engineyard.com/podcasts/mp3/mp3s/11/cloud_out_loud_obie_fernandez.mp3" /><br />
      <source src="http://s3.amazonaws.com/engineyard.com/podcasts/ogg/oggs/11/cloud_out_loud_obie_fernandez.ogg" /><br />
      Your browser does not support native audio.<br />
</audio> </p>
<p><img src="http://www.engineyard.com/blog/?ak_action=api_record_view&#038;id=7280&#038;type=feed" alt="" /></p>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:9:"enclosure";a:2:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"url";s:93:"http://s3.amazonaws.com/engineyard.com/podcasts/ogg/oggs/11/cloud_out_loud_obie_fernandez.ogg";s:6:"length";s:8:"27122812";s:4:"type";s:9:"audio/ogg";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:1;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"url";s:90:"http://feedproxy.google.com/~r/engineyard/~5/W4CdvFvhneE/cloud_out_loud_obie_fernandez.mp3";s:6:"length";s:8:"36576851";s:4:"type";s:10:"audio/mpeg";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:7:"creator";a:1:{i:0;a:5:{s:4:"data";s:11:"Danish Khan";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:40:"http://purl.org/rss/1.0/modules/content/";a:1:{s:7:"encoded";a:1:{i:0;a:5:{s:4:"data";s:2678:"<p><a href="http://www.happywebbies.com/store/detail/obie-fernandez/"><img class="aligncenter" title="Obie Fernandez" src="https://img.skitch.com/20110218-m4rthjqa394cgt1qurykubqj99.jpg" alt="" width="570" height="330" /></a></p>
<div>
<p>In January, <a href="http://twitter.com/#!/obie">Obie</a> sat down with Dr. Nic to talk about his new book, <a href="http://www.amazon.com/Rails-Way-Addison-Wesley-Professional-Ruby/dp/0321601661"><em>The Rails 3 Way</em></a>, and to offer advice about how developers can start their own consultancies. Little did we know that the day before the release of this podcast, Obie would also be <a href="http://blog.obiefernandez.com/content/2011/02/since-i-finally-got-my-launchrock-invite.html">announcing his transition</a> to a new venture: revolutionary startup <a href="http://rightbonus.com/">RightBonus</a>. In this edition, we ask Obie for his opinion on whether Zed Shaw will ever come back to the Ruby community (we think you can make a guess as to his answer). In the end, things get personal when Dr. Nic asks the burning question: Did Obie really propose to his fiancé via Twitter? Inquiring minds want to know.</p>
<p><em>The Rails 3 Way</em> is coming soon to <a href="http://www.engineyard.com/blog/2010/rtfm/">R(*)TFM</a>. If you don&#8217;t want to miss it, sign-up for the <a href="http://pages.engineyard.com/RTFMSignUp.html">discount books and screencast e-mail list</a> to be notified about new Ruby and Cloud educational resources available to you on the cheap!</p>
<p>Next week on  Cloud Out Loud we talk with <a title="Mike Wolfe's crunchbase page" href="http://www.crunchbase.com/person/michael-wolfe" target="_blank">Michael Wolfe</a>. We discuss his path to becoming a successful entrepreneur, and learn a bit about <a title="ccLoop" href="http://www.ccloop.com/" target="_blank">ccLoop</a>, a new stealth startup, that just raised <a title="ccLoop TechCrunch article" href="http://techcrunch.com/2011/02/17/benchmark-capital-bets-on-super-quiet-stealth-shhhh-ccloop/" target="_blank">3.5 million led by Benchmark Capital.</a></p>
</div>
<p><audio controls preload="metadata" autobuffer><br />
      <source src="http://s3.amazonaws.com/engineyard.com/podcasts/mp3/mp3s/11/cloud_out_loud_obie_fernandez.mp3" /><br />
      <source src="http://s3.amazonaws.com/engineyard.com/podcasts/ogg/oggs/11/cloud_out_loud_obie_fernandez.ogg" /><br />
      Your browser does not support native audio.<br />
</audio> </p>
<p><img src="http://www.engineyard.com/blog/?ak_action=api_record_view&#038;id=7280&#038;type=feed" alt="" /></p>
<img src="http://feeds.feedburner.com/~r/engineyard/~4/cx7mVnUPkY0" height="1" width="1"/>";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:36:"http://wellformedweb.org/CommentAPI/";a:1:{s:10:"commentRss";a:1:{i:0;a:5:{s:4:"data";s:101:"http://www.engineyard.com/blog/2011/engine-yard-cloud-out-loud-s01e11-hashrocket-err-rightbonus/feed/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:38:"http://purl.org/rss/1.0/modules/slash/";a:1:{s:8:"comments";a:1:{i:0;a:5:{s:4:"data";s:1:"0";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:42:"http://rssnamespace.org/feedburner/ext/1.0";a:2:{s:8:"origLink";a:1:{i:0;a:5:{s:4:"data";s:96:"http://www.engineyard.com/blog/2011/engine-yard-cloud-out-loud-s01e11-hashrocket-err-rightbonus/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:17:"origEnclosureLink";a:1:{i:0;a:5:{s:4:"data";s:93:"http://s3.amazonaws.com/engineyard.com/podcasts/mp3/mp3s/11/cloud_out_loud_obie_fernandez.mp3";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:1;a:6:{s:4:"data";s:47:"
		
		
		
		
		
				
		
		

		
		
			
			
		
		";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:6:{s:0:"";a:7:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:31:"RailsInstaller One Month Update";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:57:"http://feedproxy.google.com/~r/engineyard/~3/86rK8cknlBg/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:8:"comments";a:1:{i:0;a:5:{s:4:"data";s:77:"http://www.engineyard.com/blog/2011/railsinstaller-one-month-update/#comments";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Fri, 18 Feb 2011 01:55:32 +0000";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:8:"category";a:3:{i:0;a:5:{s:4:"data";s:13:"Uncategorized";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:1;a:5:{s:4:"data";s:14:"RailsInstaller";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:2;a:5:{s:4:"data";s:7:"windows";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:38:"http://www.engineyard.com/blog/?p=7259";s:7:"attribs";a:1:{s:0:"";a:1:{s:11:"isPermaLink";s:5:"false";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:3691:"<p><img src="http://www.engineyard.com/blog?getfile=7266" alt="" title="Rails Installer reaches 10000-1" width="263" height="170" class="alignright size-full wp-image-7266" style="float: right;" /></p>
<p>
  Exactly 1 month ago we released <a href="http://railsinstaller.org/">RailsInstaller</a> 1.0.0 for Windows. Since then we have reached over <a href="http://rubyforge.org/frs/?group_id=5288&amp;release_id=45467" title="RubyForge: Rails Installer: Project Filelist">10,000 downloads</a> and put out 4 bug fix releases. Our goal is to provide THE Welcome Kit to Rails that you will share among friends in order to welcome them to the enjoyable world of Rails development. I will call 10,000 downloads a success!
</p>
<p>
  As with any project, there are features that we would love to get incorporated into the project. Our first focus is to simplify the setup and use of SSH keys. They are required for private git repos and for deployment to Engine Yard, other deployment platforms, and DIY deployment.
</p>
<p>
  The next focus is to work on providing connectivity to multiple database servers with the default install. Currently RailsInstaller ships with SQLite3 libraries and the associated gem. On our roadmap are PostgreSQL, MySQL and SQL Server.
</p>
<p>
  For the Windows-based RailsInstaller, it is important to provide SQLServer connectivity out of the box. We will provide this through the excellent new <a href="https://github.com/rails-sqlserver/tiny_tds">Tiny TDS</a> by Ken Collins <a href="http://twitter.com/metaskills">(@metaskills)</a>. The Tiny TDS Ruby Gem allows us to connect to SQLServer through the FreeTDS library. Luis Lavena and Ken Collins have been hard <a href="http://groups.google.com/group/railsinstaller/browse_thread/thread/b44a5b377d11cd1a">at work with the FreeTDS</a> team to enable builds of FreeTDS under mingw, which we use in RailsInstaller for compiling C.
</p>
<p>
  Alongside our database connectivity issues we are also working on another feature. Currently RailsInstaller is based on an <a href="http://www.jrsoftware.org/isinfo.php">Inno Setup</a> installer, which we created using the RubyInstaller codebase as an example. While Inno Setup works very well, it does not easily meet all of our requirements. One such requirement is that we wish to prompt for a username and email to use for git so that we may automatically configure git for the user during the installation process. This poses a fun challenge indeed!
</p>
<p>
  So how do we intend to solve this? This is where a new <a href="http://railsinstaller.org/">RailsInstaller</a> sponsor has stepped up to the challenge! There is another installer product out there called <a href="http://installbuilder.bitrock.com/">Install Builder</a>. <a href="http://bitrock.com/">BitRock</a>, the creators of Install Builder are <a href="http://installbuilder.bitrock.com/open-source-licenses.html">heavily involved in the Open Source community</a> and have generously donated an InstallBuilder license to the RailsInstaller project for its core committers!
</p>
<p>
  I have been reading though the InstallBuilder manual. After my experiences with InnoSetup, I must remark that InstallBuilder is extremely well thought out and very flexible. This is exactly what we need to achieve our RailsInstaller goals of taking care of as much as we possibly can for our users. To the BitRock team, thank you!!!
</p>
<p>
  It&#8217;s been a great first month. Please continue to share RailsInstaller with your friends so that they can learn how wonderful Ruby on Rails truly is!
</p>
<p><img src="http://www.engineyard.com/blog/?ak_action=api_record_view&#038;id=7259&#038;type=feed" alt="" /></p>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:7:"creator";a:1:{i:0;a:5:{s:4:"data";s:15:"Wayne E. Seguin";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:40:"http://purl.org/rss/1.0/modules/content/";a:1:{s:7:"encoded";a:1:{i:0;a:5:{s:4:"data";s:3781:"<p><img src="http://www.engineyard.com/blog?getfile=7266" alt="" title="Rails Installer reaches 10000-1" width="263" height="170" class="alignright size-full wp-image-7266" style="float: right;" /></p>
<p>
  Exactly 1 month ago we released <a href="http://railsinstaller.org/">RailsInstaller</a> 1.0.0 for Windows. Since then we have reached over <a href="http://rubyforge.org/frs/?group_id=5288&amp;release_id=45467" title="RubyForge: Rails Installer: Project Filelist">10,000 downloads</a> and put out 4 bug fix releases. Our goal is to provide THE Welcome Kit to Rails that you will share among friends in order to welcome them to the enjoyable world of Rails development. I will call 10,000 downloads a success!
</p>
<p>
  As with any project, there are features that we would love to get incorporated into the project. Our first focus is to simplify the setup and use of SSH keys. They are required for private git repos and for deployment to Engine Yard, other deployment platforms, and DIY deployment.
</p>
<p>
  The next focus is to work on providing connectivity to multiple database servers with the default install. Currently RailsInstaller ships with SQLite3 libraries and the associated gem. On our roadmap are PostgreSQL, MySQL and SQL Server.
</p>
<p>
  For the Windows-based RailsInstaller, it is important to provide SQLServer connectivity out of the box. We will provide this through the excellent new <a href="https://github.com/rails-sqlserver/tiny_tds">Tiny TDS</a> by Ken Collins <a href="http://twitter.com/metaskills">(@metaskills)</a>. The Tiny TDS Ruby Gem allows us to connect to SQLServer through the FreeTDS library. Luis Lavena and Ken Collins have been hard <a href="http://groups.google.com/group/railsinstaller/browse_thread/thread/b44a5b377d11cd1a">at work with the FreeTDS</a> team to enable builds of FreeTDS under mingw, which we use in RailsInstaller for compiling C.
</p>
<p>
  Alongside our database connectivity issues we are also working on another feature. Currently RailsInstaller is based on an <a href="http://www.jrsoftware.org/isinfo.php">Inno Setup</a> installer, which we created using the RubyInstaller codebase as an example. While Inno Setup works very well, it does not easily meet all of our requirements. One such requirement is that we wish to prompt for a username and email to use for git so that we may automatically configure git for the user during the installation process. This poses a fun challenge indeed!
</p>
<p>
  So how do we intend to solve this? This is where a new <a href="http://railsinstaller.org/">RailsInstaller</a> sponsor has stepped up to the challenge! There is another installer product out there called <a href="http://installbuilder.bitrock.com/">Install Builder</a>. <a href="http://bitrock.com/">BitRock</a>, the creators of Install Builder are <a href="http://installbuilder.bitrock.com/open-source-licenses.html">heavily involved in the Open Source community</a> and have generously donated an InstallBuilder license to the RailsInstaller project for its core committers!
</p>
<p>
  I have been reading though the InstallBuilder manual. After my experiences with InnoSetup, I must remark that InstallBuilder is extremely well thought out and very flexible. This is exactly what we need to achieve our RailsInstaller goals of taking care of as much as we possibly can for our users. To the BitRock team, thank you!!!
</p>
<p>
  It&#8217;s been a great first month. Please continue to share RailsInstaller with your friends so that they can learn how wonderful Ruby on Rails truly is!
</p>
<p><img src="http://www.engineyard.com/blog/?ak_action=api_record_view&#038;id=7259&#038;type=feed" alt="" /></p>
<img src="http://feeds.feedburner.com/~r/engineyard/~4/86rK8cknlBg" height="1" width="1"/>";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:36:"http://wellformedweb.org/CommentAPI/";a:1:{s:10:"commentRss";a:1:{i:0;a:5:{s:4:"data";s:73:"http://www.engineyard.com/blog/2011/railsinstaller-one-month-update/feed/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:38:"http://purl.org/rss/1.0/modules/slash/";a:1:{s:8:"comments";a:1:{i:0;a:5:{s:4:"data";s:1:"4";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:42:"http://rssnamespace.org/feedburner/ext/1.0";a:1:{s:8:"origLink";a:1:{i:0;a:5:{s:4:"data";s:68:"http://www.engineyard.com/blog/2011/railsinstaller-one-month-update/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:2;a:6:{s:4:"data";s:47:"
		
		
		
		
		
				
		
		

		
		
			
			
		
		";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:6:{s:0:"";a:7:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:16:"UI Consolidation";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:57:"http://feedproxy.google.com/~r/engineyard/~3/_Se9qxcI8rw/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:8:"comments";a:1:{i:0;a:5:{s:4:"data";s:62:"http://www.engineyard.com/blog/2011/ui-consolidation/#comments";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Thu, 17 Feb 2011 00:04:08 +0000";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:8:"category";a:3:{i:0;a:5:{s:4:"data";s:13:"Uncategorized";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:1;a:5:{s:4:"data";s:2:"ui";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:2;a:5:{s:4:"data";s:2:"ux";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:38:"http://www.engineyard.com/blog/?p=7240";s:7:"attribs";a:1:{s:0:"";a:1:{s:11:"isPermaLink";s:5:"false";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:809:"<p>To address crowding in our header menu and to leave room for upcoming features, we decided to utilize a couple drop-down menus. We hope you like them!</p>
<p>Here&#8217;s the old look:</p>
<p><img class="alignnone size-full wp-image-7248" src="http://www.engineyard.com/blog?getfile=7248" alt="" width="546" height="38" /></p>
<p>And the new:</p>
<p><img class="alignnone size-full wp-image-7249" src="http://www.engineyard.com/blog?getfile=7249" alt="" width="366" height="195" /></p>
<p>(The user icon comes from <a href="http://gravatar.com">Gravatar</a>, for those of you who aren&#8217;t already initiated.)</p>
<p>Stay tuned for other improvements that Jina and I are polishing up. Thanks!<img src="http://www.engineyard.com/blog/?ak_action=api_record_view&#038;id=7240&#038;type=feed" alt="" /></p>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:7:"creator";a:1:{i:0;a:5:{s:4:"data";s:14:"Andrew Collins";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:40:"http://purl.org/rss/1.0/modules/content/";a:1:{s:7:"encoded";a:1:{i:0;a:5:{s:4:"data";s:899:"<p>To address crowding in our header menu and to leave room for upcoming features, we decided to utilize a couple drop-down menus. We hope you like them!</p>
<p>Here&#8217;s the old look:</p>
<p><img class="alignnone size-full wp-image-7248" src="http://www.engineyard.com/blog?getfile=7248" alt="" width="546" height="38" /></p>
<p>And the new:</p>
<p><img class="alignnone size-full wp-image-7249" src="http://www.engineyard.com/blog?getfile=7249" alt="" width="366" height="195" /></p>
<p>(The user icon comes from <a href="http://gravatar.com">Gravatar</a>, for those of you who aren&#8217;t already initiated.)</p>
<p>Stay tuned for other improvements that Jina and I are polishing up. Thanks!<img src="http://www.engineyard.com/blog/?ak_action=api_record_view&#038;id=7240&#038;type=feed" alt="" /></p>
<img src="http://feeds.feedburner.com/~r/engineyard/~4/_Se9qxcI8rw" height="1" width="1"/>";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:36:"http://wellformedweb.org/CommentAPI/";a:1:{s:10:"commentRss";a:1:{i:0;a:5:{s:4:"data";s:58:"http://www.engineyard.com/blog/2011/ui-consolidation/feed/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:38:"http://purl.org/rss/1.0/modules/slash/";a:1:{s:8:"comments";a:1:{i:0;a:5:{s:4:"data";s:1:"0";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:42:"http://rssnamespace.org/feedburner/ext/1.0";a:1:{s:8:"origLink";a:1:{i:0;a:5:{s:4:"data";s:53:"http://www.engineyard.com/blog/2011/ui-consolidation/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:3;a:6:{s:4:"data";s:44:"
		
		
		
		
		
				
		

		
		
			
			
		
		";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:6:{s:0:"";a:7:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:31:"3 Common Rails + MySQL Mistakes";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:57:"http://feedproxy.google.com/~r/engineyard/~3/x89T36nIEPY/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:8:"comments";a:1:{i:0;a:5:{s:4:"data";s:75:"http://www.engineyard.com/blog/2011/3-common-rails-mysql-mistakes/#comments";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Mon, 14 Feb 2011 23:50:09 +0000";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:8:"category";a:2:{i:0;a:5:{s:4:"data";s:13:"Uncategorized";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:1;a:5:{s:4:"data";s:5:"MySQL";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:38:"http://www.engineyard.com/blog/?p=7189";s:7:"attribs";a:1:{s:0:"";a:1:{s:11:"isPermaLink";s:5:"false";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:3289:"<div class="note">
This guest post is from our friends at <a href="http://www.percona.com/">Percona</a>. They&#8217;re hosting <a href="http://www.percona.com/events/percona-live-san-francisco-2011/">Percona Live</a> in San Francisco, CA on Wednesday, February 16, 2011. Live is a one day conference exploring new options available beyond MySQL 5.1.</p>
<p>In SF and wanna check it out? We&#8217;re giving away a free pass on Tuesday, February 15. Keep an eye on the <a href="http://twitter.com/engineyard">Engine Yard twitter feed</a> for a chance to snag the pass.
</div>
<p>Rails makes database interaction so simple that it&#8217;s easy to forget that the database isn&#8217;t always happy with what Rails does to it. Here are three leading mistakes that hurt many Rails applications, provided by the MySQL experts at <a href="http://www.percona.com/">Percona</a>:</p>
<p><strong>1. Using IN() subqueries</strong></p>
<p>MySQL supports a few different types of subqueries.  Unfortunately, one of them is a performance disaster.  Even more unfortunately, that particular type is the most natural and intuitive way to write a few common query patterns.  We&#8217;re referring to IN() and NOT IN() subqueries.  Note that IN(list,of,values) is just fine &#8212; the problem is IN(SELECT&#8230;) queries, and its evil twin the NOT IN(SELECT&#8230;) subquery.  These should be written as JOIN and LEFT OUTER JOIN, respectively, to avoid serious performance problems when the tables grow.</p>
<p><strong>2. Using SELECT FOR UPDATE</strong></p>
<p>Another common problem is locking some rows to &#8220;claim&#8221; them so nobody else works on the same rows.  A common pattern where this is used is a queue.  Anything that has a list of work to do, and tries to reserve some rows by doing a SELECT FOR UPDATE, ends up introducing a serialization point that forces all work to happen in single file, instead of letting lots of work happen concurrently.  The solution is to use a unique identifier per consuming process, and go ahead and UPDATE non-claimed rows to have the process&#8217;s identifier as a claim token.  The UPDATE will return a number of rows modified, and if that is greater than zero, you&#8217;ve claimed some rows and can then SELECT them and process them.  Be sure to either run in auto-commit mode or commit immediately after the UPDATE, so you don&#8217;t end up holding locks on the updated rows and causing the same problem!</p>
<p><strong>3. Using MySQL to store session data</strong></p>
<p>It&#8217;s so easy to use MySQL to store session data, but unfortunately it often ends up being one of the most expensive things the application does in the database.  We&#8217;ve seen many cases where the session table accounts for the majority of the work in the database.  With all that session-handling, the database can become unresponsive for the truly important work it should be doing (e.g. whatever makes money for your application).  If you&#8217;re using the database for sessions, consider Memcached instead.  It&#8217;s blazing fast because it doesn&#8217;t worry about persisting your data transactionally.<img src="http://www.engineyard.com/blog/?ak_action=api_record_view&#038;id=7189&#038;type=feed" alt="" /></p>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:7:"creator";a:1:{i:0;a:5:{s:4:"data";s:14:"Baron Schwartz";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:40:"http://purl.org/rss/1.0/modules/content/";a:1:{s:7:"encoded";a:1:{i:0;a:5:{s:4:"data";s:3379:"<div class="note">
This guest post is from our friends at <a href="http://www.percona.com/">Percona</a>. They&#8217;re hosting <a href="http://www.percona.com/events/percona-live-san-francisco-2011/">Percona Live</a> in San Francisco, CA on Wednesday, February 16, 2011. Live is a one day conference exploring new options available beyond MySQL 5.1.</p>
<p>In SF and wanna check it out? We&#8217;re giving away a free pass on Tuesday, February 15. Keep an eye on the <a href="http://twitter.com/engineyard">Engine Yard twitter feed</a> for a chance to snag the pass.
</div>
<p>Rails makes database interaction so simple that it&#8217;s easy to forget that the database isn&#8217;t always happy with what Rails does to it. Here are three leading mistakes that hurt many Rails applications, provided by the MySQL experts at <a href="http://www.percona.com/">Percona</a>:</p>
<p><strong>1. Using IN() subqueries</strong></p>
<p>MySQL supports a few different types of subqueries.  Unfortunately, one of them is a performance disaster.  Even more unfortunately, that particular type is the most natural and intuitive way to write a few common query patterns.  We&#8217;re referring to IN() and NOT IN() subqueries.  Note that IN(list,of,values) is just fine &#8212; the problem is IN(SELECT&#8230;) queries, and its evil twin the NOT IN(SELECT&#8230;) subquery.  These should be written as JOIN and LEFT OUTER JOIN, respectively, to avoid serious performance problems when the tables grow.</p>
<p><strong>2. Using SELECT FOR UPDATE</strong></p>
<p>Another common problem is locking some rows to &#8220;claim&#8221; them so nobody else works on the same rows.  A common pattern where this is used is a queue.  Anything that has a list of work to do, and tries to reserve some rows by doing a SELECT FOR UPDATE, ends up introducing a serialization point that forces all work to happen in single file, instead of letting lots of work happen concurrently.  The solution is to use a unique identifier per consuming process, and go ahead and UPDATE non-claimed rows to have the process&#8217;s identifier as a claim token.  The UPDATE will return a number of rows modified, and if that is greater than zero, you&#8217;ve claimed some rows and can then SELECT them and process them.  Be sure to either run in auto-commit mode or commit immediately after the UPDATE, so you don&#8217;t end up holding locks on the updated rows and causing the same problem!</p>
<p><strong>3. Using MySQL to store session data</strong></p>
<p>It&#8217;s so easy to use MySQL to store session data, but unfortunately it often ends up being one of the most expensive things the application does in the database.  We&#8217;ve seen many cases where the session table accounts for the majority of the work in the database.  With all that session-handling, the database can become unresponsive for the truly important work it should be doing (e.g. whatever makes money for your application).  If you&#8217;re using the database for sessions, consider Memcached instead.  It&#8217;s blazing fast because it doesn&#8217;t worry about persisting your data transactionally.<img src="http://www.engineyard.com/blog/?ak_action=api_record_view&#038;id=7189&#038;type=feed" alt="" /></p>
<img src="http://feeds.feedburner.com/~r/engineyard/~4/x89T36nIEPY" height="1" width="1"/>";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:36:"http://wellformedweb.org/CommentAPI/";a:1:{s:10:"commentRss";a:1:{i:0;a:5:{s:4:"data";s:71:"http://www.engineyard.com/blog/2011/3-common-rails-mysql-mistakes/feed/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:38:"http://purl.org/rss/1.0/modules/slash/";a:1:{s:8:"comments";a:1:{i:0;a:5:{s:4:"data";s:2:"12";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:42:"http://rssnamespace.org/feedburner/ext/1.0";a:1:{s:8:"origLink";a:1:{i:0;a:5:{s:4:"data";s:66:"http://www.engineyard.com/blog/2011/3-common-rails-mysql-mistakes/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:4;a:6:{s:4:"data";s:61:"
		
		
		
		
		
				
		
		
		
		
		
		

		
		
			
			
		


		";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:6:{s:0:"";a:8:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:43:"Engine Yard Cloud Out Loud S01E10: EdgeCase";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:57:"http://feedproxy.google.com/~r/engineyard/~3/11C86FHDWkQ/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:8:"comments";a:1:{i:0;a:5:{s:4:"data";s:88:"http://www.engineyard.com/blog/2011/engine-yard-cloud-out-loud-s01e10-edgecase/#comments";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Fri, 11 Feb 2011 19:29:35 +0000";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:8:"category";a:7:{i:0;a:5:{s:4:"data";s:13:"Uncategorized";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:1;a:5:{s:4:"data";s:14:"cloud out loud";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:2;a:5:{s:4:"data";s:8:"EdgeCase";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:3;a:5:{s:4:"data";s:11:"Joe O'Brien";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:4;a:5:{s:4:"data";s:9:"JRubyConf";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:5;a:5:{s:4:"data";s:7:"podcast";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:6;a:5:{s:4:"data";s:10:"Ruby Koans";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:38:"http://www.engineyard.com/blog/?p=7209";s:7:"attribs";a:1:{s:0:"";a:1:{s:11:"isPermaLink";s:5:"false";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:1349:"<p><img class="aligncenter" title="Koans" src="https://img.skitch.com/20110211-tqpgcccukqi47xkt7f9n7m4ii3.jpg" alt="" width="343" height="449" /></p>
<p>This week we interview Joe O&#8217;Brien of <a title="EdgeCase" href="http://www.edgecase.com/" target="_blank">EdgeCase</a> and <a href="http://columbusrb.com/">Columbus.rb</a>. We talk to Joe about the reasons behind founding EdgeCase, and about <a title="Ruby Koans" href="http://rubykoans.com/" target="_blank">Ruby Koans</a>, one of EdgeCase&#8217;s most popular open source projects to help Ruby newcomers improve their skills. Joe talks to us about how the first standalone <a title="JRuby talks" href="http://erubycon.com/schedule" target="_self">JRubyConf 2010</a> went last year, and about the <a title="Whisky Geeks" href="http://whiskygeeks.com//" target="_blank">The Whisky Tour</a> you may have heard about.</p>
<p><audio controls preload="metadata" autobuffer><br />
      <source src="http://s3.amazonaws.com/engineyard.com/podcasts/mp3/mp3s/10/cloud_out_loud_joe_obrien.mp3" /><br />
      <source src="http://s3.amazonaws.com/engineyard.com/podcasts/ogg/oggs/10/cloud_out_loud_joe_obrien.ogg" /><br />
      Your browser does not support native audio.<br />
</audio> <img src="http://www.engineyard.com/blog/?ak_action=api_record_view&#038;id=7209&#038;type=feed" alt="" /></p>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:9:"enclosure";a:2:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"url";s:89:"http://s3.amazonaws.com/engineyard.com/podcasts/ogg/oggs/10/cloud_out_loud_joe_obrien.ogg";s:6:"length";s:8:"25077552";s:4:"type";s:9:"audio/ogg";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:1;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"url";s:86:"http://feedproxy.google.com/~r/engineyard/~5/W6E7hN32Sxk/cloud_out_loud_joe_obrien.mp3";s:6:"length";s:8:"34972408";s:4:"type";s:10:"audio/mpeg";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:7:"creator";a:1:{i:0;a:5:{s:4:"data";s:11:"Danish Khan";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:40:"http://purl.org/rss/1.0/modules/content/";a:1:{s:7:"encoded";a:1:{i:0;a:5:{s:4:"data";s:1439:"<p><img class="aligncenter" title="Koans" src="https://img.skitch.com/20110211-tqpgcccukqi47xkt7f9n7m4ii3.jpg" alt="" width="343" height="449" /></p>
<p>This week we interview Joe O&#8217;Brien of <a title="EdgeCase" href="http://www.edgecase.com/" target="_blank">EdgeCase</a> and <a href="http://columbusrb.com/">Columbus.rb</a>. We talk to Joe about the reasons behind founding EdgeCase, and about <a title="Ruby Koans" href="http://rubykoans.com/" target="_blank">Ruby Koans</a>, one of EdgeCase&#8217;s most popular open source projects to help Ruby newcomers improve their skills. Joe talks to us about how the first standalone <a title="JRuby talks" href="http://erubycon.com/schedule" target="_self">JRubyConf 2010</a> went last year, and about the <a title="Whisky Geeks" href="http://whiskygeeks.com//" target="_blank">The Whisky Tour</a> you may have heard about.</p>
<p><audio controls preload="metadata" autobuffer><br />
      <source src="http://s3.amazonaws.com/engineyard.com/podcasts/mp3/mp3s/10/cloud_out_loud_joe_obrien.mp3" /><br />
      <source src="http://s3.amazonaws.com/engineyard.com/podcasts/ogg/oggs/10/cloud_out_loud_joe_obrien.ogg" /><br />
      Your browser does not support native audio.<br />
</audio> <img src="http://www.engineyard.com/blog/?ak_action=api_record_view&#038;id=7209&#038;type=feed" alt="" /></p>
<img src="http://feeds.feedburner.com/~r/engineyard/~4/11C86FHDWkQ" height="1" width="1"/>";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:36:"http://wellformedweb.org/CommentAPI/";a:1:{s:10:"commentRss";a:1:{i:0;a:5:{s:4:"data";s:84:"http://www.engineyard.com/blog/2011/engine-yard-cloud-out-loud-s01e10-edgecase/feed/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:38:"http://purl.org/rss/1.0/modules/slash/";a:1:{s:8:"comments";a:1:{i:0;a:5:{s:4:"data";s:1:"0";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:42:"http://rssnamespace.org/feedburner/ext/1.0";a:2:{s:8:"origLink";a:1:{i:0;a:5:{s:4:"data";s:79:"http://www.engineyard.com/blog/2011/engine-yard-cloud-out-loud-s01e10-edgecase/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:17:"origEnclosureLink";a:1:{i:0;a:5:{s:4:"data";s:89:"http://s3.amazonaws.com/engineyard.com/podcasts/mp3/mp3s/10/cloud_out_loud_joe_obrien.mp3";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:5;a:6:{s:4:"data";s:47:"
		
		
		
		
		
				
		
		

		
		
			
			
		
		";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:6:{s:0:"";a:7:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:39:"Reuse your JavaScript as jQuery Plugins";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:57:"http://feedproxy.google.com/~r/engineyard/~3/AJksXTk8kGE/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:8:"comments";a:1:{i:0;a:5:{s:4:"data";s:85:"http://www.engineyard.com/blog/2011/reuse-your-javascript-as-jquery-plugins/#comments";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Thu, 10 Feb 2011 22:55:20 +0000";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:8:"category";a:3:{i:0;a:5:{s:4:"data";s:13:"Uncategorized";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:1;a:5:{s:4:"data";s:10:"JavaScript";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:2;a:5:{s:4:"data";s:6:"jQuery";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:38:"http://www.engineyard.com/blog/?p=7082";s:7:"attribs";a:1:{s:0:"";a:1:{s:11:"isPermaLink";s:5:"false";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:38338:"<div class="note">Today&#8217;s guest post is from <a href="http://www.webvanta.com/team">Christopher Haupt</a> of <a href="http://www.webvanta.com/">Webvanta</a>, an Engine Yard partner. Christopher is co-founder of Webvanta, co-host of the <a href="http://www.buildingwebapps.com/learningrails">Learning Rails</a> podcast, and frequent contributor at Ruby and Web Development and Design related conferences, meet-ups, and publications.</p>
<p>Webvanta is co-sponsoring the first annual <a href="http://www.northbaywebconference.com?s=eyb">North Bay Web Design Conference</a> on April 12, 2011 in Rohnert Park, CA. <a href="http://www.northbaywebconference.com/join-list?s=eyb">Join the mailing list</a> to be the first to find out when the agenda and registration info are announced in March.</p>
</div>
<p>Our team finds that we get the greatest leverage out of our existing collection of code snippets by organizing them into well structured, easy to maintain libraries of pluggable modules. This is the first article in a two part series. In this article, we take a whirl-wind tour of how to create reusable modules with front-end JavaScript code using the popular jQuery library. In the follow-up article, we will briefly examine the Web Storage technology that has come out of the HTML5 specification process and then show how simple it is to wrap it within a jQuery plugin.</p>
<p>If you go back and look through the last few web app projects you&#8217;ve completed, you probably will find that you have accumulated a variety of snippets of JavaScript that may have even been tweaked to be reused in follow-on projects. If you haven&#8217;t yet organized these bits of code in a particular way, you may want to consider leveraging an existing framework that provides well-defined structure for code reuse.</p>
<p>Our team primarily uses <a href="http://jquery.org">jQuery</a>, a very straightforward and easy to use JavaScript library originally created by John Resig back in 2006. If you are new to jQuery, we recommend the excellent <a href="http://www.manning.com/bibeault2/">jQuery in Action</a> book and jQuery&#8217;s own website for pointers to tutorials and documentation.</p>
<p>jQuery has two logical components. The base jQuery library includes a powerful CSS-like selector mechanism, easy methods to manipulate the DOM, rich effects, Ajax support, utilities, and more. The jQuery UI library provides a collection of user interface widgets. These two parts of jQuery form the basis of a rich ecosystem that is further enhanced with many plugins. Writing jQuery plugins is pretty straight-forward once you are familiar with the basic conventions.<span id="more-7082"></span></p>
<h2>Conventions Conventions</h2>
<p>If jQuery is a fit for your project, you can utilize its conventions to reap the benefits of a consistent code style, logical approach to working with data, and to easily leverage other basic building blocks of code.</p>
<p>Three particular best practices are self-evident with a quick review of the jQuery community (<a href="http://docs.jquery.com/Plugins/Authoring">see the plugin authoring guidelines for more details</a>).</p>
<p>First, files, functions, data, and events should follow naming rules to help form and maintain namespaces. Files will typically use the pattern of &#8220;jquery-prefix-name-version.js&#8221;. &#8220;jquery&#8221; identifies the file as a jQuery compatible piece of code, often a plugin. &#8220;prefix&#8221; is an optional word, acronym, or hyphenated phrase that identifies an organization or group of related files. &#8220;name&#8221; is the name of the plugin. &#8220;version&#8221; is usually the major and minor version numbers of the code, e.g. jquery-webvanta-icon-picker-1.0.js.</p>
<p>Functions, data, and events should use specific techniques outlined in the jQuery Plugin Authoring guidelines to minimize conflicts between different plugins.</p>
<p>A second convention deals with the common issue of protecting your jQuery plugin from interference by other JavaScript libraries or function namespaces. It also typically includes a simple trick for safely accessing the shorthand &#8220;$&#8221; variable which holds a reference to the jQuery object. By defining a self executing anonymous function that forms a closure, you keep your code reasonably isolated:</p>

<div class="wp_syntax"><div class="code"><pre class="javascript" style="font-family:monospace;">  <span style="color: #009900;">&#40;</span><span style="color: #003366; font-weight: bold;">function</span><span style="color: #009900;">&#40;</span>$<span style="color: #009900;">&#41;</span><span style="color: #009900;">&#123;</span>
    $.<span style="color: #660066;">iconPicker</span> <span style="color: #339933;">=</span> <span style="color: #003366; font-weight: bold;">function</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span>
      <span style="color: #006600; font-style: italic;">// Your code goes here</span>
    <span style="color: #009900;">&#125;</span>
  <span style="color: #009900;">&#125;</span><span style="color: #009900;">&#41;</span><span style="color: #009900;">&#40;</span>jQuery<span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span></pre></div></div>

<p>The anonymous function runs as soon as it is defined, passing the global &#8220;jQuery&#8221; value as a parameter, where it gets assigned to the local parameter name &#8220;$&#8221;, which is then accessible to the internal scope of the function regardless of what &#8220;$&#8221; may be outside.</p>
<p>A third convention details how parameters are passed to your plugin. Rather than long and complicated function signatures with many individual parameters (e.g. icon-picker(element, color, size, effect, delay)), utilize the technique of passing in a single JavaScript literal object, which simulates a collection of name/value pairs. This makes for more readable code, and makes it easy to implement default values and to allow for arbitrary missing or added parameters:</p>

<div class="wp_syntax"><div class="code"><pre class="javascript" style="font-family:monospace;">  $.<span style="color: #660066;">iconPicker</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#123;</span>element<span style="color: #339933;">:</span> el<span style="color: #339933;">,</span> color<span style="color: #339933;">:</span> <span style="color: #3366CC;">'blue'</span><span style="color: #339933;">,</span> size<span style="color: #339933;">:</span> <span style="color: #CC0000;">3</span><span style="color: #339933;">,</span> effect<span style="color: #339933;">:</span> <span style="color: #3366CC;">'shrink'</span><span style="color: #339933;">,</span> delay<span style="color: #339933;">:</span> <span style="color: #CC0000;">1000</span><span style="color: #009900;">&#125;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span></pre></div></div>

<p>You&#8217;ll use this technique most commonly when writing a plugin with many optional parameters. For Rubyists, this may look similar to using a tailing hash in the parameter list to pick up arbitrary or named parameters.</p>
<h2>Plain Old Utility Function Pattern</h2>
<p>Utility functions are typically small routines that accomplish some basic self-contained task, such as string or date-time manipulation, working with cookies, or logging information. In the jQuery world, the usual approach to organizing such code is to attach these functions off of the main jQuery namespace. Remembering our conventions discussed earlier, this might look like:</p>

<div class="wp_syntax"><div class="code"><pre class="javascript" style="font-family:monospace;"><span style="color: #009900;">&#40;</span><span style="color: #003366; font-weight: bold;">function</span><span style="color: #009900;">&#40;</span>$<span style="color: #009900;">&#41;</span><span style="color: #009900;">&#123;</span>
  $.<span style="color: #660066;">webvantaUtils</span> <span style="color: #339933;">=</span> <span style="color: #009900;">&#123;</span><span style="color: #009900;">&#125;</span><span style="color: #339933;">;</span>
  $.<span style="color: #660066;">webvantaUtils</span>.<span style="color: #660066;">readCookie</span> <span style="color: #339933;">=</span> <span style="color: #003366; font-weight: bold;">function</span><span style="color: #009900;">&#40;</span><span style="color: #000066;">name</span><span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span>
      <span style="color: #003366; font-weight: bold;">var</span> ne <span style="color: #339933;">=</span> <span style="color: #000066;">name</span> <span style="color: #339933;">+</span> <span style="color: #3366CC;">&quot;=&quot;</span><span style="color: #339933;">,</span>
      ca <span style="color: #339933;">=</span> document.<span style="color: #660066;">cookie</span>.<span style="color: #660066;">split</span><span style="color: #009900;">&#40;</span><span style="color: #3366CC;">';'</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
      <span style="color: #000066; font-weight: bold;">for</span><span style="color: #009900;">&#40;</span><span style="color: #003366; font-weight: bold;">var</span> i<span style="color: #339933;">=</span><span style="color: #CC0000;">0</span><span style="color: #339933;">;</span>i <span style="color: #339933;">&lt;</span> ca.<span style="color: #660066;">length</span><span style="color: #339933;">;</span>i<span style="color: #339933;">++</span><span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span>
        <span style="color: #003366; font-weight: bold;">var</span> c <span style="color: #339933;">=</span> ca<span style="color: #009900;">&#91;</span>i<span style="color: #009900;">&#93;</span><span style="color: #339933;">;</span>
        <span style="color: #000066; font-weight: bold;">while</span> <span style="color: #009900;">&#40;</span>c.<span style="color: #660066;">charAt</span><span style="color: #009900;">&#40;</span><span style="color: #CC0000;">0</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">==</span><span style="color: #3366CC;">' '</span><span style="color: #009900;">&#41;</span> c <span style="color: #339933;">=</span> c.<span style="color: #660066;">substring</span><span style="color: #009900;">&#40;</span><span style="color: #CC0000;">1</span><span style="color: #339933;">,</span>c.<span style="color: #660066;">length</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
        <span style="color: #000066; font-weight: bold;">if</span> <span style="color: #009900;">&#40;</span>c.<span style="color: #660066;">indexOf</span><span style="color: #009900;">&#40;</span>ne<span style="color: #009900;">&#41;</span> <span style="color: #339933;">==</span> <span style="color: #CC0000;">0</span><span style="color: #009900;">&#41;</span> <span style="color: #000066; font-weight: bold;">return</span> c.<span style="color: #660066;">substring</span><span style="color: #009900;">&#40;</span>ne.<span style="color: #660066;">length</span><span style="color: #339933;">,</span>c.<span style="color: #660066;">length</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
      <span style="color: #009900;">&#125;</span>
      <span style="color: #000066; font-weight: bold;">return</span> <span style="color: #003366; font-weight: bold;">null</span><span style="color: #339933;">;</span>
    <span style="color: #009900;">&#125;</span>
<span style="color: #009900;">&#125;</span><span style="color: #009900;">&#41;</span><span style="color: #009900;">&#40;</span>jQuery<span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span></pre></div></div>

<p>Note we have namespaced our cookie related function under a higher level namespace organized in this case by a company library.</p>
<p>Once defined, you can use such a function elsewhere via simple reference (you could use &#8220;$&#8221; rather than jQuery if you wish and you know that it isn&#8217;t being used for some conflicting purpose in the scope of the call):</p>

<div class="wp_syntax"><div class="code"><pre class="javascript" style="font-family:monospace;"><span style="color: #003366; font-weight: bold;">var</span> myUser <span style="color: #339933;">=</span> jQuery.<span style="color: #660066;">webvantaUtils</span>.<span style="color: #660066;">readCookie</span><span style="color: #009900;">&#40;</span><span style="color: #3366CC;">'user_info'</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span></pre></div></div>

<h2>Wrapped Set Function Pattern</h2>
<p>If you have utilities that act on DOM elements, you should tie in to jQuery&#8217;s ability to operate on a collection of DOM elements called a wrapped set.</p>
<p>Instead of assigning our functions to the top-level jQuery namespace, we instead connect to the &#8220;fn&#8221; object, which gains us access to the wrapped set through the &#8220;this&#8221; variable.</p>
<p>Let&#8217;s say you have some utility code that counts how many times any of your form input elements contain a particular letter sequence:</p>

<div class="wp_syntax"><div class="code"><pre class="javascript" style="font-family:monospace;"><span style="color: #009900;">&#40;</span><span style="color: #003366; font-weight: bold;">function</span><span style="color: #009900;">&#40;</span>$<span style="color: #009900;">&#41;</span><span style="color: #009900;">&#123;</span>
  $.<span style="color: #660066;">fn</span>.<span style="color: #660066;">redAlert</span> <span style="color: #339933;">=</span> <span style="color: #003366; font-weight: bold;">function</span><span style="color: #009900;">&#40;</span>badValue<span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span>
    <span style="color: #003366; font-weight: bold;">var</span> badValueFound <span style="color: #339933;">=</span> <span style="color: #CC0000;">0</span><span style="color: #339933;">;</span>
    <span style="color: #000066; font-weight: bold;">this</span>.<span style="color: #660066;">each</span><span style="color: #009900;">&#40;</span><span style="color: #003366; font-weight: bold;">function</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span>
      <span style="color: #000066; font-weight: bold;">if</span> <span style="color: #009900;">&#40;</span>$<span style="color: #009900;">&#40;</span><span style="color: #000066; font-weight: bold;">this</span><span style="color: #009900;">&#41;</span>.<span style="color: #660066;">val</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span>.<span style="color: #660066;">toLowerCase</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span>.<span style="color: #660066;">indexOf</span><span style="color: #009900;">&#40;</span>badValue.<span style="color: #660066;">toLowerCase</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #009900;">&#41;</span> <span style="color: #339933;">&gt;=</span> <span style="color: #CC0000;">0</span><span style="color: #009900;">&#41;</span>
        badValueFound <span style="color: #339933;">=</span> badValueFound <span style="color: #339933;">+</span> <span style="color: #CC0000;">1</span><span style="color: #339933;">;</span>
    <span style="color: #009900;">&#125;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
    <span style="color: #000066; font-weight: bold;">return</span> badValueFound<span style="color: #339933;">;</span>
  <span style="color: #009900;">&#125;</span><span style="color: #339933;">;</span>
<span style="color: #009900;">&#125;</span><span style="color: #009900;">&#41;</span><span style="color: #009900;">&#40;</span>jQuery<span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span></pre></div></div>

<p>We use the wrapped set found in the first &#8220;this&#8221; and call an iterator on it to walk through each value in the set. Within the function passed to the &#8220;each&#8221; iterator, the value of &#8220;this&#8221; changes to point to one of the wrapped set&#8217;s DOM elements. We can reconstitute that element as a jQuery object with the $(this) idiom, and use it as we wish&#8230;here to compare some string values.</p>
<p>You might use the plugin like so:</p>

<div class="wp_syntax"><div class="code"><pre class="javascript" style="font-family:monospace;">  <span style="color: #000066; font-weight: bold;">if</span> <span style="color: #009900;">&#40;</span>$<span style="color: #009900;">&#40;</span><span style="color: #3366CC;">&quot;form input:text&quot;</span><span style="color: #009900;">&#41;</span>.<span style="color: #660066;">redAlert</span><span style="color: #009900;">&#40;</span><span style="color: #3366CC;">'Stink'</span><span style="color: #009900;">&#41;</span> <span style="color: #339933;">&gt;</span> <span style="color: #CC0000;">0</span><span style="color: #009900;">&#41;</span>
    <span style="color: #000066;">alert</span><span style="color: #009900;">&#40;</span><span style="color: #3366CC;">&quot;Something smells in the form&quot;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span></pre></div></div>

<p>In this contrived example, we are returning an integer value to accomplish our goals.</p>
<h2>Adding Chaining</h2>
<p>If you are not returning a specific value from your function, with only a small tweak you can  gain the benefit of being able to have your utility chained together with other jQuery code. Such plugin chains are often used to accomplish complex actions easily and efficiently.</p>
<p>The trick is to simply return the &#8220;this&#8221; value that contains the wrapped set:</p>

<div class="wp_syntax"><div class="code"><pre class="javascript" style="font-family:monospace;">  <span style="color: #009900;">&#40;</span><span style="color: #003366; font-weight: bold;">function</span><span style="color: #009900;">&#40;</span>$<span style="color: #009900;">&#41;</span><span style="color: #009900;">&#123;</span>
    $.<span style="color: #660066;">fn</span>.<span style="color: #660066;">redAlert</span> <span style="color: #339933;">=</span> <span style="color: #003366; font-weight: bold;">function</span><span style="color: #009900;">&#40;</span>badValue<span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span>
      <span style="color: #000066; font-weight: bold;">return</span> <span style="color: #000066; font-weight: bold;">this</span>.<span style="color: #660066;">each</span><span style="color: #009900;">&#40;</span><span style="color: #003366; font-weight: bold;">function</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span>
        <span style="color: #000066; font-weight: bold;">if</span> <span style="color: #009900;">&#40;</span>$<span style="color: #009900;">&#40;</span><span style="color: #000066; font-weight: bold;">this</span><span style="color: #009900;">&#41;</span>.<span style="color: #660066;">val</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span>.<span style="color: #660066;">toLowerCase</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span>.<span style="color: #660066;">indexOf</span><span style="color: #009900;">&#40;</span>badValue.<span style="color: #660066;">toLowerCase</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #009900;">&#41;</span> <span style="color: #339933;">&gt;=</span> <span style="color: #CC0000;">0</span><span style="color: #009900;">&#41;</span>
           $<span style="color: #009900;">&#40;</span><span style="color: #000066; font-weight: bold;">this</span><span style="color: #009900;">&#41;</span>.<span style="color: #660066;">addClass</span><span style="color: #009900;">&#40;</span><span style="color: #3366CC;">'error'</span><span style="color: #009900;">&#41;</span>.<span style="color: #660066;">css</span><span style="color: #009900;">&#40;</span><span style="color: #3366CC;">'background-color'</span><span style="color: #339933;">,</span> <span style="color: #3366CC;">'red'</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
      <span style="color: #009900;">&#125;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
    <span style="color: #009900;">&#125;</span><span style="color: #339933;">;</span>
  <span style="color: #009900;">&#125;</span><span style="color: #009900;">&#41;</span><span style="color: #009900;">&#40;</span>jQuery<span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span></pre></div></div>

<p>So I can then construct a chain of calls:</p>

<div class="wp_syntax"><div class="code"><pre class="javascript" style="font-family:monospace;">$<span style="color: #009900;">&#40;</span><span style="color: #3366CC;">&quot;form input:text&quot;</span><span style="color: #009900;">&#41;</span>.<span style="color: #660066;">redAlert</span><span style="color: #009900;">&#40;</span><span style="color: #3366CC;">'Stink'</span><span style="color: #009900;">&#41;</span>.<span style="color: #660066;">addClass</span><span style="color: #009900;">&#40;</span><span style="color: #3366CC;">'scanned'</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span></pre></div></div>

<h2>But Where is the Namespacing?</h2>
<p>You may have noticed that we skipped an important step when implementing our redAlert plugin. It isn&#8217;t namespaced.</p>
<p>Simply pushing our function into a sub-object, like we did for our readCookie utility plugin won&#8217;t work:</p>

<div class="wp_syntax"><div class="code"><pre class="javascript" style="font-family:monospace;"><span style="color: #009900;">&#40;</span><span style="color: #003366; font-weight: bold;">function</span><span style="color: #009900;">&#40;</span>$<span style="color: #009900;">&#41;</span><span style="color: #009900;">&#123;</span>
  <span style="color: #006600; font-style: italic;">// BAD, THIS WON'T WORK</span>
  $.<span style="color: #660066;">fn</span>.<span style="color: #660066;">webvantaUtils</span> <span style="color: #339933;">=</span> <span style="color: #009900;">&#123;</span><span style="color: #009900;">&#125;</span><span style="color: #339933;">;</span>
  $.<span style="color: #660066;">fn</span>.<span style="color: #660066;">webvantaUtils</span>.<span style="color: #660066;">redAlert</span> <span style="color: #339933;">=</span> <span style="color: #003366; font-weight: bold;">function</span><span style="color: #009900;">&#40;</span>badValue<span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span>
    <span style="color: #000066; font-weight: bold;">return</span> <span style="color: #000066; font-weight: bold;">this</span>.<span style="color: #660066;">each</span><span style="color: #009900;">&#40;</span><span style="color: #003366; font-weight: bold;">function</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span>
      <span style="color: #000066; font-weight: bold;">if</span> <span style="color: #009900;">&#40;</span>$<span style="color: #009900;">&#40;</span><span style="color: #000066; font-weight: bold;">this</span><span style="color: #009900;">&#41;</span>.<span style="color: #660066;">val</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span>.<span style="color: #660066;">toLowerCase</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span>.<span style="color: #660066;">indexOf</span><span style="color: #009900;">&#40;</span>badValue.<span style="color: #660066;">toLowerCase</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #009900;">&#41;</span> <span style="color: #339933;">&gt;=</span> <span style="color: #CC0000;">0</span><span style="color: #009900;">&#41;</span>
        $<span style="color: #009900;">&#40;</span><span style="color: #000066; font-weight: bold;">this</span><span style="color: #009900;">&#41;</span>.<span style="color: #660066;">addClass</span><span style="color: #009900;">&#40;</span><span style="color: #3366CC;">'error'</span><span style="color: #009900;">&#41;</span>.<span style="color: #660066;">css</span><span style="color: #009900;">&#40;</span><span style="color: #3366CC;">'background-color'</span><span style="color: #339933;">,</span> <span style="color: #3366CC;">'red'</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
    <span style="color: #009900;">&#125;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
  <span style="color: #009900;">&#125;</span><span style="color: #339933;">;</span>
<span style="color: #009900;">&#125;</span><span style="color: #009900;">&#41;</span><span style="color: #009900;">&#40;</span>jQuery<span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span></pre></div></div>

<p>When doing so, we lose access to the wrapped set contained in the initial &#8220;this&#8221; variable. It instead points to the webvantaUtils object, not the wrapped set.</p>
<p>To get around this issue, the jQuery recommendation is to organize all of your plugin methods within an object literal, then use a dispatcher technique to access the desired functions:</p>

<div class="wp_syntax"><div class="code"><pre class="javascript" style="font-family:monospace;"><span style="color: #009900;">&#40;</span><span style="color: #003366; font-weight: bold;">function</span><span style="color: #009900;">&#40;</span> $ <span style="color: #009900;">&#41;</span><span style="color: #009900;">&#123;</span>
  <span style="color: #003366; font-weight: bold;">var</span> methods <span style="color: #339933;">=</span> <span style="color: #009900;">&#123;</span>
    init <span style="color: #339933;">:</span> <span style="color: #003366; font-weight: bold;">function</span><span style="color: #009900;">&#40;</span> options <span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span> <span style="color: #009900;">&#125;</span><span style="color: #339933;">,</span>
    redAlert <span style="color: #339933;">:</span> <span style="color: #003366; font-weight: bold;">function</span><span style="color: #009900;">&#40;</span>badValue<span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span>
      <span style="color: #000066; font-weight: bold;">return</span> <span style="color: #000066; font-weight: bold;">this</span>.<span style="color: #660066;">each</span><span style="color: #009900;">&#40;</span><span style="color: #003366; font-weight: bold;">function</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span>
        <span style="color: #000066; font-weight: bold;">if</span> <span style="color: #009900;">&#40;</span>$<span style="color: #009900;">&#40;</span><span style="color: #000066; font-weight: bold;">this</span><span style="color: #009900;">&#41;</span>.<span style="color: #660066;">val</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span>.<span style="color: #660066;">toLowerCase</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span>.<span style="color: #660066;">indexOf</span><span style="color: #009900;">&#40;</span>badValue.<span style="color: #660066;">toLowerCase</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #009900;">&#41;</span> <span style="color: #339933;">&gt;=</span> <span style="color: #CC0000;">0</span><span style="color: #009900;">&#41;</span>
          $<span style="color: #009900;">&#40;</span><span style="color: #000066; font-weight: bold;">this</span><span style="color: #009900;">&#41;</span>.<span style="color: #660066;">addClass</span><span style="color: #009900;">&#40;</span><span style="color: #3366CC;">'error'</span><span style="color: #009900;">&#41;</span>.<span style="color: #660066;">css</span><span style="color: #009900;">&#40;</span><span style="color: #3366CC;">'background-color'</span><span style="color: #339933;">,</span> <span style="color: #3366CC;">'red'</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
      <span style="color: #009900;">&#125;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
    <span style="color: #009900;">&#125;</span>
  <span style="color: #009900;">&#125;</span><span style="color: #339933;">;</span>
  $.<span style="color: #660066;">fn</span>.<span style="color: #660066;">webvantaUtils</span> <span style="color: #339933;">=</span> <span style="color: #003366; font-weight: bold;">function</span><span style="color: #009900;">&#40;</span> method <span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span>
    <span style="color: #006600; font-style: italic;">// Method dispatch logic</span>
    <span style="color: #000066; font-weight: bold;">if</span> <span style="color: #009900;">&#40;</span> methods<span style="color: #009900;">&#91;</span>method<span style="color: #009900;">&#93;</span> <span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span>
      <span style="color: #000066; font-weight: bold;">return</span> methods<span style="color: #009900;">&#91;</span> method <span style="color: #009900;">&#93;</span>.<span style="color: #660066;">apply</span><span style="color: #009900;">&#40;</span> <span style="color: #000066; font-weight: bold;">this</span><span style="color: #339933;">,</span> Array.<span style="color: #660066;">prototype</span>.<span style="color: #660066;">slice</span>.<span style="color: #660066;">call</span><span style="color: #009900;">&#40;</span> arguments<span style="color: #339933;">,</span> <span style="color: #CC0000;">1</span> <span style="color: #009900;">&#41;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
    <span style="color: #009900;">&#125;</span> <span style="color: #000066; font-weight: bold;">else</span> <span style="color: #000066; font-weight: bold;">if</span> <span style="color: #009900;">&#40;</span> <span style="color: #000066; font-weight: bold;">typeof</span> method <span style="color: #339933;">===</span> <span style="color: #3366CC;">'object'</span> <span style="color: #339933;">||</span> <span style="color: #339933;">!</span> method <span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span>
      <span style="color: #000066; font-weight: bold;">return</span> methods.<span style="color: #660066;">init</span>.<span style="color: #660066;">apply</span><span style="color: #009900;">&#40;</span> <span style="color: #000066; font-weight: bold;">this</span><span style="color: #339933;">,</span> arguments <span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
    <span style="color: #009900;">&#125;</span> <span style="color: #000066; font-weight: bold;">else</span> <span style="color: #009900;">&#123;</span>
      $.<span style="color: #660066;">error</span><span style="color: #009900;">&#40;</span> <span style="color: #3366CC;">'Method '</span> <span style="color: #339933;">+</span>  method <span style="color: #339933;">+</span> <span style="color: #3366CC;">' does not exist on jQuery.webvantaUtils'</span> <span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
    <span style="color: #009900;">&#125;</span>
  <span style="color: #009900;">&#125;</span><span style="color: #339933;">;</span>
<span style="color: #009900;">&#125;</span><span style="color: #009900;">&#41;</span><span style="color: #009900;">&#40;</span> jQuery <span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span></pre></div></div>

<p>And then call it via:</p>

<div class="wp_syntax"><div class="code"><pre class="javascript" style="font-family:monospace;">$<span style="color: #009900;">&#40;</span><span style="color: #3366CC;">&quot;form input:text&quot;</span><span style="color: #009900;">&#41;</span>.<span style="color: #660066;">webvantaUtils</span><span style="color: #009900;">&#40;</span><span style="color: #3366CC;">'redAlert'</span><span style="color: #339933;">,</span><span style="color: #3366CC;">'Stink'</span><span style="color: #009900;">&#41;</span>.<span style="color: #660066;">addClass</span><span style="color: #009900;">&#40;</span><span style="color: #3366CC;">'scanned'</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span></pre></div></div>

<p>This approach is a little more complicated, but ensures that the namespace is &#8220;clean&#8221;. It uses a few JavaScript tricks to accomplish its goal. First, the actual functions of our plugin are stored as attributes of the literal object called &#8220;methods&#8221;. Second, the entry point to our plugin is the &#8220;namespace&#8221;, here &#8220;webvantaUtils&#8221;.</p>
<p>When we invoke the plugin through this entry point, it first checks to see what kind of parameters were passed in. That may sound odd, since it looks like the entry point only takes one named parameter &#8220;method&#8221;. Regardless of the number of named arguments, JavaScript doesn&#8217;t complain if &#8220;extra&#8221; parameters are passed in.</p>
<p>The expectation is that the first parameter will either be nothing at all, an object of some kind, or a string naming the desired function.</p>
<p>First the entry point tries to use the value of &#8220;method&#8221; to find a matching attribute of the &#8220;methods&#8221; object. If that fails, it next checks to see if &#8220;method&#8221; is itself an object OR it is a null or undefined value. In that case, with our sample above, an optional &#8220;init&#8221; method is invoked. This is purely convention, and could be stripped out if you don&#8217;t need to initialize anything. &#8220;init&#8221; is a handy place if you have default values you need to set up or override.</p>
<p>If none of the previous conditions are true, then an error message gets displayed in the console.</p>
<p>Now, in the case of both the init function or a matched function name being found in the methods object, the code uses the JavaScript apply() method. apply() is a method on the Function object. apply()&#8217;s job is to execute the receiver&#8217;s function, and it uses its first parameter to set what the value of &#8220;this&#8221; will be inside of that function. The second parameter is an array which is passed to the called function as its parameter list.</p>
<p>Here we see the special Argument object being used in the variable called &#8220;arguments&#8221;. JavaScript always sets &#8220;arguments&#8221; to contain the complete parameter list of a called function. In this case, it is used to pass on any parameters sent to the entry point (other than the first one in the case of a name string being passed in to invoke a plugin function).</p>
<p>This may be slightly confusing, yet digging in to the JavaScript is educational. The good news is that you can focus on using this &#8220;plugin pattern&#8221; as a template for your own code and mostly ignore the rest of the details when getting started.</p>
<p>The <a href="http://docs.jquery.com/Plugins/Authoring">jQuery Plugin Authoring guidelines</a> contain even more examples.</p>
<h2>UI Widget Factories</h2>
<p>While we won&#8217;t get in to the details here, we should point out that if you are trying to build user interface code, or need to construct more complicated, <a href="http://blog.nemikor.com/2010/05/15/building-stateful-jquery-plugins/">statefull plugins</a>, a worthwhile plugin architecture to review is the <a href="http://jqueryui.com/docs/Developer_Guide">jQuery UI Widget</a> factory mechanism. Widgets provide additional conventions for organizing code including dealing with defaults and options on a per widget basis, code hiding of &#8220;private&#8221; functions used by the widget, and ways of exposing widget data accessors, events, and other functionality.</p>
<h2>A Wrap of Plugins</h2>
<p>We&#8217;ve briefly explored the basics that will permit you to clean up and possibly refactor your existing JavaScript code into reusable jQuery plugins. With the information presented in this article, and the Plugin Authoring notes on the jQuery.org site, you should have all you need to get started. Next time, we will take a peek at a relatively new client-side storage technology that has come out of the HTML5 efforts and build a small jQuery plugin that wraps it with a generic API.</p>
<div class="note"><strong>About Webvanta</strong></p>
<p>Webvanta provides a <a href="http://www.webvanta.com">hosted CMS</a> and site-building services for designers and front-end developers. Their platform is built on Ruby on Rails and is hosted by Engine Yard. Webvanta offers a free ebook, <a href="http://www.webvanta.com/5tips-ebook?s=eyb">5 Tips for Building Better Sites</a>, that summarizes the key lessons learned from being involved with more than 200 sites in the past two years.</p>
<p>Webvanta is co-sponsoring the first annual <a href="http://www.northbaywebconference.com?s=eyb">North Bay Web Design Conference</a> on April 12, 2011 in Rohnert Park, CA. To learn more about the event, <a href="http://www.northbaywebconference.com/join-list?s=eyb">join the mailing list</a> to find out first when the agenda is announced and registration is opened in March.</p>
</div>
<p><img src="http://www.engineyard.com/blog/?ak_action=api_record_view&#038;id=7082&#038;type=feed" alt="" /></p>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:7:"creator";a:1:{i:0;a:5:{s:4:"data";s:17:"Christopher Haupt";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:40:"http://purl.org/rss/1.0/modules/content/";a:1:{s:7:"encoded";a:1:{i:0;a:5:{s:4:"data";s:38428:"<div class="note">Today&#8217;s guest post is from <a href="http://www.webvanta.com/team">Christopher Haupt</a> of <a href="http://www.webvanta.com/">Webvanta</a>, an Engine Yard partner. Christopher is co-founder of Webvanta, co-host of the <a href="http://www.buildingwebapps.com/learningrails">Learning Rails</a> podcast, and frequent contributor at Ruby and Web Development and Design related conferences, meet-ups, and publications.</p>
<p>Webvanta is co-sponsoring the first annual <a href="http://www.northbaywebconference.com?s=eyb">North Bay Web Design Conference</a> on April 12, 2011 in Rohnert Park, CA. <a href="http://www.northbaywebconference.com/join-list?s=eyb">Join the mailing list</a> to be the first to find out when the agenda and registration info are announced in March.</p>
</div>
<p>Our team finds that we get the greatest leverage out of our existing collection of code snippets by organizing them into well structured, easy to maintain libraries of pluggable modules. This is the first article in a two part series. In this article, we take a whirl-wind tour of how to create reusable modules with front-end JavaScript code using the popular jQuery library. In the follow-up article, we will briefly examine the Web Storage technology that has come out of the HTML5 specification process and then show how simple it is to wrap it within a jQuery plugin.</p>
<p>If you go back and look through the last few web app projects you&#8217;ve completed, you probably will find that you have accumulated a variety of snippets of JavaScript that may have even been tweaked to be reused in follow-on projects. If you haven&#8217;t yet organized these bits of code in a particular way, you may want to consider leveraging an existing framework that provides well-defined structure for code reuse.</p>
<p>Our team primarily uses <a href="http://jquery.org">jQuery</a>, a very straightforward and easy to use JavaScript library originally created by John Resig back in 2006. If you are new to jQuery, we recommend the excellent <a href="http://www.manning.com/bibeault2/">jQuery in Action</a> book and jQuery&#8217;s own website for pointers to tutorials and documentation.</p>
<p>jQuery has two logical components. The base jQuery library includes a powerful CSS-like selector mechanism, easy methods to manipulate the DOM, rich effects, Ajax support, utilities, and more. The jQuery UI library provides a collection of user interface widgets. These two parts of jQuery form the basis of a rich ecosystem that is further enhanced with many plugins. Writing jQuery plugins is pretty straight-forward once you are familiar with the basic conventions.<span id="more-7082"></span></p>
<h2>Conventions Conventions</h2>
<p>If jQuery is a fit for your project, you can utilize its conventions to reap the benefits of a consistent code style, logical approach to working with data, and to easily leverage other basic building blocks of code.</p>
<p>Three particular best practices are self-evident with a quick review of the jQuery community (<a href="http://docs.jquery.com/Plugins/Authoring">see the plugin authoring guidelines for more details</a>).</p>
<p>First, files, functions, data, and events should follow naming rules to help form and maintain namespaces. Files will typically use the pattern of &#8220;jquery-prefix-name-version.js&#8221;. &#8220;jquery&#8221; identifies the file as a jQuery compatible piece of code, often a plugin. &#8220;prefix&#8221; is an optional word, acronym, or hyphenated phrase that identifies an organization or group of related files. &#8220;name&#8221; is the name of the plugin. &#8220;version&#8221; is usually the major and minor version numbers of the code, e.g. jquery-webvanta-icon-picker-1.0.js.</p>
<p>Functions, data, and events should use specific techniques outlined in the jQuery Plugin Authoring guidelines to minimize conflicts between different plugins.</p>
<p>A second convention deals with the common issue of protecting your jQuery plugin from interference by other JavaScript libraries or function namespaces. It also typically includes a simple trick for safely accessing the shorthand &#8220;$&#8221; variable which holds a reference to the jQuery object. By defining a self executing anonymous function that forms a closure, you keep your code reasonably isolated:</p>

<div class="wp_syntax"><div class="code"><pre class="javascript" style="font-family:monospace;">  <span style="color: #009900;">&#40;</span><span style="color: #003366; font-weight: bold;">function</span><span style="color: #009900;">&#40;</span>$<span style="color: #009900;">&#41;</span><span style="color: #009900;">&#123;</span>
    $.<span style="color: #660066;">iconPicker</span> <span style="color: #339933;">=</span> <span style="color: #003366; font-weight: bold;">function</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span>
      <span style="color: #006600; font-style: italic;">// Your code goes here</span>
    <span style="color: #009900;">&#125;</span>
  <span style="color: #009900;">&#125;</span><span style="color: #009900;">&#41;</span><span style="color: #009900;">&#40;</span>jQuery<span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span></pre></div></div>

<p>The anonymous function runs as soon as it is defined, passing the global &#8220;jQuery&#8221; value as a parameter, where it gets assigned to the local parameter name &#8220;$&#8221;, which is then accessible to the internal scope of the function regardless of what &#8220;$&#8221; may be outside.</p>
<p>A third convention details how parameters are passed to your plugin. Rather than long and complicated function signatures with many individual parameters (e.g. icon-picker(element, color, size, effect, delay)), utilize the technique of passing in a single JavaScript literal object, which simulates a collection of name/value pairs. This makes for more readable code, and makes it easy to implement default values and to allow for arbitrary missing or added parameters:</p>

<div class="wp_syntax"><div class="code"><pre class="javascript" style="font-family:monospace;">  $.<span style="color: #660066;">iconPicker</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#123;</span>element<span style="color: #339933;">:</span> el<span style="color: #339933;">,</span> color<span style="color: #339933;">:</span> <span style="color: #3366CC;">'blue'</span><span style="color: #339933;">,</span> size<span style="color: #339933;">:</span> <span style="color: #CC0000;">3</span><span style="color: #339933;">,</span> effect<span style="color: #339933;">:</span> <span style="color: #3366CC;">'shrink'</span><span style="color: #339933;">,</span> delay<span style="color: #339933;">:</span> <span style="color: #CC0000;">1000</span><span style="color: #009900;">&#125;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span></pre></div></div>

<p>You&#8217;ll use this technique most commonly when writing a plugin with many optional parameters. For Rubyists, this may look similar to using a tailing hash in the parameter list to pick up arbitrary or named parameters.</p>
<h2>Plain Old Utility Function Pattern</h2>
<p>Utility functions are typically small routines that accomplish some basic self-contained task, such as string or date-time manipulation, working with cookies, or logging information. In the jQuery world, the usual approach to organizing such code is to attach these functions off of the main jQuery namespace. Remembering our conventions discussed earlier, this might look like:</p>

<div class="wp_syntax"><div class="code"><pre class="javascript" style="font-family:monospace;"><span style="color: #009900;">&#40;</span><span style="color: #003366; font-weight: bold;">function</span><span style="color: #009900;">&#40;</span>$<span style="color: #009900;">&#41;</span><span style="color: #009900;">&#123;</span>
  $.<span style="color: #660066;">webvantaUtils</span> <span style="color: #339933;">=</span> <span style="color: #009900;">&#123;</span><span style="color: #009900;">&#125;</span><span style="color: #339933;">;</span>
  $.<span style="color: #660066;">webvantaUtils</span>.<span style="color: #660066;">readCookie</span> <span style="color: #339933;">=</span> <span style="color: #003366; font-weight: bold;">function</span><span style="color: #009900;">&#40;</span><span style="color: #000066;">name</span><span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span>
      <span style="color: #003366; font-weight: bold;">var</span> ne <span style="color: #339933;">=</span> <span style="color: #000066;">name</span> <span style="color: #339933;">+</span> <span style="color: #3366CC;">&quot;=&quot;</span><span style="color: #339933;">,</span>
      ca <span style="color: #339933;">=</span> document.<span style="color: #660066;">cookie</span>.<span style="color: #660066;">split</span><span style="color: #009900;">&#40;</span><span style="color: #3366CC;">';'</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
      <span style="color: #000066; font-weight: bold;">for</span><span style="color: #009900;">&#40;</span><span style="color: #003366; font-weight: bold;">var</span> i<span style="color: #339933;">=</span><span style="color: #CC0000;">0</span><span style="color: #339933;">;</span>i <span style="color: #339933;">&lt;</span> ca.<span style="color: #660066;">length</span><span style="color: #339933;">;</span>i<span style="color: #339933;">++</span><span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span>
        <span style="color: #003366; font-weight: bold;">var</span> c <span style="color: #339933;">=</span> ca<span style="color: #009900;">&#91;</span>i<span style="color: #009900;">&#93;</span><span style="color: #339933;">;</span>
        <span style="color: #000066; font-weight: bold;">while</span> <span style="color: #009900;">&#40;</span>c.<span style="color: #660066;">charAt</span><span style="color: #009900;">&#40;</span><span style="color: #CC0000;">0</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">==</span><span style="color: #3366CC;">' '</span><span style="color: #009900;">&#41;</span> c <span style="color: #339933;">=</span> c.<span style="color: #660066;">substring</span><span style="color: #009900;">&#40;</span><span style="color: #CC0000;">1</span><span style="color: #339933;">,</span>c.<span style="color: #660066;">length</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
        <span style="color: #000066; font-weight: bold;">if</span> <span style="color: #009900;">&#40;</span>c.<span style="color: #660066;">indexOf</span><span style="color: #009900;">&#40;</span>ne<span style="color: #009900;">&#41;</span> <span style="color: #339933;">==</span> <span style="color: #CC0000;">0</span><span style="color: #009900;">&#41;</span> <span style="color: #000066; font-weight: bold;">return</span> c.<span style="color: #660066;">substring</span><span style="color: #009900;">&#40;</span>ne.<span style="color: #660066;">length</span><span style="color: #339933;">,</span>c.<span style="color: #660066;">length</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
      <span style="color: #009900;">&#125;</span>
      <span style="color: #000066; font-weight: bold;">return</span> <span style="color: #003366; font-weight: bold;">null</span><span style="color: #339933;">;</span>
    <span style="color: #009900;">&#125;</span>
<span style="color: #009900;">&#125;</span><span style="color: #009900;">&#41;</span><span style="color: #009900;">&#40;</span>jQuery<span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span></pre></div></div>

<p>Note we have namespaced our cookie related function under a higher level namespace organized in this case by a company library.</p>
<p>Once defined, you can use such a function elsewhere via simple reference (you could use &#8220;$&#8221; rather than jQuery if you wish and you know that it isn&#8217;t being used for some conflicting purpose in the scope of the call):</p>

<div class="wp_syntax"><div class="code"><pre class="javascript" style="font-family:monospace;"><span style="color: #003366; font-weight: bold;">var</span> myUser <span style="color: #339933;">=</span> jQuery.<span style="color: #660066;">webvantaUtils</span>.<span style="color: #660066;">readCookie</span><span style="color: #009900;">&#40;</span><span style="color: #3366CC;">'user_info'</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span></pre></div></div>

<h2>Wrapped Set Function Pattern</h2>
<p>If you have utilities that act on DOM elements, you should tie in to jQuery&#8217;s ability to operate on a collection of DOM elements called a wrapped set.</p>
<p>Instead of assigning our functions to the top-level jQuery namespace, we instead connect to the &#8220;fn&#8221; object, which gains us access to the wrapped set through the &#8220;this&#8221; variable.</p>
<p>Let&#8217;s say you have some utility code that counts how many times any of your form input elements contain a particular letter sequence:</p>

<div class="wp_syntax"><div class="code"><pre class="javascript" style="font-family:monospace;"><span style="color: #009900;">&#40;</span><span style="color: #003366; font-weight: bold;">function</span><span style="color: #009900;">&#40;</span>$<span style="color: #009900;">&#41;</span><span style="color: #009900;">&#123;</span>
  $.<span style="color: #660066;">fn</span>.<span style="color: #660066;">redAlert</span> <span style="color: #339933;">=</span> <span style="color: #003366; font-weight: bold;">function</span><span style="color: #009900;">&#40;</span>badValue<span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span>
    <span style="color: #003366; font-weight: bold;">var</span> badValueFound <span style="color: #339933;">=</span> <span style="color: #CC0000;">0</span><span style="color: #339933;">;</span>
    <span style="color: #000066; font-weight: bold;">this</span>.<span style="color: #660066;">each</span><span style="color: #009900;">&#40;</span><span style="color: #003366; font-weight: bold;">function</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span>
      <span style="color: #000066; font-weight: bold;">if</span> <span style="color: #009900;">&#40;</span>$<span style="color: #009900;">&#40;</span><span style="color: #000066; font-weight: bold;">this</span><span style="color: #009900;">&#41;</span>.<span style="color: #660066;">val</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span>.<span style="color: #660066;">toLowerCase</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span>.<span style="color: #660066;">indexOf</span><span style="color: #009900;">&#40;</span>badValue.<span style="color: #660066;">toLowerCase</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #009900;">&#41;</span> <span style="color: #339933;">&gt;=</span> <span style="color: #CC0000;">0</span><span style="color: #009900;">&#41;</span>
        badValueFound <span style="color: #339933;">=</span> badValueFound <span style="color: #339933;">+</span> <span style="color: #CC0000;">1</span><span style="color: #339933;">;</span>
    <span style="color: #009900;">&#125;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
    <span style="color: #000066; font-weight: bold;">return</span> badValueFound<span style="color: #339933;">;</span>
  <span style="color: #009900;">&#125;</span><span style="color: #339933;">;</span>
<span style="color: #009900;">&#125;</span><span style="color: #009900;">&#41;</span><span style="color: #009900;">&#40;</span>jQuery<span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span></pre></div></div>

<p>We use the wrapped set found in the first &#8220;this&#8221; and call an iterator on it to walk through each value in the set. Within the function passed to the &#8220;each&#8221; iterator, the value of &#8220;this&#8221; changes to point to one of the wrapped set&#8217;s DOM elements. We can reconstitute that element as a jQuery object with the $(this) idiom, and use it as we wish&#8230;here to compare some string values.</p>
<p>You might use the plugin like so:</p>

<div class="wp_syntax"><div class="code"><pre class="javascript" style="font-family:monospace;">  <span style="color: #000066; font-weight: bold;">if</span> <span style="color: #009900;">&#40;</span>$<span style="color: #009900;">&#40;</span><span style="color: #3366CC;">&quot;form input:text&quot;</span><span style="color: #009900;">&#41;</span>.<span style="color: #660066;">redAlert</span><span style="color: #009900;">&#40;</span><span style="color: #3366CC;">'Stink'</span><span style="color: #009900;">&#41;</span> <span style="color: #339933;">&gt;</span> <span style="color: #CC0000;">0</span><span style="color: #009900;">&#41;</span>
    <span style="color: #000066;">alert</span><span style="color: #009900;">&#40;</span><span style="color: #3366CC;">&quot;Something smells in the form&quot;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span></pre></div></div>

<p>In this contrived example, we are returning an integer value to accomplish our goals.</p>
<h2>Adding Chaining</h2>
<p>If you are not returning a specific value from your function, with only a small tweak you can  gain the benefit of being able to have your utility chained together with other jQuery code. Such plugin chains are often used to accomplish complex actions easily and efficiently.</p>
<p>The trick is to simply return the &#8220;this&#8221; value that contains the wrapped set:</p>

<div class="wp_syntax"><div class="code"><pre class="javascript" style="font-family:monospace;">  <span style="color: #009900;">&#40;</span><span style="color: #003366; font-weight: bold;">function</span><span style="color: #009900;">&#40;</span>$<span style="color: #009900;">&#41;</span><span style="color: #009900;">&#123;</span>
    $.<span style="color: #660066;">fn</span>.<span style="color: #660066;">redAlert</span> <span style="color: #339933;">=</span> <span style="color: #003366; font-weight: bold;">function</span><span style="color: #009900;">&#40;</span>badValue<span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span>
      <span style="color: #000066; font-weight: bold;">return</span> <span style="color: #000066; font-weight: bold;">this</span>.<span style="color: #660066;">each</span><span style="color: #009900;">&#40;</span><span style="color: #003366; font-weight: bold;">function</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span>
        <span style="color: #000066; font-weight: bold;">if</span> <span style="color: #009900;">&#40;</span>$<span style="color: #009900;">&#40;</span><span style="color: #000066; font-weight: bold;">this</span><span style="color: #009900;">&#41;</span>.<span style="color: #660066;">val</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span>.<span style="color: #660066;">toLowerCase</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span>.<span style="color: #660066;">indexOf</span><span style="color: #009900;">&#40;</span>badValue.<span style="color: #660066;">toLowerCase</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #009900;">&#41;</span> <span style="color: #339933;">&gt;=</span> <span style="color: #CC0000;">0</span><span style="color: #009900;">&#41;</span>
           $<span style="color: #009900;">&#40;</span><span style="color: #000066; font-weight: bold;">this</span><span style="color: #009900;">&#41;</span>.<span style="color: #660066;">addClass</span><span style="color: #009900;">&#40;</span><span style="color: #3366CC;">'error'</span><span style="color: #009900;">&#41;</span>.<span style="color: #660066;">css</span><span style="color: #009900;">&#40;</span><span style="color: #3366CC;">'background-color'</span><span style="color: #339933;">,</span> <span style="color: #3366CC;">'red'</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
      <span style="color: #009900;">&#125;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
    <span style="color: #009900;">&#125;</span><span style="color: #339933;">;</span>
  <span style="color: #009900;">&#125;</span><span style="color: #009900;">&#41;</span><span style="color: #009900;">&#40;</span>jQuery<span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span></pre></div></div>

<p>So I can then construct a chain of calls:</p>

<div class="wp_syntax"><div class="code"><pre class="javascript" style="font-family:monospace;">$<span style="color: #009900;">&#40;</span><span style="color: #3366CC;">&quot;form input:text&quot;</span><span style="color: #009900;">&#41;</span>.<span style="color: #660066;">redAlert</span><span style="color: #009900;">&#40;</span><span style="color: #3366CC;">'Stink'</span><span style="color: #009900;">&#41;</span>.<span style="color: #660066;">addClass</span><span style="color: #009900;">&#40;</span><span style="color: #3366CC;">'scanned'</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span></pre></div></div>

<h2>But Where is the Namespacing?</h2>
<p>You may have noticed that we skipped an important step when implementing our redAlert plugin. It isn&#8217;t namespaced.</p>
<p>Simply pushing our function into a sub-object, like we did for our readCookie utility plugin won&#8217;t work:</p>

<div class="wp_syntax"><div class="code"><pre class="javascript" style="font-family:monospace;"><span style="color: #009900;">&#40;</span><span style="color: #003366; font-weight: bold;">function</span><span style="color: #009900;">&#40;</span>$<span style="color: #009900;">&#41;</span><span style="color: #009900;">&#123;</span>
  <span style="color: #006600; font-style: italic;">// BAD, THIS WON'T WORK</span>
  $.<span style="color: #660066;">fn</span>.<span style="color: #660066;">webvantaUtils</span> <span style="color: #339933;">=</span> <span style="color: #009900;">&#123;</span><span style="color: #009900;">&#125;</span><span style="color: #339933;">;</span>
  $.<span style="color: #660066;">fn</span>.<span style="color: #660066;">webvantaUtils</span>.<span style="color: #660066;">redAlert</span> <span style="color: #339933;">=</span> <span style="color: #003366; font-weight: bold;">function</span><span style="color: #009900;">&#40;</span>badValue<span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span>
    <span style="color: #000066; font-weight: bold;">return</span> <span style="color: #000066; font-weight: bold;">this</span>.<span style="color: #660066;">each</span><span style="color: #009900;">&#40;</span><span style="color: #003366; font-weight: bold;">function</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span>
      <span style="color: #000066; font-weight: bold;">if</span> <span style="color: #009900;">&#40;</span>$<span style="color: #009900;">&#40;</span><span style="color: #000066; font-weight: bold;">this</span><span style="color: #009900;">&#41;</span>.<span style="color: #660066;">val</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span>.<span style="color: #660066;">toLowerCase</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span>.<span style="color: #660066;">indexOf</span><span style="color: #009900;">&#40;</span>badValue.<span style="color: #660066;">toLowerCase</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #009900;">&#41;</span> <span style="color: #339933;">&gt;=</span> <span style="color: #CC0000;">0</span><span style="color: #009900;">&#41;</span>
        $<span style="color: #009900;">&#40;</span><span style="color: #000066; font-weight: bold;">this</span><span style="color: #009900;">&#41;</span>.<span style="color: #660066;">addClass</span><span style="color: #009900;">&#40;</span><span style="color: #3366CC;">'error'</span><span style="color: #009900;">&#41;</span>.<span style="color: #660066;">css</span><span style="color: #009900;">&#40;</span><span style="color: #3366CC;">'background-color'</span><span style="color: #339933;">,</span> <span style="color: #3366CC;">'red'</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
    <span style="color: #009900;">&#125;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
  <span style="color: #009900;">&#125;</span><span style="color: #339933;">;</span>
<span style="color: #009900;">&#125;</span><span style="color: #009900;">&#41;</span><span style="color: #009900;">&#40;</span>jQuery<span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span></pre></div></div>

<p>When doing so, we lose access to the wrapped set contained in the initial &#8220;this&#8221; variable. It instead points to the webvantaUtils object, not the wrapped set.</p>
<p>To get around this issue, the jQuery recommendation is to organize all of your plugin methods within an object literal, then use a dispatcher technique to access the desired functions:</p>

<div class="wp_syntax"><div class="code"><pre class="javascript" style="font-family:monospace;"><span style="color: #009900;">&#40;</span><span style="color: #003366; font-weight: bold;">function</span><span style="color: #009900;">&#40;</span> $ <span style="color: #009900;">&#41;</span><span style="color: #009900;">&#123;</span>
  <span style="color: #003366; font-weight: bold;">var</span> methods <span style="color: #339933;">=</span> <span style="color: #009900;">&#123;</span>
    init <span style="color: #339933;">:</span> <span style="color: #003366; font-weight: bold;">function</span><span style="color: #009900;">&#40;</span> options <span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span> <span style="color: #009900;">&#125;</span><span style="color: #339933;">,</span>
    redAlert <span style="color: #339933;">:</span> <span style="color: #003366; font-weight: bold;">function</span><span style="color: #009900;">&#40;</span>badValue<span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span>
      <span style="color: #000066; font-weight: bold;">return</span> <span style="color: #000066; font-weight: bold;">this</span>.<span style="color: #660066;">each</span><span style="color: #009900;">&#40;</span><span style="color: #003366; font-weight: bold;">function</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span>
        <span style="color: #000066; font-weight: bold;">if</span> <span style="color: #009900;">&#40;</span>$<span style="color: #009900;">&#40;</span><span style="color: #000066; font-weight: bold;">this</span><span style="color: #009900;">&#41;</span>.<span style="color: #660066;">val</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span>.<span style="color: #660066;">toLowerCase</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span>.<span style="color: #660066;">indexOf</span><span style="color: #009900;">&#40;</span>badValue.<span style="color: #660066;">toLowerCase</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #009900;">&#41;</span> <span style="color: #339933;">&gt;=</span> <span style="color: #CC0000;">0</span><span style="color: #009900;">&#41;</span>
          $<span style="color: #009900;">&#40;</span><span style="color: #000066; font-weight: bold;">this</span><span style="color: #009900;">&#41;</span>.<span style="color: #660066;">addClass</span><span style="color: #009900;">&#40;</span><span style="color: #3366CC;">'error'</span><span style="color: #009900;">&#41;</span>.<span style="color: #660066;">css</span><span style="color: #009900;">&#40;</span><span style="color: #3366CC;">'background-color'</span><span style="color: #339933;">,</span> <span style="color: #3366CC;">'red'</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
      <span style="color: #009900;">&#125;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
    <span style="color: #009900;">&#125;</span>
  <span style="color: #009900;">&#125;</span><span style="color: #339933;">;</span>
  $.<span style="color: #660066;">fn</span>.<span style="color: #660066;">webvantaUtils</span> <span style="color: #339933;">=</span> <span style="color: #003366; font-weight: bold;">function</span><span style="color: #009900;">&#40;</span> method <span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span>
    <span style="color: #006600; font-style: italic;">// Method dispatch logic</span>
    <span style="color: #000066; font-weight: bold;">if</span> <span style="color: #009900;">&#40;</span> methods<span style="color: #009900;">&#91;</span>method<span style="color: #009900;">&#93;</span> <span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span>
      <span style="color: #000066; font-weight: bold;">return</span> methods<span style="color: #009900;">&#91;</span> method <span style="color: #009900;">&#93;</span>.<span style="color: #660066;">apply</span><span style="color: #009900;">&#40;</span> <span style="color: #000066; font-weight: bold;">this</span><span style="color: #339933;">,</span> Array.<span style="color: #660066;">prototype</span>.<span style="color: #660066;">slice</span>.<span style="color: #660066;">call</span><span style="color: #009900;">&#40;</span> arguments<span style="color: #339933;">,</span> <span style="color: #CC0000;">1</span> <span style="color: #009900;">&#41;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
    <span style="color: #009900;">&#125;</span> <span style="color: #000066; font-weight: bold;">else</span> <span style="color: #000066; font-weight: bold;">if</span> <span style="color: #009900;">&#40;</span> <span style="color: #000066; font-weight: bold;">typeof</span> method <span style="color: #339933;">===</span> <span style="color: #3366CC;">'object'</span> <span style="color: #339933;">||</span> <span style="color: #339933;">!</span> method <span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span>
      <span style="color: #000066; font-weight: bold;">return</span> methods.<span style="color: #660066;">init</span>.<span style="color: #660066;">apply</span><span style="color: #009900;">&#40;</span> <span style="color: #000066; font-weight: bold;">this</span><span style="color: #339933;">,</span> arguments <span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
    <span style="color: #009900;">&#125;</span> <span style="color: #000066; font-weight: bold;">else</span> <span style="color: #009900;">&#123;</span>
      $.<span style="color: #660066;">error</span><span style="color: #009900;">&#40;</span> <span style="color: #3366CC;">'Method '</span> <span style="color: #339933;">+</span>  method <span style="color: #339933;">+</span> <span style="color: #3366CC;">' does not exist on jQuery.webvantaUtils'</span> <span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
    <span style="color: #009900;">&#125;</span>
  <span style="color: #009900;">&#125;</span><span style="color: #339933;">;</span>
<span style="color: #009900;">&#125;</span><span style="color: #009900;">&#41;</span><span style="color: #009900;">&#40;</span> jQuery <span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span></pre></div></div>

<p>And then call it via:</p>

<div class="wp_syntax"><div class="code"><pre class="javascript" style="font-family:monospace;">$<span style="color: #009900;">&#40;</span><span style="color: #3366CC;">&quot;form input:text&quot;</span><span style="color: #009900;">&#41;</span>.<span style="color: #660066;">webvantaUtils</span><span style="color: #009900;">&#40;</span><span style="color: #3366CC;">'redAlert'</span><span style="color: #339933;">,</span><span style="color: #3366CC;">'Stink'</span><span style="color: #009900;">&#41;</span>.<span style="color: #660066;">addClass</span><span style="color: #009900;">&#40;</span><span style="color: #3366CC;">'scanned'</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span></pre></div></div>

<p>This approach is a little more complicated, but ensures that the namespace is &#8220;clean&#8221;. It uses a few JavaScript tricks to accomplish its goal. First, the actual functions of our plugin are stored as attributes of the literal object called &#8220;methods&#8221;. Second, the entry point to our plugin is the &#8220;namespace&#8221;, here &#8220;webvantaUtils&#8221;.</p>
<p>When we invoke the plugin through this entry point, it first checks to see what kind of parameters were passed in. That may sound odd, since it looks like the entry point only takes one named parameter &#8220;method&#8221;. Regardless of the number of named arguments, JavaScript doesn&#8217;t complain if &#8220;extra&#8221; parameters are passed in.</p>
<p>The expectation is that the first parameter will either be nothing at all, an object of some kind, or a string naming the desired function.</p>
<p>First the entry point tries to use the value of &#8220;method&#8221; to find a matching attribute of the &#8220;methods&#8221; object. If that fails, it next checks to see if &#8220;method&#8221; is itself an object OR it is a null or undefined value. In that case, with our sample above, an optional &#8220;init&#8221; method is invoked. This is purely convention, and could be stripped out if you don&#8217;t need to initialize anything. &#8220;init&#8221; is a handy place if you have default values you need to set up or override.</p>
<p>If none of the previous conditions are true, then an error message gets displayed in the console.</p>
<p>Now, in the case of both the init function or a matched function name being found in the methods object, the code uses the JavaScript apply() method. apply() is a method on the Function object. apply()&#8217;s job is to execute the receiver&#8217;s function, and it uses its first parameter to set what the value of &#8220;this&#8221; will be inside of that function. The second parameter is an array which is passed to the called function as its parameter list.</p>
<p>Here we see the special Argument object being used in the variable called &#8220;arguments&#8221;. JavaScript always sets &#8220;arguments&#8221; to contain the complete parameter list of a called function. In this case, it is used to pass on any parameters sent to the entry point (other than the first one in the case of a name string being passed in to invoke a plugin function).</p>
<p>This may be slightly confusing, yet digging in to the JavaScript is educational. The good news is that you can focus on using this &#8220;plugin pattern&#8221; as a template for your own code and mostly ignore the rest of the details when getting started.</p>
<p>The <a href="http://docs.jquery.com/Plugins/Authoring">jQuery Plugin Authoring guidelines</a> contain even more examples.</p>
<h2>UI Widget Factories</h2>
<p>While we won&#8217;t get in to the details here, we should point out that if you are trying to build user interface code, or need to construct more complicated, <a href="http://blog.nemikor.com/2010/05/15/building-stateful-jquery-plugins/">statefull plugins</a>, a worthwhile plugin architecture to review is the <a href="http://jqueryui.com/docs/Developer_Guide">jQuery UI Widget</a> factory mechanism. Widgets provide additional conventions for organizing code including dealing with defaults and options on a per widget basis, code hiding of &#8220;private&#8221; functions used by the widget, and ways of exposing widget data accessors, events, and other functionality.</p>
<h2>A Wrap of Plugins</h2>
<p>We&#8217;ve briefly explored the basics that will permit you to clean up and possibly refactor your existing JavaScript code into reusable jQuery plugins. With the information presented in this article, and the Plugin Authoring notes on the jQuery.org site, you should have all you need to get started. Next time, we will take a peek at a relatively new client-side storage technology that has come out of the HTML5 efforts and build a small jQuery plugin that wraps it with a generic API.</p>
<div class="note"><strong>About Webvanta</strong></p>
<p>Webvanta provides a <a href="http://www.webvanta.com">hosted CMS</a> and site-building services for designers and front-end developers. Their platform is built on Ruby on Rails and is hosted by Engine Yard. Webvanta offers a free ebook, <a href="http://www.webvanta.com/5tips-ebook?s=eyb">5 Tips for Building Better Sites</a>, that summarizes the key lessons learned from being involved with more than 200 sites in the past two years.</p>
<p>Webvanta is co-sponsoring the first annual <a href="http://www.northbaywebconference.com?s=eyb">North Bay Web Design Conference</a> on April 12, 2011 in Rohnert Park, CA. To learn more about the event, <a href="http://www.northbaywebconference.com/join-list?s=eyb">join the mailing list</a> to find out first when the agenda is announced and registration is opened in March.</p>
</div>
<p><img src="http://www.engineyard.com/blog/?ak_action=api_record_view&#038;id=7082&#038;type=feed" alt="" /></p>
<img src="http://feeds.feedburner.com/~r/engineyard/~4/AJksXTk8kGE" height="1" width="1"/>";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:36:"http://wellformedweb.org/CommentAPI/";a:1:{s:10:"commentRss";a:1:{i:0;a:5:{s:4:"data";s:81:"http://www.engineyard.com/blog/2011/reuse-your-javascript-as-jquery-plugins/feed/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:38:"http://purl.org/rss/1.0/modules/slash/";a:1:{s:8:"comments";a:1:{i:0;a:5:{s:4:"data";s:2:"13";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:42:"http://rssnamespace.org/feedburner/ext/1.0";a:1:{s:8:"origLink";a:1:{i:0;a:5:{s:4:"data";s:76:"http://www.engineyard.com/blog/2011/reuse-your-javascript-as-jquery-plugins/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:6;a:6:{s:4:"data";s:44:"
		
		
		
		
		
				
		

		
		
			
			
		
		";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:6:{s:0:"";a:7:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:29:"A Guide to Optimistic Locking";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:57:"http://feedproxy.google.com/~r/engineyard/~3/KTpZ1LZhCAA/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:8:"comments";a:1:{i:0;a:5:{s:4:"data";s:75:"http://www.engineyard.com/blog/2011/a-guide-to-optimistic-locking/#comments";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Thu, 10 Feb 2011 22:53:55 +0000";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:8:"category";a:2:{i:0;a:5:{s:4:"data";s:13:"Uncategorized";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:1;a:5:{s:4:"data";s:18:"optimistic locking";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:38:"http://www.engineyard.com/blog/?p=6918";s:7:"attribs";a:1:{s:0:"";a:1:{s:11:"isPermaLink";s:5:"false";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:20047:"<div class="note">This guest post is from community contributor and Engine Yard partner <a href="http://twitter.com/brianjlandau">Brian Landau</a>, of <a href="http://www.viget.com/">Viget Labs</a>. Brian is a Developer at Viget Labs, where he works on web applications small and large. He works mostly in Ruby and JavaScript but enjoys dabbling in other languages too (Io is his current favorite).</div>
<p>Although <a href="http://en.wikipedia.org/wiki/Optimistic_concurrency_control">optimistic locking</a> is a feature that has been in Rails for a long time, I find that I and those around me rarely take advantage of it. While you can easily get started with optimistic locking just by looking at the <a href="http://api.rubyonrails.org/classes/ActiveRecord/Locking/Optimistic.html">Rails API Docs</a>, you’ll quickly find that you need to do more then add a <code>lock_version</code> column to take full advantage of this feature.</p>
<h2>Getting Started</h2>
<p>The use case for optimistic locking is preventing users from overwriting changes made by other users. Let’s say Billy comes to your awesome travel web app to make a change to a location, but just before he submits, Jenny comes and submits a change. Optimistic locking will prevent Billy’s changes from going through.  Getting started with optimistic locking is really as simple as adding a <code>lock_version</code> column to every table on which you want locking enabled.</p>

<div class="wp_syntax"><div class="code"><pre class="ruby" style="font-family:monospace;"><span style="color:#9966CC; font-weight:bold;">class</span> AddLockingColumns <span style="color:#006600; font-weight:bold;">&lt;</span> <span style="color:#6666ff; font-weight:bold;">ActiveRecord::Migration</span>
   <span style="color:#9966CC; font-weight:bold;">def</span> <span style="color:#0000FF; font-weight:bold;">self</span>.<span style="color:#9900CC;">up</span>
      add_column <span style="color:#ff3333; font-weight:bold;">:destinations</span>, <span style="color:#ff3333; font-weight:bold;">:lock_version</span>, <span style="color:#ff3333; font-weight:bold;">:integer</span>
   <span style="color:#9966CC; font-weight:bold;">end</span>
&nbsp;
   <span style="color:#9966CC; font-weight:bold;">def</span> <span style="color:#0000FF; font-weight:bold;">self</span>.<span style="color:#9900CC;">down</span>
      remove_column <span style="color:#ff3333; font-weight:bold;">:destinations</span>, <span style="color:#ff3333; font-weight:bold;">:lock_version</span>
   <span style="color:#9966CC; font-weight:bold;">end</span>
<span style="color:#9966CC; font-weight:bold;">end</span></pre></div></div>

<p>After adding this column, every update to a model will result in this lock version being incremented. If for some reason you can’t use the column name <code>lock_version</code>, no problem: use some other name and just set that in the class like so:</p>

<div class="wp_syntax"><div class="code"><pre class="ruby" style="font-family:monospace;"><span style="color:#9966CC; font-weight:bold;">class</span> Destination
   <span style="color:#0000FF; font-weight:bold;">self</span>.<span style="color:#9900CC;">locking_column</span> = <span style="color:#996600;">&quot;my_custom_locking&quot;</span>
<span style="color:#9966CC; font-weight:bold;">end</span></pre></div></div>

<p>Once you’ve done this, if two people try to submit an update to a model at the same time, one of them will cause an <code>ActiveRecord::StaleObjectError</code> error to be raised.<span id="more-6918"></span></p>
<h2>Fixing the edit <strong><code>form_for</code></strong></h2>
<p>While this behavior is helpful, it doesn’t solve a more worrisome problem. Let’s say Billy comes to change that same vacation destination. He opens up the edit form, bangs away at the content and walks away to get some coffee. He gets distracted and doesn’t come back to work on it for a few hours. While he’s away, Jenny makes a quick change to the destination. He comes back and finishes the content changes and submits the edit form. What happens?  Well, with optimistic locking out of the box, his changes succeed and go through to the database. This is problematic for me, and is not what I would expect. This happens because the <code>lock_version</code> is set from the database when you instantiate the model object inside the update action. What we need is the model to be locked for Billy to the version he has when he accesses the edit form. The best way to accomplish this is by adding a hidden input for the <code>lock_version</code> field. Then, when someone submits the form, if the lock version has been incremented since they accessed it, the update fails with an <code>ActiveRecord::StaleObjectError</code> error. You can do this by hand, by adding this hidden field to every form you need locking on, like so:</p>

<div class="wp_syntax"><div class="code"><pre class="ruby" style="font-family:monospace;"><span style="color:#006600; font-weight:bold;">&lt;%</span>= form_for <span style="color:#0066ff; font-weight:bold;">@destination</span> <span style="color:#9966CC; font-weight:bold;">do</span> <span style="color:#006600; font-weight:bold;">|</span>form<span style="color:#006600; font-weight:bold;">|</span> <span style="color:#006600; font-weight:bold;">%&gt;</span>
   <span style="color:#006600; font-weight:bold;">&lt;%</span>= form.<span style="color:#9900CC;">hidden_field</span> <span style="color:#ff3333; font-weight:bold;">:lock_version</span> <span style="color:#006600; font-weight:bold;">%&gt;</span>
   <span style="color:#006600; font-weight:bold;">&lt;%</span><span style="color:#008000; font-style:italic;"># ... other inputs %&gt;</span>
<span style="color:#006600; font-weight:bold;">&lt;%</span> <span style="color:#9966CC; font-weight:bold;">end</span> <span style="color:#006600; font-weight:bold;">%&gt;</span></pre></div></div>

<p>Alternatively, you can make your life easier and just add this code to your application:</p>

<div class="wp_syntax"><div class="code"><pre class="ruby" style="font-family:monospace;"><span style="color:#9966CC; font-weight:bold;">module</span> ActionView
   <span style="color:#9966CC; font-weight:bold;">module</span> Helpers
      <span style="color:#9966CC; font-weight:bold;">module</span> OptimisticLockingFormFor
&nbsp;
         <span style="color:#9966CC; font-weight:bold;">def</span> <span style="color:#0000FF; font-weight:bold;">self</span>.<span style="color:#9900CC;">included</span><span style="color:#006600; font-weight:bold;">&#40;</span>base<span style="color:#006600; font-weight:bold;">&#41;</span>
            base.<span style="color:#9900CC;">alias_method_chain</span> <span style="color:#ff3333; font-weight:bold;">:form_for</span>, <span style="color:#ff3333; font-weight:bold;">:optimistic_locking</span>
         <span style="color:#9966CC; font-weight:bold;">end</span>
&nbsp;
         <span style="color:#9966CC; font-weight:bold;">def</span> form_for_with_optimistic_locking<span style="color:#006600; font-weight:bold;">&#40;</span>record_or_name_or_array, <span style="color:#006600; font-weight:bold;">*</span>args, <span style="color:#006600; font-weight:bold;">&amp;</span>block<span style="color:#006600; font-weight:bold;">&#41;</span>
            form_for_without_optimistic_locking<span style="color:#006600; font-weight:bold;">&#40;</span>record_or_name_or_array, <span style="color:#006600; font-weight:bold;">*</span>args<span style="color:#006600; font-weight:bold;">&#41;</span> <span style="color:#9966CC; font-weight:bold;">do</span> <span style="color:#006600; font-weight:bold;">|</span>form_with_locking<span style="color:#006600; font-weight:bold;">|</span>
               lock_form = form_with_locking.<span style="color:#9900CC;">object</span> <span style="color:#006600; font-weight:bold;">&amp;&amp;</span>
                  form_with_locking.<span style="color:#9900CC;">object</span>.<span style="color:#9900CC;">respond_to</span>?<span style="color:#006600; font-weight:bold;">&#40;</span><span style="color:#ff3333; font-weight:bold;">:locking_enabled</span>?<span style="color:#006600; font-weight:bold;">&#41;</span> <span style="color:#006600; font-weight:bold;">&amp;&amp;</span>
                  form_with_locking.<span style="color:#9900CC;">object</span>.<span style="color:#9900CC;">locking_enabled</span>? <span style="color:#006600; font-weight:bold;">&amp;&amp;</span>
                  !form_with_locking.<span style="color:#9900CC;">object</span>.<span style="color:#9900CC;">new_record</span>?
               <span style="color:#9966CC; font-weight:bold;">if</span> lock_form
                  concat<span style="color:#006600; font-weight:bold;">&#40;</span>content_tag<span style="color:#006600; font-weight:bold;">&#40;</span><span style="color:#ff3333; font-weight:bold;">:div</span>,
                     form_with_locking.<span style="color:#9900CC;">hidden_field</span><span style="color:#006600; font-weight:bold;">&#40;</span>form_with_locking.<span style="color:#9900CC;">object</span>.<span style="color:#9966CC; font-weight:bold;">class</span>.<span style="color:#9900CC;">locking_column</span><span style="color:#006600; font-weight:bold;">&#41;</span>,
                     <span style="color:#ff3333; font-weight:bold;">:style</span> <span style="color:#006600; font-weight:bold;">=&gt;</span> <span style="color:#996600;">'margin:0;padding:0;display:inline'</span><span style="color:#006600; font-weight:bold;">&#41;</span>.<span style="color:#9900CC;">html_safe</span><span style="color:#006600; font-weight:bold;">&#41;</span>
               <span style="color:#9966CC; font-weight:bold;">end</span>
               <span style="color:#9966CC; font-weight:bold;">yield</span> form_with_locking
            <span style="color:#9966CC; font-weight:bold;">end</span>
         <span style="color:#9966CC; font-weight:bold;">end</span>
&nbsp;
      <span style="color:#9966CC; font-weight:bold;">end</span>
   <span style="color:#9966CC; font-weight:bold;">end</span>
<span style="color:#9966CC; font-weight:bold;">end</span>
&nbsp;
<span style="color:#6666ff; font-weight:bold;">ActionView::Base</span>.<span style="color:#9900CC;">send</span> <span style="color:#ff3333; font-weight:bold;">:include</span>, <span style="color:#6666ff; font-weight:bold;">ActionView::Helpers::OptimisticLockingFormFor</span></pre></div></div>

<p>This code modifies the <code>form_for</code> helper to automatically add a <code>lock_version</code> hidden input for every object that has locking enabled and isn’t new (new records aren’t versioned yet, and submitting a lock version causes problems). With this in place you don’t need to remember to add the lock version to every form you need it on. Great! Now Billy can get coffee for as long as he wants and not have to worry about overwriting Jenny’s changes.  I have seen some other suggestions out there to tie the form to the lock version when the user accesses the edit form, like putting the model object in session, or the lock version in session. All of these solutions have their flaws, though. Storing a model in session is a bad idea for a number of reason that have been explained well <a href="http://railscasts.com/episodes/13-dangers-of-model-in-session">elsewhere</a>. Overall, I believe storing the lock version on the form is the best way to handle this type of locking, as it ensures that the lock version is tied to the form the user has in front of them.</p>
<h2>Out with the Stale in with the New</h2>
<p>A remaining problem is that, if Billy has made this change after Jenny already made a change, an <code>ActiveRecord::StaleObjectError</code> error is raised which by default results in a blank page. The simplest solution to this is to add a static HTML error page at <code>public/409.html</code>. What I prefer to do is catch the error and render the edit page with a flash error message telling the user what happened. We also want to ensure the record: 1) is the latest version, 2) isn’t using the lock version from the original edit, and 3) is using the attribute values the user entered on the form. The reason for all of this is to ensure the form has the correct lock version and has the values the user supplied to make it easy for them to resubmit the form. You can do that right in the controller action like this:</p>

<div class="wp_syntax"><div class="code"><pre class="ruby" style="font-family:monospace;"><span style="color:#9966CC; font-weight:bold;">class</span> DestinationsController <span style="color:#006600; font-weight:bold;">&lt;</span> ApplicationController
   <span style="color:#9966CC; font-weight:bold;">def</span> update
      <span style="color:#008000; font-style:italic;"># ... update code</span>
   <span style="color:#9966CC; font-weight:bold;">rescue</span> <span style="color:#6666ff; font-weight:bold;">ActiveRecord::StaleObjectError</span>
      <span style="color:#0066ff; font-weight:bold;">@destination</span>.<span style="color:#9900CC;">reload</span>.<span style="color:#9900CC;">attributes</span> = params<span style="color:#006600; font-weight:bold;">&#91;</span><span style="color:#ff3333; font-weight:bold;">:destination</span><span style="color:#006600; font-weight:bold;">&#93;</span>.<span style="color:#9900CC;">reject</span> <span style="color:#9966CC; font-weight:bold;">do</span> <span style="color:#006600; font-weight:bold;">|</span>attrb, value<span style="color:#006600; font-weight:bold;">|</span>
         attrb.<span style="color:#9900CC;">to_sym</span> == <span style="color:#ff3333; font-weight:bold;">:lock_version</span>
      <span style="color:#9966CC; font-weight:bold;">end</span>
      flash.<span style="color:#9900CC;">now</span><span style="color:#006600; font-weight:bold;">&#91;</span><span style="color:#ff3333; font-weight:bold;">:error</span><span style="color:#006600; font-weight:bold;">&#93;</span> = <span style="color:#996600;">&quot;Another user has made a change to that record &quot;</span><span style="color:#006600; font-weight:bold;">+</span>
         <span style="color:#996600;">&quot;since you accessed the edit form.&quot;</span>
      render <span style="color:#ff3333; font-weight:bold;">:edit</span>, <span style="color:#ff3333; font-weight:bold;">:status</span> <span style="color:#006600; font-weight:bold;">=&gt;</span> <span style="color:#ff3333; font-weight:bold;">:conflict</span>
   <span style="color:#9966CC; font-weight:bold;">end</span>
<span style="color:#9966CC; font-weight:bold;">end</span></pre></div></div>

<p>As your application grows, you’ll want to DRY up multiple <code>rescue ActiveRecord::StaleObjectError</code> blocks with something like this:</p>

<div class="wp_syntax"><div class="code"><pre class="ruby" style="font-family:monospace;"><span style="color:#9966CC; font-weight:bold;">class</span> ApplicationController <span style="color:#006600; font-weight:bold;">&lt;</span> <span style="color:#6666ff; font-weight:bold;">ActionController::Base</span>
   rescue_from <span style="color:#6666ff; font-weight:bold;">ActiveRecord::StaleObjectError</span> <span style="color:#9966CC; font-weight:bold;">do</span> <span style="color:#006600; font-weight:bold;">|</span>exception<span style="color:#006600; font-weight:bold;">|</span>
      respond_to <span style="color:#9966CC; font-weight:bold;">do</span> <span style="color:#006600; font-weight:bold;">|</span>format<span style="color:#006600; font-weight:bold;">|</span>
         <span style="color:#CC0066; font-weight:bold;">format</span>.<span style="color:#9900CC;">html</span> <span style="color:#006600; font-weight:bold;">&#123;</span>
            correct_stale_record_version
            stale_record_recovery_action
        <span style="color:#006600; font-weight:bold;">&#125;</span>
        <span style="color:#CC0066; font-weight:bold;">format</span>.<span style="color:#9900CC;">xml</span>  <span style="color:#006600; font-weight:bold;">&#123;</span> head <span style="color:#ff3333; font-weight:bold;">:conflict</span> <span style="color:#006600; font-weight:bold;">&#125;</span>
        <span style="color:#CC0066; font-weight:bold;">format</span>.<span style="color:#9900CC;">json</span> <span style="color:#006600; font-weight:bold;">&#123;</span> head <span style="color:#ff3333; font-weight:bold;">:conflict</span> <span style="color:#006600; font-weight:bold;">&#125;</span>
     <span style="color:#9966CC; font-weight:bold;">end</span>
  <span style="color:#9966CC; font-weight:bold;">end</span>      
&nbsp;
   protected   
&nbsp;
   <span style="color:#9966CC; font-weight:bold;">def</span> stale_record_recovery_action
      flash.<span style="color:#9900CC;">now</span><span style="color:#006600; font-weight:bold;">&#91;</span><span style="color:#ff3333; font-weight:bold;">:error</span><span style="color:#006600; font-weight:bold;">&#93;</span> = <span style="color:#996600;">&quot;Another user has made a change to that record &quot;</span><span style="color:#006600; font-weight:bold;">+</span>
         <span style="color:#996600;">&quot;since you accessed the edit form.&quot;</span>
      render <span style="color:#ff3333; font-weight:bold;">:edit</span>, <span style="color:#ff3333; font-weight:bold;">:status</span> <span style="color:#006600; font-weight:bold;">=&gt;</span> <span style="color:#ff3333; font-weight:bold;">:conflict</span>
   <span style="color:#9966CC; font-weight:bold;">end</span>
<span style="color:#9966CC; font-weight:bold;">end</span></pre></div></div>


<div class="wp_syntax"><div class="code"><pre class="ruby" style="font-family:monospace;"><span style="color:#9966CC; font-weight:bold;">class</span> DestinationsController <span style="color:#006600; font-weight:bold;">&lt;</span> ApplicationController
   protected
&nbsp;
   <span style="color:#9966CC; font-weight:bold;">def</span> correct_stale_record_version
      <span style="color:#0066ff; font-weight:bold;">@destination</span>.<span style="color:#9900CC;">reload</span>.<span style="color:#9900CC;">attributes</span> = params<span style="color:#006600; font-weight:bold;">&#91;</span><span style="color:#ff3333; font-weight:bold;">:destination</span><span style="color:#006600; font-weight:bold;">&#93;</span>.<span style="color:#9900CC;">reject</span> <span style="color:#9966CC; font-weight:bold;">do</span> <span style="color:#006600; font-weight:bold;">|</span>attrb, value<span style="color:#006600; font-weight:bold;">|</span>
         attrb.<span style="color:#9900CC;">to_sym</span> == <span style="color:#ff3333; font-weight:bold;">:lock_version</span>
      <span style="color:#9966CC; font-weight:bold;">end</span>
   <span style="color:#9966CC; font-weight:bold;">end</span>
<span style="color:#9966CC; font-weight:bold;">end</span></pre></div></div>

<p>You’ll also notice in the <code>rescue_from</code> block both XML and JSON API requests are handled by just returning a 409 “Conflict” status code with no body.</p>
<h2>Final Thoughts</h2>
<p>Optimistic locking isn’t right for every situation; some applications won’t need any type of locking, and others may need more strict forms of locking. You may also find that you need to recover from conflicts differently. For instance, you might want to show the current version in the database next to the version the user is trying to submit. However, if you feel it covers most of your applications&#8217; use cases, optimistic locking is so easy to implement there’s no reason you shouldn’t try it.</p>
<div class="note"><strong>About Viget Labs</strong><br />
In 1999, <a href="http://www.viget.com/">Viget Labs</a> started building web products for startups. Since 2005, they’ve been building them in Ruby on Rails. Now, Viget Labs&#8217; team of nearly 50 works with both startups and big brands from their offices near Washington, DC, in Durham, NC, and Boulder, CO.</div>
<p><img src="http://www.engineyard.com/blog/?ak_action=api_record_view&#038;id=6918&#038;type=feed" alt="" /></p>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:7:"creator";a:1:{i:0;a:5:{s:4:"data";s:12:"Brian Landau";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:40:"http://purl.org/rss/1.0/modules/content/";a:1:{s:7:"encoded";a:1:{i:0;a:5:{s:4:"data";s:20137:"<div class="note">This guest post is from community contributor and Engine Yard partner <a href="http://twitter.com/brianjlandau">Brian Landau</a>, of <a href="http://www.viget.com/">Viget Labs</a>. Brian is a Developer at Viget Labs, where he works on web applications small and large. He works mostly in Ruby and JavaScript but enjoys dabbling in other languages too (Io is his current favorite).</div>
<p>Although <a href="http://en.wikipedia.org/wiki/Optimistic_concurrency_control">optimistic locking</a> is a feature that has been in Rails for a long time, I find that I and those around me rarely take advantage of it. While you can easily get started with optimistic locking just by looking at the <a href="http://api.rubyonrails.org/classes/ActiveRecord/Locking/Optimistic.html">Rails API Docs</a>, you’ll quickly find that you need to do more then add a <code>lock_version</code> column to take full advantage of this feature.</p>
<h2>Getting Started</h2>
<p>The use case for optimistic locking is preventing users from overwriting changes made by other users. Let’s say Billy comes to your awesome travel web app to make a change to a location, but just before he submits, Jenny comes and submits a change. Optimistic locking will prevent Billy’s changes from going through.  Getting started with optimistic locking is really as simple as adding a <code>lock_version</code> column to every table on which you want locking enabled.</p>

<div class="wp_syntax"><div class="code"><pre class="ruby" style="font-family:monospace;"><span style="color:#9966CC; font-weight:bold;">class</span> AddLockingColumns <span style="color:#006600; font-weight:bold;">&lt;</span> <span style="color:#6666ff; font-weight:bold;">ActiveRecord::Migration</span>
   <span style="color:#9966CC; font-weight:bold;">def</span> <span style="color:#0000FF; font-weight:bold;">self</span>.<span style="color:#9900CC;">up</span>
      add_column <span style="color:#ff3333; font-weight:bold;">:destinations</span>, <span style="color:#ff3333; font-weight:bold;">:lock_version</span>, <span style="color:#ff3333; font-weight:bold;">:integer</span>
   <span style="color:#9966CC; font-weight:bold;">end</span>
&nbsp;
   <span style="color:#9966CC; font-weight:bold;">def</span> <span style="color:#0000FF; font-weight:bold;">self</span>.<span style="color:#9900CC;">down</span>
      remove_column <span style="color:#ff3333; font-weight:bold;">:destinations</span>, <span style="color:#ff3333; font-weight:bold;">:lock_version</span>
   <span style="color:#9966CC; font-weight:bold;">end</span>
<span style="color:#9966CC; font-weight:bold;">end</span></pre></div></div>

<p>After adding this column, every update to a model will result in this lock version being incremented. If for some reason you can’t use the column name <code>lock_version</code>, no problem: use some other name and just set that in the class like so:</p>

<div class="wp_syntax"><div class="code"><pre class="ruby" style="font-family:monospace;"><span style="color:#9966CC; font-weight:bold;">class</span> Destination
   <span style="color:#0000FF; font-weight:bold;">self</span>.<span style="color:#9900CC;">locking_column</span> = <span style="color:#996600;">&quot;my_custom_locking&quot;</span>
<span style="color:#9966CC; font-weight:bold;">end</span></pre></div></div>

<p>Once you’ve done this, if two people try to submit an update to a model at the same time, one of them will cause an <code>ActiveRecord::StaleObjectError</code> error to be raised.<span id="more-6918"></span></p>
<h2>Fixing the edit <strong><code>form_for</code></strong></h2>
<p>While this behavior is helpful, it doesn’t solve a more worrisome problem. Let’s say Billy comes to change that same vacation destination. He opens up the edit form, bangs away at the content and walks away to get some coffee. He gets distracted and doesn’t come back to work on it for a few hours. While he’s away, Jenny makes a quick change to the destination. He comes back and finishes the content changes and submits the edit form. What happens?  Well, with optimistic locking out of the box, his changes succeed and go through to the database. This is problematic for me, and is not what I would expect. This happens because the <code>lock_version</code> is set from the database when you instantiate the model object inside the update action. What we need is the model to be locked for Billy to the version he has when he accesses the edit form. The best way to accomplish this is by adding a hidden input for the <code>lock_version</code> field. Then, when someone submits the form, if the lock version has been incremented since they accessed it, the update fails with an <code>ActiveRecord::StaleObjectError</code> error. You can do this by hand, by adding this hidden field to every form you need locking on, like so:</p>

<div class="wp_syntax"><div class="code"><pre class="ruby" style="font-family:monospace;"><span style="color:#006600; font-weight:bold;">&lt;%</span>= form_for <span style="color:#0066ff; font-weight:bold;">@destination</span> <span style="color:#9966CC; font-weight:bold;">do</span> <span style="color:#006600; font-weight:bold;">|</span>form<span style="color:#006600; font-weight:bold;">|</span> <span style="color:#006600; font-weight:bold;">%&gt;</span>
   <span style="color:#006600; font-weight:bold;">&lt;%</span>= form.<span style="color:#9900CC;">hidden_field</span> <span style="color:#ff3333; font-weight:bold;">:lock_version</span> <span style="color:#006600; font-weight:bold;">%&gt;</span>
   <span style="color:#006600; font-weight:bold;">&lt;%</span><span style="color:#008000; font-style:italic;"># ... other inputs %&gt;</span>
<span style="color:#006600; font-weight:bold;">&lt;%</span> <span style="color:#9966CC; font-weight:bold;">end</span> <span style="color:#006600; font-weight:bold;">%&gt;</span></pre></div></div>

<p>Alternatively, you can make your life easier and just add this code to your application:</p>

<div class="wp_syntax"><div class="code"><pre class="ruby" style="font-family:monospace;"><span style="color:#9966CC; font-weight:bold;">module</span> ActionView
   <span style="color:#9966CC; font-weight:bold;">module</span> Helpers
      <span style="color:#9966CC; font-weight:bold;">module</span> OptimisticLockingFormFor
&nbsp;
         <span style="color:#9966CC; font-weight:bold;">def</span> <span style="color:#0000FF; font-weight:bold;">self</span>.<span style="color:#9900CC;">included</span><span style="color:#006600; font-weight:bold;">&#40;</span>base<span style="color:#006600; font-weight:bold;">&#41;</span>
            base.<span style="color:#9900CC;">alias_method_chain</span> <span style="color:#ff3333; font-weight:bold;">:form_for</span>, <span style="color:#ff3333; font-weight:bold;">:optimistic_locking</span>
         <span style="color:#9966CC; font-weight:bold;">end</span>
&nbsp;
         <span style="color:#9966CC; font-weight:bold;">def</span> form_for_with_optimistic_locking<span style="color:#006600; font-weight:bold;">&#40;</span>record_or_name_or_array, <span style="color:#006600; font-weight:bold;">*</span>args, <span style="color:#006600; font-weight:bold;">&amp;</span>block<span style="color:#006600; font-weight:bold;">&#41;</span>
            form_for_without_optimistic_locking<span style="color:#006600; font-weight:bold;">&#40;</span>record_or_name_or_array, <span style="color:#006600; font-weight:bold;">*</span>args<span style="color:#006600; font-weight:bold;">&#41;</span> <span style="color:#9966CC; font-weight:bold;">do</span> <span style="color:#006600; font-weight:bold;">|</span>form_with_locking<span style="color:#006600; font-weight:bold;">|</span>
               lock_form = form_with_locking.<span style="color:#9900CC;">object</span> <span style="color:#006600; font-weight:bold;">&amp;&amp;</span>
                  form_with_locking.<span style="color:#9900CC;">object</span>.<span style="color:#9900CC;">respond_to</span>?<span style="color:#006600; font-weight:bold;">&#40;</span><span style="color:#ff3333; font-weight:bold;">:locking_enabled</span>?<span style="color:#006600; font-weight:bold;">&#41;</span> <span style="color:#006600; font-weight:bold;">&amp;&amp;</span>
                  form_with_locking.<span style="color:#9900CC;">object</span>.<span style="color:#9900CC;">locking_enabled</span>? <span style="color:#006600; font-weight:bold;">&amp;&amp;</span>
                  !form_with_locking.<span style="color:#9900CC;">object</span>.<span style="color:#9900CC;">new_record</span>?
               <span style="color:#9966CC; font-weight:bold;">if</span> lock_form
                  concat<span style="color:#006600; font-weight:bold;">&#40;</span>content_tag<span style="color:#006600; font-weight:bold;">&#40;</span><span style="color:#ff3333; font-weight:bold;">:div</span>,
                     form_with_locking.<span style="color:#9900CC;">hidden_field</span><span style="color:#006600; font-weight:bold;">&#40;</span>form_with_locking.<span style="color:#9900CC;">object</span>.<span style="color:#9966CC; font-weight:bold;">class</span>.<span style="color:#9900CC;">locking_column</span><span style="color:#006600; font-weight:bold;">&#41;</span>,
                     <span style="color:#ff3333; font-weight:bold;">:style</span> <span style="color:#006600; font-weight:bold;">=&gt;</span> <span style="color:#996600;">'margin:0;padding:0;display:inline'</span><span style="color:#006600; font-weight:bold;">&#41;</span>.<span style="color:#9900CC;">html_safe</span><span style="color:#006600; font-weight:bold;">&#41;</span>
               <span style="color:#9966CC; font-weight:bold;">end</span>
               <span style="color:#9966CC; font-weight:bold;">yield</span> form_with_locking
            <span style="color:#9966CC; font-weight:bold;">end</span>
         <span style="color:#9966CC; font-weight:bold;">end</span>
&nbsp;
      <span style="color:#9966CC; font-weight:bold;">end</span>
   <span style="color:#9966CC; font-weight:bold;">end</span>
<span style="color:#9966CC; font-weight:bold;">end</span>
&nbsp;
<span style="color:#6666ff; font-weight:bold;">ActionView::Base</span>.<span style="color:#9900CC;">send</span> <span style="color:#ff3333; font-weight:bold;">:include</span>, <span style="color:#6666ff; font-weight:bold;">ActionView::Helpers::OptimisticLockingFormFor</span></pre></div></div>

<p>This code modifies the <code>form_for</code> helper to automatically add a <code>lock_version</code> hidden input for every object that has locking enabled and isn’t new (new records aren’t versioned yet, and submitting a lock version causes problems). With this in place you don’t need to remember to add the lock version to every form you need it on. Great! Now Billy can get coffee for as long as he wants and not have to worry about overwriting Jenny’s changes.  I have seen some other suggestions out there to tie the form to the lock version when the user accesses the edit form, like putting the model object in session, or the lock version in session. All of these solutions have their flaws, though. Storing a model in session is a bad idea for a number of reason that have been explained well <a href="http://railscasts.com/episodes/13-dangers-of-model-in-session">elsewhere</a>. Overall, I believe storing the lock version on the form is the best way to handle this type of locking, as it ensures that the lock version is tied to the form the user has in front of them.</p>
<h2>Out with the Stale in with the New</h2>
<p>A remaining problem is that, if Billy has made this change after Jenny already made a change, an <code>ActiveRecord::StaleObjectError</code> error is raised which by default results in a blank page. The simplest solution to this is to add a static HTML error page at <code>public/409.html</code>. What I prefer to do is catch the error and render the edit page with a flash error message telling the user what happened. We also want to ensure the record: 1) is the latest version, 2) isn’t using the lock version from the original edit, and 3) is using the attribute values the user entered on the form. The reason for all of this is to ensure the form has the correct lock version and has the values the user supplied to make it easy for them to resubmit the form. You can do that right in the controller action like this:</p>

<div class="wp_syntax"><div class="code"><pre class="ruby" style="font-family:monospace;"><span style="color:#9966CC; font-weight:bold;">class</span> DestinationsController <span style="color:#006600; font-weight:bold;">&lt;</span> ApplicationController
   <span style="color:#9966CC; font-weight:bold;">def</span> update
      <span style="color:#008000; font-style:italic;"># ... update code</span>
   <span style="color:#9966CC; font-weight:bold;">rescue</span> <span style="color:#6666ff; font-weight:bold;">ActiveRecord::StaleObjectError</span>
      <span style="color:#0066ff; font-weight:bold;">@destination</span>.<span style="color:#9900CC;">reload</span>.<span style="color:#9900CC;">attributes</span> = params<span style="color:#006600; font-weight:bold;">&#91;</span><span style="color:#ff3333; font-weight:bold;">:destination</span><span style="color:#006600; font-weight:bold;">&#93;</span>.<span style="color:#9900CC;">reject</span> <span style="color:#9966CC; font-weight:bold;">do</span> <span style="color:#006600; font-weight:bold;">|</span>attrb, value<span style="color:#006600; font-weight:bold;">|</span>
         attrb.<span style="color:#9900CC;">to_sym</span> == <span style="color:#ff3333; font-weight:bold;">:lock_version</span>
      <span style="color:#9966CC; font-weight:bold;">end</span>
      flash.<span style="color:#9900CC;">now</span><span style="color:#006600; font-weight:bold;">&#91;</span><span style="color:#ff3333; font-weight:bold;">:error</span><span style="color:#006600; font-weight:bold;">&#93;</span> = <span style="color:#996600;">&quot;Another user has made a change to that record &quot;</span><span style="color:#006600; font-weight:bold;">+</span>
         <span style="color:#996600;">&quot;since you accessed the edit form.&quot;</span>
      render <span style="color:#ff3333; font-weight:bold;">:edit</span>, <span style="color:#ff3333; font-weight:bold;">:status</span> <span style="color:#006600; font-weight:bold;">=&gt;</span> <span style="color:#ff3333; font-weight:bold;">:conflict</span>
   <span style="color:#9966CC; font-weight:bold;">end</span>
<span style="color:#9966CC; font-weight:bold;">end</span></pre></div></div>

<p>As your application grows, you’ll want to DRY up multiple <code>rescue ActiveRecord::StaleObjectError</code> blocks with something like this:</p>

<div class="wp_syntax"><div class="code"><pre class="ruby" style="font-family:monospace;"><span style="color:#9966CC; font-weight:bold;">class</span> ApplicationController <span style="color:#006600; font-weight:bold;">&lt;</span> <span style="color:#6666ff; font-weight:bold;">ActionController::Base</span>
   rescue_from <span style="color:#6666ff; font-weight:bold;">ActiveRecord::StaleObjectError</span> <span style="color:#9966CC; font-weight:bold;">do</span> <span style="color:#006600; font-weight:bold;">|</span>exception<span style="color:#006600; font-weight:bold;">|</span>
      respond_to <span style="color:#9966CC; font-weight:bold;">do</span> <span style="color:#006600; font-weight:bold;">|</span>format<span style="color:#006600; font-weight:bold;">|</span>
         <span style="color:#CC0066; font-weight:bold;">format</span>.<span style="color:#9900CC;">html</span> <span style="color:#006600; font-weight:bold;">&#123;</span>
            correct_stale_record_version
            stale_record_recovery_action
        <span style="color:#006600; font-weight:bold;">&#125;</span>
        <span style="color:#CC0066; font-weight:bold;">format</span>.<span style="color:#9900CC;">xml</span>  <span style="color:#006600; font-weight:bold;">&#123;</span> head <span style="color:#ff3333; font-weight:bold;">:conflict</span> <span style="color:#006600; font-weight:bold;">&#125;</span>
        <span style="color:#CC0066; font-weight:bold;">format</span>.<span style="color:#9900CC;">json</span> <span style="color:#006600; font-weight:bold;">&#123;</span> head <span style="color:#ff3333; font-weight:bold;">:conflict</span> <span style="color:#006600; font-weight:bold;">&#125;</span>
     <span style="color:#9966CC; font-weight:bold;">end</span>
  <span style="color:#9966CC; font-weight:bold;">end</span>      
&nbsp;
   protected   
&nbsp;
   <span style="color:#9966CC; font-weight:bold;">def</span> stale_record_recovery_action
      flash.<span style="color:#9900CC;">now</span><span style="color:#006600; font-weight:bold;">&#91;</span><span style="color:#ff3333; font-weight:bold;">:error</span><span style="color:#006600; font-weight:bold;">&#93;</span> = <span style="color:#996600;">&quot;Another user has made a change to that record &quot;</span><span style="color:#006600; font-weight:bold;">+</span>
         <span style="color:#996600;">&quot;since you accessed the edit form.&quot;</span>
      render <span style="color:#ff3333; font-weight:bold;">:edit</span>, <span style="color:#ff3333; font-weight:bold;">:status</span> <span style="color:#006600; font-weight:bold;">=&gt;</span> <span style="color:#ff3333; font-weight:bold;">:conflict</span>
   <span style="color:#9966CC; font-weight:bold;">end</span>
<span style="color:#9966CC; font-weight:bold;">end</span></pre></div></div>


<div class="wp_syntax"><div class="code"><pre class="ruby" style="font-family:monospace;"><span style="color:#9966CC; font-weight:bold;">class</span> DestinationsController <span style="color:#006600; font-weight:bold;">&lt;</span> ApplicationController
   protected
&nbsp;
   <span style="color:#9966CC; font-weight:bold;">def</span> correct_stale_record_version
      <span style="color:#0066ff; font-weight:bold;">@destination</span>.<span style="color:#9900CC;">reload</span>.<span style="color:#9900CC;">attributes</span> = params<span style="color:#006600; font-weight:bold;">&#91;</span><span style="color:#ff3333; font-weight:bold;">:destination</span><span style="color:#006600; font-weight:bold;">&#93;</span>.<span style="color:#9900CC;">reject</span> <span style="color:#9966CC; font-weight:bold;">do</span> <span style="color:#006600; font-weight:bold;">|</span>attrb, value<span style="color:#006600; font-weight:bold;">|</span>
         attrb.<span style="color:#9900CC;">to_sym</span> == <span style="color:#ff3333; font-weight:bold;">:lock_version</span>
      <span style="color:#9966CC; font-weight:bold;">end</span>
   <span style="color:#9966CC; font-weight:bold;">end</span>
<span style="color:#9966CC; font-weight:bold;">end</span></pre></div></div>

<p>You’ll also notice in the <code>rescue_from</code> block both XML and JSON API requests are handled by just returning a 409 “Conflict” status code with no body.</p>
<h2>Final Thoughts</h2>
<p>Optimistic locking isn’t right for every situation; some applications won’t need any type of locking, and others may need more strict forms of locking. You may also find that you need to recover from conflicts differently. For instance, you might want to show the current version in the database next to the version the user is trying to submit. However, if you feel it covers most of your applications&#8217; use cases, optimistic locking is so easy to implement there’s no reason you shouldn’t try it.</p>
<div class="note"><strong>About Viget Labs</strong><br />
In 1999, <a href="http://www.viget.com/">Viget Labs</a> started building web products for startups. Since 2005, they’ve been building them in Ruby on Rails. Now, Viget Labs&#8217; team of nearly 50 works with both startups and big brands from their offices near Washington, DC, in Durham, NC, and Boulder, CO.</div>
<p><img src="http://www.engineyard.com/blog/?ak_action=api_record_view&#038;id=6918&#038;type=feed" alt="" /></p>
<img src="http://feeds.feedburner.com/~r/engineyard/~4/KTpZ1LZhCAA" height="1" width="1"/>";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:36:"http://wellformedweb.org/CommentAPI/";a:1:{s:10:"commentRss";a:1:{i:0;a:5:{s:4:"data";s:71:"http://www.engineyard.com/blog/2011/a-guide-to-optimistic-locking/feed/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:38:"http://purl.org/rss/1.0/modules/slash/";a:1:{s:8:"comments";a:1:{i:0;a:5:{s:4:"data";s:1:"8";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:42:"http://rssnamespace.org/feedburner/ext/1.0";a:1:{s:8:"origLink";a:1:{i:0;a:5:{s:4:"data";s:66:"http://www.engineyard.com/blog/2011/a-guide-to-optimistic-locking/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:7;a:6:{s:4:"data";s:53:"
		
		
		
		
		
				
		
		
		
		

		
		
			
			
		
		";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:6:{s:0:"";a:7:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:34:"Engine Yard University Screencasts";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:57:"http://feedproxy.google.com/~r/engineyard/~3/1tMfyabuesM/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:8:"comments";a:1:{i:0;a:5:{s:4:"data";s:80:"http://www.engineyard.com/blog/2011/engine-yard-university-screencasts/#comments";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Thu, 10 Feb 2011 08:51:29 +0000";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:8:"category";a:5:{i:0;a:5:{s:4:"data";s:13:"Uncategorized";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:1;a:5:{s:4:"data";s:22:"Engine Yard University";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:2;a:5:{s:4:"data";s:5:"Rails";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:3;a:5:{s:4:"data";s:13:"Ruby on Rails";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:4;a:5:{s:4:"data";s:11:"screencasts";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:38:"http://www.engineyard.com/blog/?p=7112";s:7:"attribs";a:1:{s:0:"";a:1:{s:11:"isPermaLink";s:5:"false";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:3821:"<div><img class="alignright" title="EY Flag" src="http://mreider.com/flag.png" alt="" vspace="5" width="162" height="95" />Announcing the launch of <a href="http://engineyard.com/university" target="_blank">Engine Yard University (EYU) Screencasts</a>! Now there is one central place to publish Ruby video tutorials, at no charge, without any distracting clips of pet tricks, backyard wrestling matches, or wedding bloopers. It&#8217;s like YouTube, but for geeks.</div>
<div>&nbsp;</div>
<div><em>Interested in producing screencasts with a free copy of Camtasia or Screenflow? Keep reading for details.</em></div>
<div><em><br />
</em></div>
<div id="_mcePaste">EYU Screencasts are available to solidify Engine Yard&#8217;s belief in&#8230;</div>
<h3>1) Teaching and Learning</h3>
<div id="_mcePaste">Our primary goal is to encourage teaching and learning in the Ruby and Rails communities. A common misconception is that teaching and learning are distinct. In reality, the more we teach, the closer we are to mastery. To say it another way, if you want to learn a concept, don&#8217;t watch a screencast, MAKE a screencast.</div>
<h3>2) Investment in Community</h3>
<div id="_mcePaste">Engine Yard has invested heavily in open source projects and initiatives including: Rails 3, Rubinius, JRuby, Fog, RVM, and most recently, the Rails Installer. EYU Screencasts are part of this vision and philosophy.</div>
<h3>3) Fun</h3>
<div id="_mcePaste">It can be a lot of fun to share your ideas using video as a medium.  To that end, we are hoping you will join in, and add to our starter list of screencasts below:</div>
<div>
<ul>
<li>Matt Reider (me!)&#8217;s <a href="http://www.engineyard.com/university/screencasts/how-to-make-a-good-screencast" target="_blank">How to Make a Good Screencast</a></li>
<li>Chris Johnson&#8217;s <a href="http://engineyard.com/university/screencasts/introduction-to-facebooker2">Introduction to Facebookr2</a></li>
<li>Ryan Bigg&#8217;s <a href="http://engineyard.com/university/screencasts/using-models" target="_blank">Using Models</a> and <a href="http://engineyard.com/university/screencasts/rails-validations" target="_blank">Validations</a></li>
<li>Paul Campbell&#8217;s <a href="http://engineyard.com/university/screencasts/setting-app-wide-system-configuration-variables-in-rails-3-with-configurableengine" target="_blank">Site wide configuration in Rails 3</a></li>
<li>Thorbem Shroeder&#8217;s <a href="http://engineyard.com/university/screencasts/javascript-tests-with-jasmine" target="_blank">Javascript Tests with Jasmine.</a></li>
</ul>
</div>
<h3>How to Contribute</h3>
<div id="_mcePaste">To contribute your own work, watch <a href="http://www.engineyard.com/university/screencasts/how-to-make-a-good-screencast" target="_blank">How to Make a Good Screencast</a>, and choose a software package that suits your needs. I like both <a href="http://www.techsmith.com/camtasia/" target="_blank">Camtasia</a>, and <a href="http://www.telestream.net/screen-flow/overview.htm" target="_blank">Screenflow</a>, but there are plenty of alternatives. Once your clip is finished, you can create an account (or login with your cloud account). After uploading, your video will be processed and available for the entire community to learn from! Don&#8217;t worry too much about the quality of your work, this is not a hollywood endeavour. And please don&#8217;t be shy. If you have an idea, follow through and produce it!</div>
<div>&nbsp;</div>
<div><em>Want a free copy of ScreenFlow or Camtasia? Just email <a href="emailto:training@engineyard.com">training@engineyard.com</a> and convince us, in a paragraph or two, that you will contribute quality content.</em></div>
<p><img src="http://www.engineyard.com/blog/?ak_action=api_record_view&#038;id=7112&#038;type=feed" alt="" /></p>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:7:"creator";a:1:{i:0;a:5:{s:4:"data";s:11:"Matt Reider";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:40:"http://purl.org/rss/1.0/modules/content/";a:1:{s:7:"encoded";a:1:{i:0;a:5:{s:4:"data";s:3911:"<div><img class="alignright" title="EY Flag" src="http://mreider.com/flag.png" alt="" vspace="5" width="162" height="95" />Announcing the launch of <a href="http://engineyard.com/university" target="_blank">Engine Yard University (EYU) Screencasts</a>! Now there is one central place to publish Ruby video tutorials, at no charge, without any distracting clips of pet tricks, backyard wrestling matches, or wedding bloopers. It&#8217;s like YouTube, but for geeks.</div>
<div>&nbsp;</div>
<div><em>Interested in producing screencasts with a free copy of Camtasia or Screenflow? Keep reading for details.</em></div>
<div><em><br />
</em></div>
<div id="_mcePaste">EYU Screencasts are available to solidify Engine Yard&#8217;s belief in&#8230;</div>
<h3>1) Teaching and Learning</h3>
<div id="_mcePaste">Our primary goal is to encourage teaching and learning in the Ruby and Rails communities. A common misconception is that teaching and learning are distinct. In reality, the more we teach, the closer we are to mastery. To say it another way, if you want to learn a concept, don&#8217;t watch a screencast, MAKE a screencast.</div>
<h3>2) Investment in Community</h3>
<div id="_mcePaste">Engine Yard has invested heavily in open source projects and initiatives including: Rails 3, Rubinius, JRuby, Fog, RVM, and most recently, the Rails Installer. EYU Screencasts are part of this vision and philosophy.</div>
<h3>3) Fun</h3>
<div id="_mcePaste">It can be a lot of fun to share your ideas using video as a medium.  To that end, we are hoping you will join in, and add to our starter list of screencasts below:</div>
<div>
<ul>
<li>Matt Reider (me!)&#8217;s <a href="http://www.engineyard.com/university/screencasts/how-to-make-a-good-screencast" target="_blank">How to Make a Good Screencast</a></li>
<li>Chris Johnson&#8217;s <a href="http://engineyard.com/university/screencasts/introduction-to-facebooker2">Introduction to Facebookr2</a></li>
<li>Ryan Bigg&#8217;s <a href="http://engineyard.com/university/screencasts/using-models" target="_blank">Using Models</a> and <a href="http://engineyard.com/university/screencasts/rails-validations" target="_blank">Validations</a></li>
<li>Paul Campbell&#8217;s <a href="http://engineyard.com/university/screencasts/setting-app-wide-system-configuration-variables-in-rails-3-with-configurableengine" target="_blank">Site wide configuration in Rails 3</a></li>
<li>Thorbem Shroeder&#8217;s <a href="http://engineyard.com/university/screencasts/javascript-tests-with-jasmine" target="_blank">Javascript Tests with Jasmine.</a></li>
</ul>
</div>
<h3>How to Contribute</h3>
<div id="_mcePaste">To contribute your own work, watch <a href="http://www.engineyard.com/university/screencasts/how-to-make-a-good-screencast" target="_blank">How to Make a Good Screencast</a>, and choose a software package that suits your needs. I like both <a href="http://www.techsmith.com/camtasia/" target="_blank">Camtasia</a>, and <a href="http://www.telestream.net/screen-flow/overview.htm" target="_blank">Screenflow</a>, but there are plenty of alternatives. Once your clip is finished, you can create an account (or login with your cloud account). After uploading, your video will be processed and available for the entire community to learn from! Don&#8217;t worry too much about the quality of your work, this is not a hollywood endeavour. And please don&#8217;t be shy. If you have an idea, follow through and produce it!</div>
<div>&nbsp;</div>
<div><em>Want a free copy of ScreenFlow or Camtasia? Just email <a href="emailto:training@engineyard.com">training@engineyard.com</a> and convince us, in a paragraph or two, that you will contribute quality content.</em></div>
<p><img src="http://www.engineyard.com/blog/?ak_action=api_record_view&#038;id=7112&#038;type=feed" alt="" /></p>
<img src="http://feeds.feedburner.com/~r/engineyard/~4/1tMfyabuesM" height="1" width="1"/>";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:36:"http://wellformedweb.org/CommentAPI/";a:1:{s:10:"commentRss";a:1:{i:0;a:5:{s:4:"data";s:76:"http://www.engineyard.com/blog/2011/engine-yard-university-screencasts/feed/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:38:"http://purl.org/rss/1.0/modules/slash/";a:1:{s:8:"comments";a:1:{i:0;a:5:{s:4:"data";s:1:"4";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:42:"http://rssnamespace.org/feedburner/ext/1.0";a:1:{s:8:"origLink";a:1:{i:0;a:5:{s:4:"data";s:71:"http://www.engineyard.com/blog/2011/engine-yard-university-screencasts/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:8;a:6:{s:4:"data";s:47:"
		
		
		
		
		
				
		
		

		
		
			
			
		
		";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:6:{s:0:"";a:7:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:24:"JRuby 1.6.0.RC2 Released";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:57:"http://feedproxy.google.com/~r/engineyard/~3/SiPz5uS1IsA/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:8:"comments";a:1:{i:0;a:5:{s:4:"data";s:70:"http://www.engineyard.com/blog/2011/jruby-1-6-0-rc2-released/#comments";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Wed, 09 Feb 2011 22:02:58 +0000";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:8:"category";a:3:{i:0;a:5:{s:4:"data";s:13:"Uncategorized";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:1;a:5:{s:4:"data";s:5:"JRuby";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:2;a:5:{s:4:"data";s:11:"JRuby 1.6.0";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:38:"http://www.engineyard.com/blog/?p=7103";s:7:"attribs";a:1:{s:0:"";a:1:{s:11:"isPermaLink";s:5:"false";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:2499:"<p style="text-align: left;"><a href="http://www.engineyard.com/blog?getfile=4623"><img class="alignright size-full wp-image-4623" title="jruby-logo" src="http://www.engineyard.com/blog?getfile=4623" alt="" /></a>JRuby 1.6.0.RC2 has been <a title="Release Notes" href="http://www.jruby.org/2011/02/09/jruby-1-6-0-rc2">released</a>.  Here are the more notable things fixed since RC1:</p>
<ul>
<li>Large number of 1.9 compatibility issues addressed
<ul>
<li> Encoding issues (especially involving Regexp)</li>
<li> Fiddle implementation</li>
<li> non-ASCII identifiers</li>
</ul>
</li>
<li>irb (1.8.7, 1.9.2) and command prompt added to Windows installer</li>
<li>Compiler handles all 1.9 syntax now</li>
<li>Fixes for new backtrace accuracy, reliability</li>
<li>Removed all GPL or LGPL-only dependencies</li>
<li>Updated to RubyGems 1.5.0</li>
<li>C extension support prebuilt for OS X, Linux (32/64), Windows (32)</li>
<li>83 issues resolved since RC1</li>
</ul>
<p>Now some of you may be thinking&#8230;</p>
<p>RC2 had 83 resolved issues?  Are you sure RC are the proper letters for the last two releases?<span id="more-7103"></span></p>
<p>Hindsight is 20-20.  We knew 1.9 compatibility was not perfect, but during our RC1 release testing we were able to run all the major applications and libraries for a reasonable set of scenarios.   The truly surprising thing we realized after RC1 was released is how many people are ready for 1.9 support in JRuby.   The feedback has been tremendous and we decided it would make sense to spend extra time fixing reported issues.  After all, we want JRuby 1.6.0 to have solid Ruby 1.9.2 support.</p>
<p>Please (or should I say PLEASE) give <a title="Downloads for RC2" href="http://www.jruby.org/download">RC2</a> a spin and help us figure out if RC2 is good enough to become final.   Only people actively using JRuby’s &#8211;1.9 flag can help us figure this out (and of course any 1.8.7 bug reports are also welcome).  Your testing will make the difference between a production-ready 1.6.0 and a production-ready 1.6.1.</p>
<p>If you do find an issue you can report the problem on our <a title="JRuby Issue Tracker" href="http://jira.codehaus.org/browse/JRUBY">issue tracker</a>.  If you are a first-time reporter you will need to signup to be able to create an issue (follow tiny ‘sign up’ link underneath the Username field).<img src="http://www.engineyard.com/blog/?ak_action=api_record_view&#038;id=7103&#038;type=feed" alt="" /></p>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:7:"creator";a:1:{i:0;a:5:{s:4:"data";s:12:"Thomas Enebo";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:40:"http://purl.org/rss/1.0/modules/content/";a:1:{s:7:"encoded";a:1:{i:0;a:5:{s:4:"data";s:2589:"<p style="text-align: left;"><a href="http://www.engineyard.com/blog?getfile=4623"><img class="alignright size-full wp-image-4623" title="jruby-logo" src="http://www.engineyard.com/blog?getfile=4623" alt="" /></a>JRuby 1.6.0.RC2 has been <a title="Release Notes" href="http://www.jruby.org/2011/02/09/jruby-1-6-0-rc2">released</a>.  Here are the more notable things fixed since RC1:</p>
<ul>
<li>Large number of 1.9 compatibility issues addressed
<ul>
<li> Encoding issues (especially involving Regexp)</li>
<li> Fiddle implementation</li>
<li> non-ASCII identifiers</li>
</ul>
</li>
<li>irb (1.8.7, 1.9.2) and command prompt added to Windows installer</li>
<li>Compiler handles all 1.9 syntax now</li>
<li>Fixes for new backtrace accuracy, reliability</li>
<li>Removed all GPL or LGPL-only dependencies</li>
<li>Updated to RubyGems 1.5.0</li>
<li>C extension support prebuilt for OS X, Linux (32/64), Windows (32)</li>
<li>83 issues resolved since RC1</li>
</ul>
<p>Now some of you may be thinking&#8230;</p>
<p>RC2 had 83 resolved issues?  Are you sure RC are the proper letters for the last two releases?<span id="more-7103"></span></p>
<p>Hindsight is 20-20.  We knew 1.9 compatibility was not perfect, but during our RC1 release testing we were able to run all the major applications and libraries for a reasonable set of scenarios.   The truly surprising thing we realized after RC1 was released is how many people are ready for 1.9 support in JRuby.   The feedback has been tremendous and we decided it would make sense to spend extra time fixing reported issues.  After all, we want JRuby 1.6.0 to have solid Ruby 1.9.2 support.</p>
<p>Please (or should I say PLEASE) give <a title="Downloads for RC2" href="http://www.jruby.org/download">RC2</a> a spin and help us figure out if RC2 is good enough to become final.   Only people actively using JRuby’s &#8211;1.9 flag can help us figure this out (and of course any 1.8.7 bug reports are also welcome).  Your testing will make the difference between a production-ready 1.6.0 and a production-ready 1.6.1.</p>
<p>If you do find an issue you can report the problem on our <a title="JRuby Issue Tracker" href="http://jira.codehaus.org/browse/JRUBY">issue tracker</a>.  If you are a first-time reporter you will need to signup to be able to create an issue (follow tiny ‘sign up’ link underneath the Username field).<img src="http://www.engineyard.com/blog/?ak_action=api_record_view&#038;id=7103&#038;type=feed" alt="" /></p>
<img src="http://feeds.feedburner.com/~r/engineyard/~4/SiPz5uS1IsA" height="1" width="1"/>";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:36:"http://wellformedweb.org/CommentAPI/";a:1:{s:10:"commentRss";a:1:{i:0;a:5:{s:4:"data";s:66:"http://www.engineyard.com/blog/2011/jruby-1-6-0-rc2-released/feed/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:38:"http://purl.org/rss/1.0/modules/slash/";a:1:{s:8:"comments";a:1:{i:0;a:5:{s:4:"data";s:1:"0";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:42:"http://rssnamespace.org/feedburner/ext/1.0";a:1:{s:8:"origLink";a:1:{i:0;a:5:{s:4:"data";s:61:"http://www.engineyard.com/blog/2011/jruby-1-6-0-rc2-released/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:9;a:6:{s:4:"data";s:50:"
		
		
		
		
		
				
		
		
		

		
		
			
			
		
		";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:6:{s:0:"";a:7:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:25:"Modern SQL Server & Rails";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:57:"http://feedproxy.google.com/~r/engineyard/~3/38jSSblrteI/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:8:"comments";a:1:{i:0;a:5:{s:4:"data";s:69:"http://www.engineyard.com/blog/2011/modern-sql-server-rails/#comments";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Wed, 09 Feb 2011 18:22:01 +0000";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:8:"category";a:4:{i:0;a:5:{s:4:"data";s:13:"Uncategorized";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:1;a:5:{s:4:"data";s:12:"ActiveRecord";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:2;a:5:{s:4:"data";s:5:"Rails";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:3;a:5:{s:4:"data";s:9:"sqlserver";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:38:"http://www.engineyard.com/blog/?p=6736";s:7:"attribs";a:1:{s:0:"";a:1:{s:11:"isPermaLink";s:5:"false";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:7746:"<div class="note">Our latest guest post is from community contributor Ken Collins, aka <a href="https://github.com/metaskills">MetaSkills</a>. Ken is a software engineer at <a rel="nofollow" href="http://www.decisiv.net/">Decisiv Inc</a>, author of the <a rel="nofollow" href="https://github.com/rails-sqlserver/">SQL Server Adapter</a> for ActiveRecord, and organizer for the Hampton Roads Ruby Users Group <a rel="nofollow" href="http://757rb.org/">757.rb</a>. He blogs at <a rel="nofollow" href="http://metaskills.net/">metaskills.net</a> about all things Ruby, JavaScript and iOS related.</div>
<p>Last month, I released an updated version of the SQL Server Adapter that supports the latest version of ActiveRecord and the second generation of ARel, the relational algebra gem. As with all SQL Server Adapter releases over the past 2 years, this means we are passing 100% of the ActiveRecord test suite as well as a battery of our own tests specifically designed for SQL Server. As good as that news is, I want to share something even more exciting.</p>
<p>Unlike other adapters, the SQL Server Adapter supports alternate  connection modes and our latest is going to make your life a whole lot easier. The connection mode is DBLIB and the library is called <a rel="nofollow" href="https://github.com/rails-sqlserver/tiny_tds">TinyTDS</a>, a small Ruby C extension that wraps <a rel="nofollow" href="http://www.freetds.org/">FreeTDS</a>. FreeTDS is the open source implementation of the <a rel="nofollow" href="http://en.wikipedia.org/wiki/Tabular_Data_Stream">Tabular Data Stream</a> used by clients communicating to Sybase and SQL Server databases. To appreciate this announcement, it is necessary to examine the history of our connection layer – specifically ODBC.<span id="more-6736"></span></p>
<h2>ODBC Connection Mode</h2>
<p>The longest supported and most often used connection mode for the SQL Server Adapter is ODBC. Here is a diagram of the components that were needed for the adapter&#8217;s raw ODBC connection on a UNIX-based platform.</p>

<div class="wp_syntax"><div class="code"><pre class="" style="font-family:monospace;">  DBI =&gt; DBD::ODBC =&gt; RubyODBC =&gt; unixODBC/iODBC =&gt; FreeTDS</pre></div></div>

<p>Besides looking like a train wreck, this stack was hard to install by the average developer. It was also difficult to maintain by our small community and coordinate patches with others. Lastly, it was very slow. Thankfully Erik Bryn, one of our core contributors, took up the work and removed the unnecessary DBI/DBD gems. His optimizations yielded a 15% performance boost.</p>
<p>So the ODBC stack was shorter. We no longer needed DBI and thanks to others like Klaus Gundermann, we were finally getting patches upstream to Christian Werner, the author of ruby-odbc. So what was wrong? The answer is plenty. There are still two very huge libraries in between our native TDS protocol.</p>
<h2>Our Problems With ODBC</h2>
<p>For the SQL Server Adapter, it is not the right tool for the job. There is simply no need to compile FreeTDS with an ODBC data manager and put two big hurdles in the way of your database. On a more practical note, here are some technical problems with ruby-odbc as a connection mode for the SQL Server Adapter.</p>
<ul>
<li>No client encoding options.</li>
<li>Does not convert all data types.</li>
<li>Large code base. Not tested. No visible repository or community.</li>
<li>Does not handle query timeouts.</li>
</ul>
<p>The ruby-odbc gem is not a good steward of character encodings. It does come with a UTF-8 variant, but that is a separate require and is buggy. Its all or nothing configuration leaves out many possible encoding options to be addressed by the end user. In the past, the adapter tried to account for the shortcomings of proper encoding support by our raw connections and we just had to give up. If encodings are not handled properly by the client connection, it is up to that library to fix it.</p>
<p>Some data types from ruby-odbc are returned as strings, most notably dates and times. This is a big performance hit under ActiveRecord since it will have to perform column reflection before casting these strings to ruby objects followed by a final conversion to the correct time zone.</p>
<p>Many things are changing with ActiveRecord and in general the Ruby community moves pretty fast. The ruby-odbc project is not keeping up with the times nor does it have a vested interest in performance optimizations that are driven by the needs of the SQL Server Adapter and/or the Rails community. I decided to write my first Ruby C extension to solve this problem.</p>
<h2>TinyTDS &#8211; Modern, Simple, Tested, Fast!</h2>
<p>TinyTDS allows us to talk directly to SQL Server databases using FreeTDS&#8217;s DB-Library API. It has a simple Ruby interface to execute queries and iterate over the results. Full details can be found on <a rel="nofollow" href="https://github.com/rails-sqlserver/tiny_tds#readme">our documentation page</a>, but I would like to highlight a few features.</p>
<p>Converting all SQL Server data types to native Ruby primitives is supported. Hooks for ActiveRecord&#8217;s :local or :utc timezone conversion are also provided. Result sets are Ruby objects that implement the Enumerable mixin which lazily loads the row from the wire as it is yielded to a block. The client connection allows almost any ICONV encoding to be used and FreeTDS automatically handles conversion to and from SQL Servers internal UCS-2 encoding.</p>
<p>TinyTDS is tested with SQL Server 2000, 2005 &amp; 2008 using Ruby 1.8.6 to 1.9.2 and even JRuby&#8217;s latest 1.6.0 release candidate which has experimental support for C extensions. By avoiding the ODBC layers, leveraging FreeTDS&#8217;s built-in encoding support and using a few simple optimization techniques, TinyTDS is able to parse query results up to 5x faster than ruby-odbc. Those interested in switching from ODBC to TinyTDS <a rel="nofollow" href="https://github.com/rails-sqlserver/activerecord-sqlserver-adapter/wiki/Using-TinyTds">can consult our wiki page</a> that covers all the related details.</p>
<h2>What About JRuby</h2>
<p>Though I never use Java or JRuby, I have heard that many people have opted to do so specifically for connecting to SQL Server. I think Nick Sieger says it best:</p>
<blockquote><p>It&#8217;s awesome that we can have better SQL Server support on MRI. The<br />
previous approach using ODBC was untenable, and for a long time the<br />
easiest option was JRuby + JDBC + JTDS. Though there&#8217;s no direct<br />
relationship to JDBC here, this should make for many happy Windows<br />
Rubyists who have no specific need for JRuby or Java.</p></blockquote>
<p>So if you are on JRuby and do not mind using compiled C extensions, give us a try. The official SQL Server Adapter is highly tested and works very well.</p>
<h2>Other SQL Server Adapter Details</h2>
<p>The adapter project has two active branches. Our 2-3-stable branch continually accepts bug fixes and also supports the DBLIB connection mode using TinyTDS. Both of our 2.3/3.x versions also support an ADONET connection mode for IronRuby, though we are actively looking for someone in that community to maintain and test it. So if you are such a person, please contact us, we would greatly appreciate the help!</p>
<p>I invite anyone that uses the SQL Server Adapter to <a rel="nofollow" href="http://groups.google.com/group/rails-sqlserver-adapter">join the Google Group</a> or stop by the #rails-sqlserver room on irc.freenode.net and help us make it better. Thanks and I hope to see you there!<img src="http://www.engineyard.com/blog/?ak_action=api_record_view&#038;id=6736&#038;type=feed" alt="" /></p>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:7:"creator";a:1:{i:0;a:5:{s:4:"data";s:11:"Ken Collins";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:40:"http://purl.org/rss/1.0/modules/content/";a:1:{s:7:"encoded";a:1:{i:0;a:5:{s:4:"data";s:7836:"<div class="note">Our latest guest post is from community contributor Ken Collins, aka <a href="https://github.com/metaskills">MetaSkills</a>. Ken is a software engineer at <a rel="nofollow" href="http://www.decisiv.net/">Decisiv Inc</a>, author of the <a rel="nofollow" href="https://github.com/rails-sqlserver/">SQL Server Adapter</a> for ActiveRecord, and organizer for the Hampton Roads Ruby Users Group <a rel="nofollow" href="http://757rb.org/">757.rb</a>. He blogs at <a rel="nofollow" href="http://metaskills.net/">metaskills.net</a> about all things Ruby, JavaScript and iOS related.</div>
<p>Last month, I released an updated version of the SQL Server Adapter that supports the latest version of ActiveRecord and the second generation of ARel, the relational algebra gem. As with all SQL Server Adapter releases over the past 2 years, this means we are passing 100% of the ActiveRecord test suite as well as a battery of our own tests specifically designed for SQL Server. As good as that news is, I want to share something even more exciting.</p>
<p>Unlike other adapters, the SQL Server Adapter supports alternate  connection modes and our latest is going to make your life a whole lot easier. The connection mode is DBLIB and the library is called <a rel="nofollow" href="https://github.com/rails-sqlserver/tiny_tds">TinyTDS</a>, a small Ruby C extension that wraps <a rel="nofollow" href="http://www.freetds.org/">FreeTDS</a>. FreeTDS is the open source implementation of the <a rel="nofollow" href="http://en.wikipedia.org/wiki/Tabular_Data_Stream">Tabular Data Stream</a> used by clients communicating to Sybase and SQL Server databases. To appreciate this announcement, it is necessary to examine the history of our connection layer – specifically ODBC.<span id="more-6736"></span></p>
<h2>ODBC Connection Mode</h2>
<p>The longest supported and most often used connection mode for the SQL Server Adapter is ODBC. Here is a diagram of the components that were needed for the adapter&#8217;s raw ODBC connection on a UNIX-based platform.</p>

<div class="wp_syntax"><div class="code"><pre class="" style="font-family:monospace;">  DBI =&gt; DBD::ODBC =&gt; RubyODBC =&gt; unixODBC/iODBC =&gt; FreeTDS</pre></div></div>

<p>Besides looking like a train wreck, this stack was hard to install by the average developer. It was also difficult to maintain by our small community and coordinate patches with others. Lastly, it was very slow. Thankfully Erik Bryn, one of our core contributors, took up the work and removed the unnecessary DBI/DBD gems. His optimizations yielded a 15% performance boost.</p>
<p>So the ODBC stack was shorter. We no longer needed DBI and thanks to others like Klaus Gundermann, we were finally getting patches upstream to Christian Werner, the author of ruby-odbc. So what was wrong? The answer is plenty. There are still two very huge libraries in between our native TDS protocol.</p>
<h2>Our Problems With ODBC</h2>
<p>For the SQL Server Adapter, it is not the right tool for the job. There is simply no need to compile FreeTDS with an ODBC data manager and put two big hurdles in the way of your database. On a more practical note, here are some technical problems with ruby-odbc as a connection mode for the SQL Server Adapter.</p>
<ul>
<li>No client encoding options.</li>
<li>Does not convert all data types.</li>
<li>Large code base. Not tested. No visible repository or community.</li>
<li>Does not handle query timeouts.</li>
</ul>
<p>The ruby-odbc gem is not a good steward of character encodings. It does come with a UTF-8 variant, but that is a separate require and is buggy. Its all or nothing configuration leaves out many possible encoding options to be addressed by the end user. In the past, the adapter tried to account for the shortcomings of proper encoding support by our raw connections and we just had to give up. If encodings are not handled properly by the client connection, it is up to that library to fix it.</p>
<p>Some data types from ruby-odbc are returned as strings, most notably dates and times. This is a big performance hit under ActiveRecord since it will have to perform column reflection before casting these strings to ruby objects followed by a final conversion to the correct time zone.</p>
<p>Many things are changing with ActiveRecord and in general the Ruby community moves pretty fast. The ruby-odbc project is not keeping up with the times nor does it have a vested interest in performance optimizations that are driven by the needs of the SQL Server Adapter and/or the Rails community. I decided to write my first Ruby C extension to solve this problem.</p>
<h2>TinyTDS &#8211; Modern, Simple, Tested, Fast!</h2>
<p>TinyTDS allows us to talk directly to SQL Server databases using FreeTDS&#8217;s DB-Library API. It has a simple Ruby interface to execute queries and iterate over the results. Full details can be found on <a rel="nofollow" href="https://github.com/rails-sqlserver/tiny_tds#readme">our documentation page</a>, but I would like to highlight a few features.</p>
<p>Converting all SQL Server data types to native Ruby primitives is supported. Hooks for ActiveRecord&#8217;s :local or :utc timezone conversion are also provided. Result sets are Ruby objects that implement the Enumerable mixin which lazily loads the row from the wire as it is yielded to a block. The client connection allows almost any ICONV encoding to be used and FreeTDS automatically handles conversion to and from SQL Servers internal UCS-2 encoding.</p>
<p>TinyTDS is tested with SQL Server 2000, 2005 &amp; 2008 using Ruby 1.8.6 to 1.9.2 and even JRuby&#8217;s latest 1.6.0 release candidate which has experimental support for C extensions. By avoiding the ODBC layers, leveraging FreeTDS&#8217;s built-in encoding support and using a few simple optimization techniques, TinyTDS is able to parse query results up to 5x faster than ruby-odbc. Those interested in switching from ODBC to TinyTDS <a rel="nofollow" href="https://github.com/rails-sqlserver/activerecord-sqlserver-adapter/wiki/Using-TinyTds">can consult our wiki page</a> that covers all the related details.</p>
<h2>What About JRuby</h2>
<p>Though I never use Java or JRuby, I have heard that many people have opted to do so specifically for connecting to SQL Server. I think Nick Sieger says it best:</p>
<blockquote><p>It&#8217;s awesome that we can have better SQL Server support on MRI. The<br />
previous approach using ODBC was untenable, and for a long time the<br />
easiest option was JRuby + JDBC + JTDS. Though there&#8217;s no direct<br />
relationship to JDBC here, this should make for many happy Windows<br />
Rubyists who have no specific need for JRuby or Java.</p></blockquote>
<p>So if you are on JRuby and do not mind using compiled C extensions, give us a try. The official SQL Server Adapter is highly tested and works very well.</p>
<h2>Other SQL Server Adapter Details</h2>
<p>The adapter project has two active branches. Our 2-3-stable branch continually accepts bug fixes and also supports the DBLIB connection mode using TinyTDS. Both of our 2.3/3.x versions also support an ADONET connection mode for IronRuby, though we are actively looking for someone in that community to maintain and test it. So if you are such a person, please contact us, we would greatly appreciate the help!</p>
<p>I invite anyone that uses the SQL Server Adapter to <a rel="nofollow" href="http://groups.google.com/group/rails-sqlserver-adapter">join the Google Group</a> or stop by the #rails-sqlserver room on irc.freenode.net and help us make it better. Thanks and I hope to see you there!<img src="http://www.engineyard.com/blog/?ak_action=api_record_view&#038;id=6736&#038;type=feed" alt="" /></p>
<img src="http://feeds.feedburner.com/~r/engineyard/~4/38jSSblrteI" height="1" width="1"/>";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:36:"http://wellformedweb.org/CommentAPI/";a:1:{s:10:"commentRss";a:1:{i:0;a:5:{s:4:"data";s:65:"http://www.engineyard.com/blog/2011/modern-sql-server-rails/feed/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:38:"http://purl.org/rss/1.0/modules/slash/";a:1:{s:8:"comments";a:1:{i:0;a:5:{s:4:"data";s:2:"12";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:42:"http://rssnamespace.org/feedburner/ext/1.0";a:1:{s:8:"origLink";a:1:{i:0;a:5:{s:4:"data";s:60:"http://www.engineyard.com/blog/2011/modern-sql-server-rails/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}}}s:44:"http://purl.org/rss/1.0/modules/syndication/";a:2:{s:12:"updatePeriod";a:1:{i:0;a:5:{s:4:"data";s:6:"hourly";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:15:"updateFrequency";a:1:{i:0;a:5:{s:4:"data";s:1:"1";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:42:"http://rssnamespace.org/feedburner/ext/1.0";a:2:{s:4:"info";a:1:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:1:{s:3:"uri";s:10:"engineyard";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:9:"feedFlare";a:19:{i:0;a:5:{s:4:"data";s:24:"Subscribe with My Yahoo!";s:7:"attribs";a:1:{s:0:"";a:2:{s:4:"href";s:73:"http://add.my.yahoo.com/rss?url=http%3A%2F%2Fwww.engineyard.com%2Ffeed%2F";s:3:"src";s:59:"http://us.i1.yimg.com/us.yimg.com/i/us/my/addtomyyahoo4.gif";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:1;a:5:{s:4:"data";s:24:"Subscribe with NewsGator";s:7:"attribs";a:1:{s:0:"";a:2:{s:4:"href";s:97:"http://www.newsgator.com/ngs/subscriber/subext.aspx?url=http%3A%2F%2Fwww.engineyard.com%2Ffeed%2F";s:3:"src";s:42:"http://www.newsgator.com/images/ngsub1.gif";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:2;a:5:{s:4:"data";s:21:"Subscribe with My AOL";s:7:"attribs";a:1:{s:0:"";a:2:{s:4:"href";s:77:"http://feeds.my.aol.com/add.jsp?url=http%3A%2F%2Fwww.engineyard.com%2Ffeed%2F";s:3:"src";s:108:"http://o.aolcdn.com/favorites.my.aol.com/webmaster/ffclient/webroot/locale/en-US/images/myAOLButtonSmall.gif";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:3;a:5:{s:4:"data";s:24:"Subscribe with Bloglines";s:7:"attribs";a:1:{s:0:"";a:2:{s:4:"href";s:60:"http://www.bloglines.com/sub/http://www.engineyard.com/feed/";s:3:"src";s:48:"http://www.bloglines.com/images/sub_modern11.gif";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:4;a:5:{s:4:"data";s:23:"Subscribe with Netvibes";s:7:"attribs";a:1:{s:0:"";a:2:{s:4:"href";s:83:"http://www.netvibes.com/subscribe.php?url=http%3A%2F%2Fwww.engineyard.com%2Ffeed%2F";s:3:"src";s:44:"http://www.netvibes.com/img/add2netvibes.gif";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:5;a:5:{s:4:"data";s:21:"Subscribe with Google";s:7:"attribs";a:1:{s:0:"";a:2:{s:4:"href";s:78:"http://fusion.google.com/add?feedurl=http%3A%2F%2Fwww.engineyard.com%2Ffeed%2F";s:3:"src";s:51:"http://buttons.googlesyndication.com/fusion/add.gif";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:6;a:5:{s:4:"data";s:25:"Subscribe with Pageflakes";s:7:"attribs";a:1:{s:0:"";a:2:{s:4:"href";s:86:"http://www.pageflakes.com/subscribe.aspx?url=http%3A%2F%2Fwww.engineyard.com%2Ffeed%2F";s:3:"src";s:87:"http://www.pageflakes.com/ImageFile.ashx?instanceId=Static_4&fileName=ATP_blu_91x17.gif";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:7;a:5:{s:4:"data";s:21:"Subscribe with Plusmo";s:7:"attribs";a:1:{s:0:"";a:2:{s:4:"href";s:71:"http://www.plusmo.com/add?url=http%3A%2F%2Fwww.engineyard.com%2Ffeed%2F";s:3:"src";s:43:"http://plusmo.com/res/graphics/fbplusmo.gif";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:8;a:5:{s:4:"data";s:34:"Subscribe with The Free Dictionary";s:7:"attribs";a:1:{s:0:"";a:2:{s:4:"href";s:91:"http://www.thefreedictionary.com/_/hp/AddRSS.aspx?http%3A%2F%2Fwww.engineyard.com%2Ffeed%2F";s:3:"src";s:48:"http://img.tfd.com/hp/addToTheFreeDictionary.gif";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:9;a:5:{s:4:"data";s:28:"Subscribe with Bitty Browser";s:7:"attribs";a:1:{s:0:"";a:2:{s:4:"href";s:103:"http://www.bitty.com/manual/?contenttype=rssfeed&contentvalue=http%3A%2F%2Fwww.engineyard.com%2Ffeed%2F";s:3:"src";s:48:"http://www.bitty.com/img/bittychicklet_91x17.gif";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:10;a:5:{s:4:"data";s:24:"Subscribe with NewsAlloy";s:7:"attribs";a:1:{s:0:"";a:2:{s:4:"href";s:71:"http://www.newsalloy.com/?rss=http%3A%2F%2Fwww.engineyard.com%2Ffeed%2F";s:3:"src";s:36:"http://www.newsalloy.com/subrss3.gif";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:11;a:5:{s:4:"data";s:23:"Subscribe with Live.com";s:7:"attribs";a:1:{s:0:"";a:2:{s:4:"href";s:66:"http://www.live.com/?add=http%3A%2F%2Fwww.engineyard.com%2Ffeed%2F";s:3:"src";s:141:"http://tkfiles.storage.msn.com/x1piYkpqHC_35nIp1gLE68-wvzLZO8iXl_JMledmJQXP-XTBOLfmQv4zhj4MhcWEJh_GtoBIiAl1Mjh-ndp9k47If7hTaFno0mxW9_i3p_5qQw";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:12;a:5:{s:4:"data";s:25:"Subscribe with Excite MIX";s:7:"attribs";a:1:{s:0:"";a:2:{s:4:"href";s:74:"http://mix.excite.eu/add?feedurl=http%3A%2F%2Fwww.engineyard.com%2Ffeed%2F";s:3:"src";s:42:"http://image.excite.co.uk/mix/addtomix.gif";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:13;a:5:{s:4:"data";s:34:"Subscribe with Attensa for Outlook";s:7:"attribs";a:1:{s:0:"";a:2:{s:4:"href";s:98:"http://download.attensa.com/app/get_attensa.html?feedurl=http%3A%2F%2Fwww.engineyard.com%2Ffeed%2F";s:3:"src";s:104:"http://www.attensa.com/blogs/attensa/WindowsLiveWriter/BadgeredintoBadges_10C02/attensa_feed_button5.gif";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:14;a:5:{s:4:"data";s:21:"Subscribe with Webwag";s:7:"attribs";a:1:{s:0:"";a:2:{s:4:"href";s:79:"http://www.webwag.com/wwgthis.php?url=http%3A%2F%2Fwww.engineyard.com%2Ffeed%2F";s:3:"src";s:40:"http://www.webwag.com/images/wwgthis.gif";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:15;a:5:{s:4:"data";s:28:"Subscribe with Podcast Ready";s:7:"attribs";a:1:{s:0:"";a:2:{s:4:"href";s:95:"http://www.podcastready.com/oneclick_bookmark.php?url=http%3A%2F%2Fwww.engineyard.com%2Ffeed%2F";s:3:"src";s:58:"http://www.podcastready.com/images/podcastready_button.gif";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:16;a:5:{s:4:"data";s:21:"Subscribe with Flurry";s:7:"attribs";a:1:{s:0:"";a:2:{s:4:"href";s:87:"http://www.flurry.com/pushRssFeed.do?r=fb&url=http%3A%2F%2Fwww.engineyard.com%2Ffeed%2F";s:3:"src";s:49:"http://www.flurry.com/images/flurry_rss_logo2.gif";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:17;a:5:{s:4:"data";s:20:"Subscribe with Wikio";s:7:"attribs";a:1:{s:0:"";a:2:{s:4:"href";s:76:"http://www.wikio.com/subscribe?url=http%3A%2F%2Fwww.engineyard.com%2Ffeed%2F";s:3:"src";s:45:"http://www.wikio.com/shared/img/add2wikio.gif";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:18;a:5:{s:4:"data";s:29:"Subscribe with Daily Rotation";s:7:"attribs";a:1:{s:0:"";a:2:{s:4:"href";s:85:"http://www.dailyrotation.com/index.php?feed=http%3A%2F%2Fwww.engineyard.com%2Ffeed%2F";s:3:"src";s:40:"http://www.dailyrotation.com/rss-dr2.gif";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:27:"http://www.w3.org/2005/Atom";a:1:{s:4:"link";a:2:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:2:{s:3:"rel";s:3:"hub";s:4:"href";s:32:"http://pubsubhubbub.appspot.com/";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:1;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"rel";s:4:"self";s:4:"type";s:19:"application/rss+xml";s:4:"href";s:31:"http://www.engineyard.com/feed/";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}}}}}}}}s:4:"type";i:128;s:7:"headers";a:11:{s:12:"content-type";s:23:"text/xml; charset=UTF-8";s:4:"etag";s:27:"I86ijYTqRMaNyog3TmT+C/TJ7iI";s:13:"last-modified";s:29:"Tue, 22 Feb 2011 12:26:33 GMT";s:16:"content-encoding";s:4:"gzip";s:17:"transfer-encoding";s:7:"chunked";s:4:"date";s:29:"Tue, 22 Feb 2011 13:12:47 GMT";s:7:"expires";s:29:"Tue, 22 Feb 2011 13:12:47 GMT";s:13:"cache-control";s:18:"private, max-age=0";s:22:"x-content-type-options";s:7:"nosniff";s:16:"x-xss-protection";s:13:"1; mode=block";s:6:"server";s:3:"GSE";}s:5:"build";s:14:"20110128231735";}