a:4:{s:5:"child";a:1:{s:27:"http://www.w3.org/2005/Atom";a:1:{s:4:"feed";a:1:{i:0;a:6:{s:4:"data";s:49:"
	
	

	

	
	
	

	
		
		
		
		
		
		
		
		
		
		
	";s:7:"attribs";a:1:{s:36:"http://www.w3.org/XML/1998/namespace";a:2:{s:4:"lang";s:2:"en";s:4:"base";s:37:"http://www.rubyinside.com/wp-atom.php";}}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";s:5:"child";a:2:{s:27:"http://www.w3.org/2005/Atom";a:7:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:11:"Ruby Inside";s:7:"attribs";a:1:{s:0:"";a:1:{s:4:"type";s:4:"text";}}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}s:8:"subtitle";a:1:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:1:{s:4:"type";s:4:"text";}}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}s:7:"updated";a:1:{i:0;a:5:{s:4:"data";s:20:"2011-02-21T03:07:34Z";s:7:"attribs";a:0:{}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}s:4:"link";a:3:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"rel";s:9:"alternate";s:4:"type";s:9:"text/html";s:4:"href";s:25:"http://www.rubyinside.com";}}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}i:1;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"rel";s:4:"self";s:4:"type";s:20:"application/atom+xml";s:4:"href";s:38:"http://feeds.feedburner.com/RubyInside";}}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}i:2;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:2:{s:3:"rel";s:3:"hub";s:4:"href";s:32:"http://pubsubhubbub.appspot.com/";}}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}s:2:"id";a:1:{i:0;a:5:{s:4:"data";s:35:"http://www.rubyinside.com/feed/atom";s:7:"attribs";a:0:{}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}s:9:"generator";a:1:{i:0;a:5:{s:4:"data";s:9:"WordPress";s:7:"attribs";a:1:{s:0:"";a:2:{s:3:"uri";s:21:"http://wordpress.org/";s:7:"version";s:5:"3.0.5";}}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}s:5:"entry";a:10:{i:0;a:6:{s:4:"data";s:37:"
		
		
		
		
		
		
				
		
		
		
		
	";s:7:"attribs";a:0:{}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";s:5:"child";a:3:{s:27:"http://www.w3.org/2005/Atom";a:9:{s:6:"author";a:1:{i:0;a:6:{s:4:"data";s:17:"
			
						
					";s:7:"attribs";a:0:{}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";s:5:"child";a:1:{s:27:"http://www.w3.org/2005/Atom";a:2:{s:4:"name";a:1:{i:0;a:5:{s:4:"data";s:12:"Peter Cooper";s:7:"attribs";a:0:{}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}s:3:"uri";a:1:{i:0;a:5:{s:4:"data";s:25:"http://twitter.com/peterc";s:7:"attribs";a:0:{}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}}}}}s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:64:"How To Get Rails 3 and RSpec 2 Running Specs Fast (From Scratch)";s:7:"attribs";a:1:{s:0:"";a:1:{s:4:"type";s:4:"html";}}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}s:4:"link";a:3:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"rel";s:9:"alternate";s:4:"type";s:9:"text/html";s:4:"href";s:93:"http://feedproxy.google.com/~r/RubyInside/~3/9kQfKhEconY/how-to-rails-3-and-rspec-2-4336.html";}}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}i:1;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:2:{s:0:"";a:3:{s:3:"rel";s:7:"replies";s:4:"type";s:9:"text/html";s:4:"href";s:71:"http://www.rubyinside.com/how-to-rails-3-and-rspec-2-4336.html#comments";}s:38:"http://purl.org/syndication/thread/1.0";a:1:{s:5:"count";s:2:"10";}}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}i:2;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:2:{s:0:"";a:3:{s:3:"rel";s:7:"replies";s:4:"type";s:20:"application/atom+xml";s:4:"href";s:72:"http://www.rubyinside.com/how-to-rails-3-and-rspec-2-4336.html/feed/atom";}s:38:"http://purl.org/syndication/thread/1.0";a:1:{s:5:"count";s:2:"10";}}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}s:2:"id";a:1:{i:0;a:5:{s:4:"data";s:33:"http://www.rubyinside.com/?p=4336";s:7:"attribs";a:0:{}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}s:7:"updated";a:1:{i:0;a:5:{s:4:"data";s:20:"2011-02-21T03:07:34Z";s:7:"attribs";a:0:{}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}s:9:"published";a:1:{i:0;a:5:{s:4:"data";s:20:"2011-02-20T15:20:22Z";s:7:"attribs";a:0:{}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}s:8:"category";a:2:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:2:{s:6:"scheme";s:25:"http://www.rubyinside.com";s:4:"term";s:13:"Ruby on Rails";}}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}i:1;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:2:{s:6:"scheme";s:25:"http://www.rubyinside.com";s:4:"term";s:9:"Tutorials";}}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}s:7:"summary";a:1:{i:0;a:5:{s:4:"data";s:1252:"<p><img src="http://www.rubyinside.com/wp-content/uploads/2011/02/rarrr.png" alt="" title="rarrr" width="120" height="120" class="alignnone size-full wp-image-4385" style="float: left; margin-right: 16px; margin-bottom: 8px; border: 1px solid #555" /><a href="http://www.rubyinside.com/rails-3-0-released-and-22-free-videos-to-bring-you-up-to-speed-3733.html">Rails 3</a> is great. <a href="http://www.rubyinside.com/rspec-2-0-released-rubys-leading-bdd-framework-grows-up-3880.html">RSpec 2</a> is great. And <a href="http://www.rubyinside.com/ruby-1-9-2-released-3700.html">Ruby 1.9.2</a> is <em>really</em> great. Getting them all running together <em>and quickly</em>, however, isn't entirely straightforward. In this post I demonstrate how to get everything ticking over along with automatically running, super-snappy test runs.</p>
<p>The ultimate outcome is using Ruby 1.9.2 (though much of this is relevant to 1.8 still) to create a Rails 3 app, hook up RSpec 2, and be able to run specs <em>quickly.</em> The first two parts are easy(ish) but the "quickly" part requires some tinkering. Grab a coffee and carry on..
 <div class="read_more"><a href="http://www.rubyinside.com/how-to-rails-3-and-rspec-2-4336.html">Read More</a> &#187;</div></p>";s:7:"attribs";a:1:{s:0:"";a:1:{s:4:"type";s:4:"html";}}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}s:7:"content";a:1:{i:0;a:5:{s:4:"data";s:20665:"<p><img src="http://www.rubyinside.com/wp-content/uploads/2011/02/rarrr.png" alt="" title="rarrr" width="120" height="120" class="alignnone size-full wp-image-4385" style="float: left; margin-right: 16px; margin-bottom: 8px; border: 1px solid #555" /><a href="http://www.rubyinside.com/rails-3-0-released-and-22-free-videos-to-bring-you-up-to-speed-3733.html">Rails 3</a> is great. <a href="http://www.rubyinside.com/rspec-2-0-released-rubys-leading-bdd-framework-grows-up-3880.html">RSpec 2</a> is great. And <a href="http://www.rubyinside.com/ruby-1-9-2-released-3700.html">Ruby 1.9.2</a> is <em>really</em> great. Getting them all running together <em>and quickly</em>, however, isn't entirely straightforward. In this post I demonstrate how to get everything ticking over along with automatically running, super-snappy test runs.</p>
<p>The ultimate outcome is using Ruby 1.9.2 (though much of this is relevant to 1.8 still) to create a Rails 3 app, hook up RSpec 2, and be able to run specs <em>quickly.</em> The first two parts are easy(ish) but the "quickly" part requires some tinkering. Grab a coffee and carry on..</p>
<h3>Create a new Rails 3 app</h3>
<p>Got Rails 3 installed? If not, <code>gem install rails</code> will see you good. Then head on down to your favorite project folder with your shell and create a new Rails 3 app like so:</p>
<pre>rails new myapp --skip-test-unit</pre>
<p>You can retroactively bring RSpec 2 into an existing Rails 3 project, of course, but it's easier for this walkthrough to start afresh in case of application-specific issues.</p>
<h3>Hooking up RSpec 2 with RSpec-Rails</h3>
<p>Edit the <code>Gemfile</code> file in your new Rails project (<code>myapp/Gemfile</code> in this example) and add the following block to the bottom:</p>
<div class="highlight">
<pre><span class="n">group</span> <span class="ss">:development</span><span class="p">,</span> <span class="ss">:test</span> <span class="k">do</span>
  <span class="n">gem</span> <span class="s1">&#39;rspec-rails&#39;</span>
<span class="k">end</span>
</pre>
</div>
<p>This tells Bundler (a gem management and dependency tool Rails 3 likes to lean on) we want to use the <a href="https://github.com/dchelimsky/rspec-rails">rspec-rails</a> gem which will get RSpec running with Rails 3.0 for us. Next, we get Bundler to do its thing:</p>
<pre>bundle</pre>
<p>This will install all of the gems referenced in <code>Gemfile</code>, including <code>rspec-rails</code>. (You can use <code>bundle install</code> instead, if you prefer, but <code>bundle</code> on its own works too.)</p>
<p>Last but not least, we need to run RSpec's 'generator' that rspec-rails has put in place for us:</p>
<pre>rails generate rspec:install</pre>
<p>The generator creates a few files. Namely:</p>
<ul>
<li><code>.rspec</code> - a config file where we can store extra command line options for the <code>rspec</code> command line tool. By default it contains <code>--colour</code> which turns on colored output from RSpec.</li>
<li><code>spec</code> - a directory that will store all of the various model, controller, view, acceptance and other specs for your app</li>
<li><code>spec/spec_helper.rb</code> - a file that's loaded by every spec (not in any automatic way but most have <code>require 'spec_helper'</code> at the top). It sets the test environment, contains app level RSpec configuration items, loads support files, and more.</li>
</ul>
<p>We still can't run <code>rake</code> and see anything interesting yet because we don't have a database or any models initialized.</p>
<h3>Creating a model to test</h3>
<p>Let's take the easy way out and use the <code>scaffold</code> generator to flesh out something for us to test (as well as to see what spec files can be generated automatically):</p>
<pre>rails generate scaffold Person name:string age:integer zipcode:string</pre>
<p>It's worth noting that when you generate the scaffold numerous spec files are also created (thanks to <code>rspec-rails</code>):</p>
<pre>spec/models/person_spec.rb
spec/controllers/people_controller_spec.rb
spec/views/people/edit.html.erb_spec.rb
spec/views/people/index.html.erb_spec.rb
spec/views/people/new.html.erb_spec.rb
spec/views/people/show.html.erb_spec.rb
spec/helpers/people_helper_spec.rb
spec/routing/people_routing_spec.rb
spec/requests/people_spec.rb</pre>
<p>Now bring the database up to speed with the migration for the new model:</p>
<p><code>rake db:migrate</code></p>
<p>Now let's run <code>rake</code> - finally! The result:</p>
<pre>...............**............

Pending:
  PeopleHelper add some examples to (or delete) /Users/peter/dev/rails/myapp/spec/helpers/people_helper_spec.rb
    # Not Yet Implemented
    # ./spec/helpers/people_helper_spec.rb:14
  Person add some examples to (or delete) /Users/peter/dev/rails/myapp/spec/models/person_spec.rb
    # Not Yet Implemented
    # ./spec/models/person_spec.rb:4

Finished in 0.31043 seconds
29 examples, 0 failures, 2 pending</pre>
<p>Rock and roll. We're up and running. Sort of. Let's put in some "real" specs to be sure things are working nicely.</p>
<p>Change <code>spec/models/person_spec.rb</code> to the following rather contrived pair of specs:</p>
<div class="highlight">
<pre><span class="nb">require</span> <span class="s1">&#39;spec_helper&#39;</span>

<span class="n">describe</span> <span class="no">Person</span> <span class="k">do</span>
  <span class="n">it</span> <span class="s2">&quot;can be instantiated&quot;</span> <span class="k">do</span>
    <span class="no">Person</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">should</span> <span class="n">be_an_instance_of</span><span class="p">(</span><span class="no">Person</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="n">it</span> <span class="s2">&quot;can be saved successfully&quot;</span> <span class="k">do</span>
    <span class="no">Person</span><span class="o">.</span><span class="n">create</span><span class="o">.</span><span class="n">should</span> <span class="n">be_persisted</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre>
</div>
<p>Not the most useful things to spec out, admittedly, but you get a little database action and get rid of a <code>pending</code> spec we had cluttering things up. We haven't got anything else we can seriously test yet anyway.</p>
<p>Now let's run <code>rake spec:models</code> to focus our efforts on what we've just done:</p>
<pre>..

Finished in 0.09378 seconds
2 examples, 0 failures</pre>
<h3>How to have specs run automatically with Watchr</h3>
<p>Let's assume we've progressed with developing our app and we're working on models and controllers, testing along the way. Rather than running <code>rake</code> or <code>bundle exec rspec</code> all of the time, wouldn't it be great to have the relevant spec run <em>automatically</em> when we either edit the spec or a model/controller that has a spec? Well, with <a href="https://github.com/mynyml/watchr">watchr</a>, we can. <em>(Note: Some people prefer <a href="http://ph7spot.com/musings/getting-started-with-autotest">autotest</a>. I find watchr more flexible and useful for other things beyond just running specs.)</em></p>
<p>Add <code>watchr</code> to your <code>Gemfile</code>'s testing and production gem section:</p>
<div class="highlight">
<pre><span class="n">group</span> <span class="ss">:development</span><span class="p">,</span> <span class="ss">:test</span> <span class="k">do</span>
  <span class="n">gem</span> <span class="s1">&#39;rspec-rails&#39;</span>
  <span class="n">gem</span> <span class="s1">&#39;watchr&#39;</span>
<span class="k">end</span>
</pre>
</div>
<p>Then run <code>bundle</code> to install it.</p>
<p>Next, create a file called <code>.watchr</code> in your app's root folder and populate it with this code:</p>
<div class="highlight">
<pre><span class="k">def</span> <span class="nf">run_spec</span><span class="p">(</span><span class="n">file</span><span class="p">)</span>
  <span class="k">unless</span> <span class="no">File</span><span class="o">.</span><span class="n">exist?</span><span class="p">(</span><span class="n">file</span><span class="p">)</span>
    <span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">file</span><span class="si">}</span><span class="s2"> does not exist&quot;</span>
    <span class="k">return</span>
  <span class="k">end</span>

  <span class="nb">puts</span> <span class="s2">&quot;Running </span><span class="si">#{</span><span class="n">file</span><span class="si">}</span><span class="s2">&quot;</span>
  <span class="nb">system</span> <span class="s2">&quot;bundle exec rspec </span><span class="si">#{</span><span class="n">file</span><span class="si">}</span><span class="s2">&quot;</span>
  <span class="nb">puts</span>
<span class="k">end</span>

<span class="n">watch</span><span class="p">(</span><span class="s2">&quot;spec/.*/*_spec\.rb&quot;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">match</span><span class="o">|</span>
  <span class="n">run_spec</span> <span class="n">match</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
<span class="k">end</span>

<span class="n">watch</span><span class="p">(</span><span class="s2">&quot;app/(.*/.*)\.rb&quot;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">match</span><span class="o">|</span>
  <span class="n">run_spec</span> <span class="sx">%{spec/</span><span class="si">#{</span><span class="n">match</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span><span class="si">}</span><span class="sx">_spec.rb}</span>
<span class="k">end</span>
</pre>
</div>
<p>This 'watchr script' directs a running watchr process to do a few things:</p>
<ul>
<li>If any file ending in <code>_spec.rb</code> under the <code>spec/</code> directory changes, run the <code>run_spec</code> method with its filename.</li>
<li>If any <code>.rb</code> file under the <code>app/</code> directory changes, call the <code>run_spec</code> method with an equivalently named <code>_spec.rb</code> file under <code>spec</code>.</li>
<li><code>run_file</code> accepts a filename for a spec file, checks it exists, and tells the system to run it (using <code>system</code>)</li>
</ul>
<p>If you now run <code>watchr .watchr</code> to use the <code>.watchr</code> script, not much will happen. But if you make any change (or even just re-save) to, say, <code>spec/models/person_spec.rb</code>, that spec will run automatically. Make a change to <code>app/models/person.rb</code> and it's the same deal. To stop watchr, CTRL+C saves the day.</p>
<p>Watchr can be used for a lot more than this but this is just for starters ;-)</p>
<p>Optionally, you might also like to create <code>lib/tasks/watchr.rake</code> and include the following code so you can just remember to run <code>rake watchr</code> instead (it's nice to have anything you run within a project contained in one place):</p>
<div class="highlight">
<pre><span class="n">desc</span> <span class="s2">&quot;Run watchr&quot;</span>
<span class="n">task</span> <span class="ss">:watchr</span> <span class="k">do</span>
  <span class="n">sh</span> <span class="sx">%{bundle exec watchr .watchr}</span>
<span class="k">end</span>
</pre>
</div>
<h3>How to get faster spec runs with Spork</h3>
<p>We've got Rails 3 running with RSpec 2 and watchr's giving us some automatically-running-spec love. But do you notice how slow it is? Specs run quickly once they're loaded but there are several seconds of waiting beforehand.</p>
<p><img src="http://www.rubyinside.com/wp-content/uploads/2011/02/yslow.png" alt="" title="yslow" width="130" height="106" style="float: right; margin-left: 18px" />If you run <code>time rake spec:models</code> with Ruby 1.9.2, you'll probably see a wallclock time of over 5 seconds (5.204s on my machine and I'm SSDed up) - holy splingledoops! If not, you're lucky, but it's <a href="http://groups.google.com/group/rubyonrails-core/browse_thread/thread/88519ef5a53088a1/c01ba447c6dc0de7?lnk=raot">a commonly reported problem</a> with some improvements expected in Ruby 1.9.3. We can't wait that long though..</p>
<p>Enter <a href="https://github.com/timcharper/spork">Spork</a>. Spork is a tool that loads the Rails environment and then <em>forks</em> each time you want to run some specs (or tests, it can be set up to run with <code>Test::Unit</code> too). In this way, the whole Rails initialization process is skipped, shaving valuable seconds off of your spec runs.</p>
<p><img src="http://www.rubyinside.com/wp-content/uploads/2011/02/horriblediagram1.png" alt="" title="horriblediagram" width="250" height="211" class="alignnone size-full wp-image-4414" style="float: right; margin-left: 16px; margin-bottom: 8px" />Edit your <code>Gemfile</code> again and include Spork:</p>
<pre>gem 'spork', '~> 0.9.0.rc'</pre>
<p>Run <code>bundle</code> to install Spork.</p>
<p>Next, Spork needs to make some changes to your <code>spec/spec_helper.rb</code> file. Because it only initializes the Rails environment once and then forks it, you might have initialization features that you <em>need</em> to run on each test run. Spork will let you do this but it needs to make those changes first. Run:</p>
<pre>spork --bootstrap</pre>
<p>The result:</p>
<pre>Using RSpec
Bootstrapping /Users/peter/dev/rails/myapp/spec/spec_helper.rb.
Done. Edit /Users/peter/dev/rails/myapp/spec/spec_helper.rb now with your favorite text editor and follow the instructions.</pre>
<p>Bring up <code>spec/spec_helper.rb</code>. All <code>spork --bootstrap</code> has done is add some extra code to the top of the file. Read the comments there to get a better feel for what to do and what Spork requires and keep them in mind as we progress (in case you want to do something differently).</p>
<p>Get rid of <code>require 'rubygems'</code> from the first line - we're using Bundler so it's not necessary.</p>
<p>Next, <em>cut</em> and paste all of the 'old' contents of <code>spec_helper.rb</code> into the <code>Spork.prefork</code> block. Since we're running an empty(ish) project, there's nothing special we've added that we need to run on each run using the <code>Spork.each_run</code> block. We can leave that empty.</p>
<p>You'll end up with a <code>spec_helper.rb</code> file that looks like this:</p>
<div class="highlight">
<pre><span class="nb">require</span> <span class="s1">&#39;spork&#39;</span>

<span class="no">Spork</span><span class="o">.</span><span class="n">prefork</span> <span class="k">do</span>
  <span class="c1"># Loading more in this block will cause your tests to run faster. However, </span>
  <span class="c1"># if you change any configuration or code from libraries loaded here, you&#39;ll</span>
  <span class="c1"># need to restart spork for it take effect.</span>
  <span class="c1"># This file is copied to spec/ when you run &#39;rails generate rspec:install&#39;</span>
  <span class="no">ENV</span><span class="o">[</span><span class="s2">&quot;RAILS_ENV&quot;</span><span class="o">]</span> <span class="o">||=</span> <span class="s1">&#39;test&#39;</span>
  <span class="nb">require</span> <span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="s2">&quot;../../config/environment&quot;</span><span class="p">,</span> <span class="bp">__FILE__</span><span class="p">)</span>
  <span class="nb">require</span> <span class="s1">&#39;rspec/rails&#39;</span>

  <span class="c1"># Requires supporting ruby files with custom matchers and macros, etc,</span>
  <span class="c1"># in spec/support/ and its subdirectories.</span>
  <span class="no">Dir</span><span class="o">[</span><span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot;spec/support/**/*.rb&quot;</span><span class="p">)</span><span class="o">].</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="nb">require</span> <span class="n">f</span><span class="p">}</span>

  <span class="no">RSpec</span><span class="o">.</span><span class="n">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
    <span class="c1"># == Mock Framework</span>
    <span class="c1">#</span>
    <span class="c1"># If you prefer to use mocha, flexmock or RR, uncomment the appropriate line:</span>
    <span class="c1">#</span>
    <span class="c1"># config.mock_with :mocha</span>
    <span class="c1"># config.mock_with :flexmock</span>
    <span class="c1"># config.mock_with :rr</span>
    <span class="n">config</span><span class="o">.</span><span class="n">mock_with</span> <span class="ss">:rspec</span>

    <span class="c1"># Remove this line if you&#39;re not using ActiveRecord or ActiveRecord fixtures</span>
    <span class="n">config</span><span class="o">.</span><span class="n">fixture_path</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="o">::</span><span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="si">}</span><span class="s2">/spec/fixtures&quot;</span>

    <span class="c1"># If you&#39;re not using ActiveRecord, or you&#39;d prefer not to run each of your</span>
    <span class="c1"># examples within a transaction, remove the following line or assign false</span>
    <span class="c1"># instead of true.</span>
    <span class="n">config</span><span class="o">.</span><span class="n">use_transactional_fixtures</span> <span class="o">=</span> <span class="kp">true</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="no">Spork</span><span class="o">.</span><span class="n">each_run</span> <span class="k">do</span>
  <span class="c1"># This code will be run each time you run your specs.</span>
<span class="k">end</span>
</pre>
</div>
<p>Head back to your shell and the root of your project and run <code>spork</code>:</p>
<pre>Using RSpec
Loading Spork.prefork block...
Spork is ready and listening on 8989!</pre>
<p>Now we're cooking with gas. Open another shell, head to the root of your project, and run <code>watchr .watchr</code> too. Then head to <code>spec/models/person_spec.rb</code> in your text editor and re-save it (or even make a change if you want). Your specs run but.. they're no faster! What's wrong?</p>
<p>It turns out we need to make another change so that RSpec knows we're running Spork. Edit the <code>.rspec</code> file (mentioned earlier) and add <code>--drb</code> to the line (so it probably reads <code>--colour --drb</code>). <em>Now</em>, edit the spec again, save, and.. fast!</p>
<p>You should note that if you use <code>rake</code> at this point to run your entire suite, it'll still not be particularly fast because <em>rake</em> itself is initializing Rails in order to do its job. But if you want to run your entire suite quickly, just run:</p>
<pre>rspec spec</pre>
<p>With our dummy app and on my machine, this runs in a wallclock time of 0.759s - a serious improvement over 5.2 seconds.</p>
<p>We have Rails 3, RSpec 2, watchr, spork, and SUPER-DUPER FAST SPECS all running on Ruby 1.9.2. Score!</p>
<p>A minor snafu will remain, though. If you update <code>app/models/person.rb</code>, the change won't take effect in your tests since Spork has the <em>old</em> <code>Person</code> still in memory. One way around this is to edit <code>config/environments/test.rb</code> and change:</p>
<pre>config.cache_classes = true</pre>
<p>To:</p>
<pre>config.cache_classes = false</pre>
<p>Now your app's classes are reloaded when necessary.</p>
<p><center><img src="http://www.rubyinside.com/wp-content/uploads/2011/02/awyeah.jpeg" alt="" title="awyeah" width="348" height="232" style="text-align: center; margin-left: auto; margin-right: auto" /></center></p>
<div class="feedflare">
<a href="http://feeds.feedburner.com/~ff/RubyInside?a=9kQfKhEconY:MOU_srPkVJM:qj6IDK7rITs"><img src="http://feeds.feedburner.com/~ff/RubyInside?d=qj6IDK7rITs" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/RubyInside?a=9kQfKhEconY:MOU_srPkVJM:3H-1DwQop_U"><img src="http://feeds.feedburner.com/~ff/RubyInside?i=9kQfKhEconY:MOU_srPkVJM:3H-1DwQop_U" border="0"></img></a>
</div><img src="http://feeds.feedburner.com/~r/RubyInside/~4/9kQfKhEconY" height="1" width="1"/>";s:7:"attribs";a:2:{s:0:"";a:1:{s:4:"type";s:4:"html";}s:36:"http://www.w3.org/XML/1998/namespace";a:1:{s:4:"base";s:62:"http://www.rubyinside.com/how-to-rails-3-and-rspec-2-4336.html";}}s:8:"xml_base";s:62:"http://www.rubyinside.com/how-to-rails-3-and-rspec-2-4336.html";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}}s:38:"http://purl.org/syndication/thread/1.0";a:1:{s:5:"total";a:1:{i:0;a:5:{s:4:"data";s:2:"10";s:7:"attribs";a:0:{}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}}s:42:"http://rssnamespace.org/feedburner/ext/1.0";a:1:{s:8:"origLink";a:1:{i:0;a:5:{s:4:"data";s:62:"http://www.rubyinside.com/how-to-rails-3-and-rspec-2-4336.html";s:7:"attribs";a:0:{}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}}}}i:1;a:6:{s:4:"data";s:37:"
		
		
		
		
		
		
				
		
		
		
		
	";s:7:"attribs";a:0:{}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";s:5:"child";a:3:{s:27:"http://www.w3.org/2005/Atom";a:9:{s:6:"author";a:1:{i:0;a:6:{s:4:"data";s:17:"
			
						
					";s:7:"attribs";a:0:{}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";s:5:"child";a:1:{s:27:"http://www.w3.org/2005/Atom";a:2:{s:4:"name";a:1:{i:0;a:5:{s:4:"data";s:12:"Peter Cooper";s:7:"attribs";a:0:{}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}s:3:"uri";a:1:{i:0;a:5:{s:4:"data";s:25:"http://twitter.com/peterc";s:7:"attribs";a:0:{}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}}}}}s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:85:"Two Security Vulnerabilities Force 3 New Releases of MRI Ruby 1.8.7, 1.9.1, and 1.9.2";s:7:"attribs";a:1:{s:0:"";a:1:{s:4:"type";s:4:"html";}}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}s:4:"link";a:3:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"rel";s:9:"alternate";s:4:"type";s:9:"text/html";s:4:"href";s:150:"http://feedproxy.google.com/~r/RubyInside/~3/FyIShGEDivc/two-security-vulnerabilities-force-3-new-releases-of-mri-ruby-1-8-7-1-9-1-and-1-9-2-4323.html";}}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}i:1;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:2:{s:0:"";a:3:{s:3:"rel";s:7:"replies";s:4:"type";s:9:"text/html";s:4:"href";s:128:"http://www.rubyinside.com/two-security-vulnerabilities-force-3-new-releases-of-mri-ruby-1-8-7-1-9-1-and-1-9-2-4323.html#comments";}s:38:"http://purl.org/syndication/thread/1.0";a:1:{s:5:"count";s:1:"4";}}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}i:2;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:2:{s:0:"";a:3:{s:3:"rel";s:7:"replies";s:4:"type";s:20:"application/atom+xml";s:4:"href";s:129:"http://www.rubyinside.com/two-security-vulnerabilities-force-3-new-releases-of-mri-ruby-1-8-7-1-9-1-and-1-9-2-4323.html/feed/atom";}s:38:"http://purl.org/syndication/thread/1.0";a:1:{s:5:"count";s:1:"4";}}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}s:2:"id";a:1:{i:0;a:5:{s:4:"data";s:33:"http://www.rubyinside.com/?p=4323";s:7:"attribs";a:0:{}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}s:7:"updated";a:1:{i:0;a:5:{s:4:"data";s:20:"2011-02-19T02:05:32Z";s:7:"attribs";a:0:{}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}s:9:"published";a:1:{i:0;a:5:{s:4:"data";s:20:"2011-02-19T02:05:32Z";s:7:"attribs";a:0:{}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}s:8:"category";a:1:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:2:{s:6:"scheme";s:25:"http://www.rubyinside.com";s:4:"term";s:4:"News";}}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}s:7:"summary";a:1:{i:0;a:5:{s:4:"data";s:1243:"<p><img src="http://www.rubyinside.com/wp-content/uploads/2011/02/arghhhh-150x150.png" alt="" title="arghhhh" width="100" class="alignleft size-thumbnail wp-image-4329" style="float: left; margin-right: 18px" />It's been a <em>dies horribilis</em> for MRI Ruby today with two new security vulnerabilities forcing the release of 3 new recommended production versions of the de facto official Ruby interpreter. The first, a vulnerability in <code>FileUtils.remove_entry_secure</code> affects both 1.8 and 1.9 branches, while the second, a $SAFE mode vulnerability, affects only 1.8.</p>
<h3>The FileUtils Vulnerability (1.8 and 1.9)</h3>
<p>Urabe Shyouhei of the Ruby core team has <a href="http://www.ruby-lang.org/en/news/2011/02/18/fileutils-is-vulnerable-to-symlink-race-attacks/">announced that FileUtils is vulnerable to symlink race attacks</a> and he's not talking about hate crimes. Ruby versions <em>including and prior</em> to Ruby 1.8.6p420, Ruby 1.8.7p330, Ruby 1.9.1p430 and Ruby 1.9.2p136 are affected so you're almost guaranteed to be affected.
 <div class="read_more"><a href="http://www.rubyinside.com/two-security-vulnerabilities-force-3-new-releases-of-mri-ruby-1-8-7-1-9-1-and-1-9-2-4323.html">Read More</a> &#187;</div></p>";s:7:"attribs";a:1:{s:0:"";a:1:{s:4:"type";s:4:"html";}}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}s:7:"content";a:1:{i:0;a:5:{s:4:"data";s:5214:"<p><img src="http://www.rubyinside.com/wp-content/uploads/2011/02/arghhhh-150x150.png" alt="" title="arghhhh" width="100" class="alignleft size-thumbnail wp-image-4329" style="float: left; margin-right: 18px" />It's been a <em>dies horribilis</em> for MRI Ruby today with two new security vulnerabilities forcing the release of 3 new recommended production versions of the de facto official Ruby interpreter. The first, a vulnerability in <code>FileUtils.remove_entry_secure</code> affects both 1.8 and 1.9 branches, while the second, a $SAFE mode vulnerability, affects only 1.8.</p>
<h3>The FileUtils Vulnerability (1.8 and 1.9)</h3>
<p>Urabe Shyouhei of the Ruby core team has <a href="http://www.ruby-lang.org/en/news/2011/02/18/fileutils-is-vulnerable-to-symlink-race-attacks/">announced that FileUtils is vulnerable to symlink race attacks</a> and he's not talking about hate crimes. Ruby versions <em>including and prior</em> to Ruby 1.8.6p420, Ruby 1.8.7p330, Ruby 1.9.1p430 and Ruby 1.9.2p136 are affected so you're almost guaranteed to be affected.</p>
<p>The problem is <a href="http://www.ruby-doc.org/stdlib/libdoc/fileutils/rdoc/classes/FileUtils.html#M000917">FileUtils#remove_entry_secure</a>, a method that was meant to be more secure than its sibling <code>FileUtils#remove_entry</code>. What the <code>remove_entry*</code> methods do is to 'remove' an entry in the local file system. The problem, though, is that <code>remove_entry_secure</code>'s security wasn't quite good enough and it could be used by local users to delete arbitrary files and directories. Not a great feature.</p>
<h3>The $SAFE Vulnerability (1.8 only)</h3>
<p>Ruby's <a href="http://www.ruby-doc.org/docs/ProgrammingRuby/html/taint.html">"safe levels"</a> provide a way for you to make the Ruby interpreter more "paranoid" about operations it can perform and the data it can process. There are five levels and they progressively lock down what Ruby will accept - particularly useful if it's necessary to consider all data to be tainted, for example.</p>
<p>This recent vulnerability plays on the fact that the <code>Exception</code> class can both accept and return a string. The bad part is that <code>Exception</code> wasn't respecting the safe level in terms of keeping the string <em>tainted.</em> Urabe Shyouhei provides this example:</p>
<div class="highlight">
<pre><span class="vg">$secret_path</span> <span class="o">=</span> <span class="s2">"foo"</span>

<span class="nb">proc</span> <span class="k">do</span>
    <span class="vg">$SAFE</span> <span class="o">=</span> <span class="mi">4</span>
    <span class="no">Exception</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="vg">$secret_path</span><span class="p">)</span><span class="o">.</span><span class="n">to_s</span>
    <span class="vg">$secret_path</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s2">"/etc/passwd"</span><span class="p">)</span>
<span class="k">end</span><span class="o">.</span><span class="n">call</span>

<span class="nb">open</span><span class="p">(</span><span class="vg">$secret_path</span><span class="p">)</span> <span class="k">do</span>
  <span class="c1"># do the dirty here</span>
<span class="k">end</span>
</pre>
</div>
<p>Thankfully, it only affects Ruby 1.8 (not Ruby 1.9) in the shape of Ruby 1.8.6p420 and earlier and Ruby 1.8.7p330 and earlier. The downside? That covers most Ruby 1.8 installs out there, including the default one with OS X. Get upgrading.</p>
<h3>The Solution - New Releases of Ruby</h3>
<p>Undoubtedly you have your own ways and means of doing upgrades (using RVM, for example) but Urabe has provided <a href="http://www.ruby-lang.org/en/news/2011/02/18/fileutils-is-vulnerable-to-symlink-race-attacks/">links</a> to the latest builds on the official MRI Ruby site if you want them. Repeated here:</p>
<p><strong>Ruby 1.8.7-p334:</strong> <a href="http://ftp.ruby-lang.org/pub/ruby/1.8/ruby-1.8.7-p334.tar.gz">http://ftp.ruby-lang.org/pub/ruby/1.8/ruby-1.8.7-p334.tar.gz</a><br />
<strong>Ruby 1.9.1-p431:</strong> <a href="http://ftp.ruby-lang.org/pub/ruby/1.9/ruby-1.9.1-p431.tar.gz">http://ftp.ruby-lang.org/pub/ruby/1.9/ruby-1.9.1-p431.tar.gz</a><br />
<strong>Ruby 1.9.2-p180:</strong> <a href="http://ftp.ruby-lang.org/pub/ruby/1.9/ruby-1.9.2-p180.tar.gz">http://ftp.ruby-lang.org/pub/ruby/1.9/ruby-1.9.2-p180.tar.gz</a></p>
<p>Last but not least, if you've been wondering why Ruby Inside hasn't updated for two weeks, I have some explaining to do and.. it'll be in a post of its own very soon ;-) Meanwhile, check out <a href="http://www.rubyflow.com/">RubyFlow's snazzy new design!</a></p>
<div class="feedflare">
<a href="http://feeds.feedburner.com/~ff/RubyInside?a=FyIShGEDivc:f7jVRWDaIbg:qj6IDK7rITs"><img src="http://feeds.feedburner.com/~ff/RubyInside?d=qj6IDK7rITs" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/RubyInside?a=FyIShGEDivc:f7jVRWDaIbg:3H-1DwQop_U"><img src="http://feeds.feedburner.com/~ff/RubyInside?i=FyIShGEDivc:f7jVRWDaIbg:3H-1DwQop_U" border="0"></img></a>
</div><img src="http://feeds.feedburner.com/~r/RubyInside/~4/FyIShGEDivc" height="1" width="1"/>";s:7:"attribs";a:2:{s:0:"";a:1:{s:4:"type";s:4:"html";}s:36:"http://www.w3.org/XML/1998/namespace";a:1:{s:4:"base";s:119:"http://www.rubyinside.com/two-security-vulnerabilities-force-3-new-releases-of-mri-ruby-1-8-7-1-9-1-and-1-9-2-4323.html";}}s:8:"xml_base";s:119:"http://www.rubyinside.com/two-security-vulnerabilities-force-3-new-releases-of-mri-ruby-1-8-7-1-9-1-and-1-9-2-4323.html";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}}s:38:"http://purl.org/syndication/thread/1.0";a:1:{s:5:"total";a:1:{i:0;a:5:{s:4:"data";s:1:"4";s:7:"attribs";a:0:{}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}}s:42:"http://rssnamespace.org/feedburner/ext/1.0";a:1:{s:8:"origLink";a:1:{i:0;a:5:{s:4:"data";s:119:"http://www.rubyinside.com/two-security-vulnerabilities-force-3-new-releases-of-mri-ruby-1-8-7-1-9-1-and-1-9-2-4323.html";s:7:"attribs";a:0:{}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}}}}i:2;a:6:{s:4:"data";s:37:"
		
		
		
		
		
		
				
		
		
		
		
	";s:7:"attribs";a:0:{}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";s:5:"child";a:3:{s:27:"http://www.w3.org/2005/Atom";a:9:{s:6:"author";a:1:{i:0;a:6:{s:4:"data";s:17:"
			
						
					";s:7:"attribs";a:0:{}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";s:5:"child";a:1:{s:27:"http://www.w3.org/2005/Atom";a:2:{s:4:"name";a:1:{i:0;a:5:{s:4:"data";s:12:"Peter Cooper";s:7:"attribs";a:0:{}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}s:3:"uri";a:1:{i:0;a:5:{s:4:"data";s:25:"http://twitter.com/peterc";s:7:"attribs";a:0:{}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}}}}}s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:50:"Thanking Ruby Inside&#8217;s January 2011 Sponsors";s:7:"attribs";a:1:{s:0:"";a:1:{s:4:"type";s:4:"html";}}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}s:4:"link";a:3:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"rel";s:9:"alternate";s:4:"type";s:9:"text/html";s:4:"href";s:110:"http://feedproxy.google.com/~r/RubyInside/~3/-q_MXzl6pa8/thanking-ruby-insides-january-2011-sponsors-4246.html";}}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}i:1;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:2:{s:0:"";a:3:{s:3:"rel";s:7:"replies";s:4:"type";s:9:"text/html";s:4:"href";s:88:"http://www.rubyinside.com/thanking-ruby-insides-january-2011-sponsors-4246.html#comments";}s:38:"http://purl.org/syndication/thread/1.0";a:1:{s:5:"count";s:1:"7";}}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}i:2;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:2:{s:0:"";a:3:{s:3:"rel";s:7:"replies";s:4:"type";s:20:"application/atom+xml";s:4:"href";s:89:"http://www.rubyinside.com/thanking-ruby-insides-january-2011-sponsors-4246.html/feed/atom";}s:38:"http://purl.org/syndication/thread/1.0";a:1:{s:5:"count";s:1:"7";}}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}s:2:"id";a:1:{i:0;a:5:{s:4:"data";s:33:"http://www.rubyinside.com/?p=4246";s:7:"attribs";a:0:{}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}s:7:"updated";a:1:{i:0;a:5:{s:4:"data";s:20:"2011-02-03T04:34:56Z";s:7:"attribs";a:0:{}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}s:9:"published";a:1:{i:0;a:5:{s:4:"data";s:20:"2011-02-03T04:33:29Z";s:7:"attribs";a:0:{}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}s:8:"category";a:2:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:2:{s:6:"scheme";s:25:"http://www.rubyinside.com";s:4:"term";s:13:"Miscellaneous";}}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}i:1;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:2:{s:6:"scheme";s:25:"http://www.rubyinside.com";s:4:"term";s:7:"notweet";}}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}s:7:"summary";a:1:{i:0;a:5:{s:4:"data";s:793:"<p>It's time for us to thank the companies who help to keep Ruby Inside going by kindly sponsoring our work. So.. thank you! (And thank you for reading too, naturally.)</p>
<h3>Red Dirt Ruby Conference - April 21-22, 2011 (Oklahoma City)</h3>
<p>The <a href="http://engine.adzerk.net/redirect/0/3179/3005/1313/6ceb66850ab2436caccd9d0375aacad3/19/24/3543/634323040639640186?keywords=">Red Dirt Ruby Conference</a> is a Ruby conference taking place in Oklahoma City this April. It's shaping up to be a great event with keynotes from Aaron Patterson (Nokogiri) and Dr Nic Williams (Engine Yard). Expect sunny weather with temperatures in the low 70s..
 <div class="read_more"><a href="http://www.rubyinside.com/thanking-ruby-insides-january-2011-sponsors-4246.html">Read More</a> &#187;</div></p>";s:7:"attribs";a:1:{s:0:"";a:1:{s:4:"type";s:4:"html";}}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}s:7:"content";a:1:{i:0;a:5:{s:4:"data";s:2608:"<p>It's time for us to thank the companies who help to keep Ruby Inside going by kindly sponsoring our work. So.. thank you! (And thank you for reading too, naturally.)</p>
<h3>Red Dirt Ruby Conference - April 21-22, 2011 (Oklahoma City)</h3>
<p>The <a href="http://engine.adzerk.net/redirect/0/3179/3005/1313/6ceb66850ab2436caccd9d0375aacad3/19/24/3543/634323040639640186?keywords=">Red Dirt Ruby Conference</a> is a Ruby conference taking place in Oklahoma City this April. It's shaping up to be a great event with keynotes from Aaron Patterson (Nokogiri) and Dr Nic Williams (Engine Yard). Expect sunny weather with temperatures in the low 70s..</p>
<h3>Spreadable - Viral Marketing Tools for your Apps</h3>
<p><a href="http://engine.adzerk.net/redirect/0/3126/2952/1313/85766cb05a5245c0b7b7980b55224ca0/19/24/3398/634312088369843266?keywords=">Spreadable</a> is a powerful 'tell a friend' referral tool you can easily plug into your site. It brings your app powerful viral social tools you and your users can use to spread the word about your work.</p>
<h3>Jaconda - A Chat System for Project Teams</h3>
<p><a href="http://engine.adzerk.net/redirect/0/3128/2954/1313/fc6773af6f384b7186b7ca87733e02fd/19/24/3400/634312088369843266">Jaconda</a> is a chat system designed for teams working on projects. It works from the browser, your IM app, or your phone, and lets you chat, share files, and keep up with tickets and project activity you can have sent automatically to your rooms.</p>
<h3>New Relic — On-demand Application Management</h3>
<p><a href="http://www.newrelic.com/RPMlite-rails.html?utm_source=rubyinside&amp;utm_medium=banner&amp;utm_content=125x125&amp;utm_campaign=rpm">New Relic</a> is a Java and Ruby (and now PHP too!) application performance and reliability monitoring and management service that started life as a Rails-only service. With New Relic you can monitor your apps, find slow transactions, see specific SQL queries, and even run a code-level thread profile.</p>
<p><em>Trivia I Always Love To Point Out: New Relic is an anagram of founder "Lew Cirne"'s name!</em></p>
<div class="feedflare">
<a href="http://feeds.feedburner.com/~ff/RubyInside?a=-q_MXzl6pa8:dARA9ByJGu8:qj6IDK7rITs"><img src="http://feeds.feedburner.com/~ff/RubyInside?d=qj6IDK7rITs" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/RubyInside?a=-q_MXzl6pa8:dARA9ByJGu8:3H-1DwQop_U"><img src="http://feeds.feedburner.com/~ff/RubyInside?i=-q_MXzl6pa8:dARA9ByJGu8:3H-1DwQop_U" border="0"></img></a>
</div><img src="http://feeds.feedburner.com/~r/RubyInside/~4/-q_MXzl6pa8" height="1" width="1"/>";s:7:"attribs";a:2:{s:0:"";a:1:{s:4:"type";s:4:"html";}s:36:"http://www.w3.org/XML/1998/namespace";a:1:{s:4:"base";s:79:"http://www.rubyinside.com/thanking-ruby-insides-january-2011-sponsors-4246.html";}}s:8:"xml_base";s:79:"http://www.rubyinside.com/thanking-ruby-insides-january-2011-sponsors-4246.html";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}}s:38:"http://purl.org/syndication/thread/1.0";a:1:{s:5:"total";a:1:{i:0;a:5:{s:4:"data";s:1:"7";s:7:"attribs";a:0:{}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}}s:42:"http://rssnamespace.org/feedburner/ext/1.0";a:1:{s:8:"origLink";a:1:{i:0;a:5:{s:4:"data";s:79:"http://www.rubyinside.com/thanking-ruby-insides-january-2011-sponsors-4246.html";s:7:"attribs";a:0:{}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}}}}i:3;a:6:{s:4:"data";s:37:"
		
		
		
		
		
		
				
		
		
		
		
	";s:7:"attribs";a:0:{}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";s:5:"child";a:3:{s:27:"http://www.w3.org/2005/Atom";a:9:{s:6:"author";a:1:{i:0;a:6:{s:4:"data";s:17:"
			
						
					";s:7:"attribs";a:0:{}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";s:5:"child";a:1:{s:27:"http://www.w3.org/2005/Atom";a:2:{s:4:"name";a:1:{i:0;a:5:{s:4:"data";s:12:"Peter Cooper";s:7:"attribs";a:0:{}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}s:3:"uri";a:1:{i:0;a:5:{s:4:"data";s:25:"http://twitter.com/peterc";s:7:"attribs";a:0:{}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}}}}}s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:48:"RubyGems 1.5.0 Released: Now Supports Ruby 1.9.2";s:7:"attribs";a:1:{s:0:"";a:1:{s:4:"type";s:4:"html";}}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}s:4:"link";a:3:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"rel";s:9:"alternate";s:4:"type";s:9:"text/html";s:4:"href";s:114:"http://feedproxy.google.com/~r/RubyInside/~3/vE86DE54JM0/rubygems-1-5-0-released-now-supports-ruby-1-9-2-4240.html";}}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}i:1;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:2:{s:0:"";a:3:{s:3:"rel";s:7:"replies";s:4:"type";s:9:"text/html";s:4:"href";s:92:"http://www.rubyinside.com/rubygems-1-5-0-released-now-supports-ruby-1-9-2-4240.html#comments";}s:38:"http://purl.org/syndication/thread/1.0";a:1:{s:5:"count";s:2:"10";}}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}i:2;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:2:{s:0:"";a:3:{s:3:"rel";s:7:"replies";s:4:"type";s:20:"application/atom+xml";s:4:"href";s:93:"http://www.rubyinside.com/rubygems-1-5-0-released-now-supports-ruby-1-9-2-4240.html/feed/atom";}s:38:"http://purl.org/syndication/thread/1.0";a:1:{s:5:"count";s:2:"10";}}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}s:2:"id";a:1:{i:0;a:5:{s:4:"data";s:83:"http://www.rubyinside.com/rubygems-1-5-0-released-now-supports-ruby-1-9-2-4240.html";s:7:"attribs";a:0:{}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}s:7:"updated";a:1:{i:0;a:5:{s:4:"data";s:20:"2011-02-13T04:38:43Z";s:7:"attribs";a:0:{}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}s:9:"published";a:1:{i:0;a:5:{s:4:"data";s:20:"2011-02-01T02:33:52Z";s:7:"attribs";a:0:{}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}s:8:"category";a:2:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:2:{s:6:"scheme";s:25:"http://www.rubyinside.com";s:4:"term";s:4:"News";}}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}i:1;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:2:{s:6:"scheme";s:25:"http://www.rubyinside.com";s:4:"term";s:5:"Tools";}}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}s:7:"summary";a:1:{i:0;a:5:{s:4:"data";s:999:"<p><img src="http://www.rubyinside.com/wp-content/uploads/2011/02/rubygems.png" width="98" height="98" alt="rubygems.png" style="float:left; margin-right:12px; margin-bottom:12px;" />Ryan Davis has <a href="http://blog.zenspider.com/2011/01/rubygems-update-150-released.html">announced the release of RubyGems 1.5.0</a>. It comes just a month after the <a href="http://blog.zenspider.com/2010/12/rubygems-version-140-has-been.html">release of 1.4</a> which, notoriously, didn't work with Ruby 1.9.2. These problems have now all been ironed out and Ruby 1.8 and 1.9 users alike can safely upgrade (fingers crossed).</p>
<p>RubyGems is the popular (and official - as of Ruby 1.9) Ruby package manager with which most significant Ruby libraries and tools are distributed. The 1.5 release sees it pick up a few bug fixes and some enhancements, including.
 <div class="read_more"><a href="http://www.rubyinside.com/rubygems-1-5-0-released-now-supports-ruby-1-9-2-4240.html">Read More</a> &#187;</div></p>";s:7:"attribs";a:1:{s:0:"";a:1:{s:4:"type";s:4:"html";}}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}s:7:"content";a:1:{i:0;a:5:{s:4:"data";s:3002:"<p><img src="http://www.rubyinside.com/wp-content/uploads/2011/02/rubygems.png" width="98" height="98" alt="rubygems.png" style="float:left; margin-right:12px; margin-bottom:12px;" />Ryan Davis has <a href="http://blog.zenspider.com/2011/01/rubygems-update-150-released.html">announced the release of RubyGems 1.5.0</a>. It comes just a month after the <a href="http://blog.zenspider.com/2010/12/rubygems-version-140-has-been.html">release of 1.4</a> which, notoriously, didn't work with Ruby 1.9.2. These problems have now all been ironed out and Ruby 1.8 and 1.9 users alike can safely upgrade (fingers crossed).</p>
<p>RubyGems is the popular (and official - as of Ruby 1.9) Ruby package manager with which most significant Ruby libraries and tools are distributed. The 1.5 release sees it pick up a few bug fixes and some enhancements, including:</p>
<ul>
<li>Ruby 1.9 support</li>
<li>Post-build hooks that can cancel the gem install</li>
<li><code>Gem.find_files</code> is now 40% faster (on Ruby 1.9)</li>
<li>Better errors for corrupt Gem files, including paths</li>
<li>A new <a href="https://github.com/rubygems/rubygems/blob/master/UPGRADING.rdoc">UPGRADING documentation file</a> to help with Ruby 1.9-related issues</li>
<li><code>gem update</code> no longer erroneously tries to update RubyGems itself by default</li>
</ul>
<p>To upgrade to RubyGems 1.5.0, run:</p>
<pre><code>gem update --system</code></pre>
<p>Alternatively, you can learn more in the new <a href="https://github.com/rubygems/rubygems/blob/master/UPGRADING.rdoc">UPGRADING documentation</a>, or if you don't already have RubyGems for some reason, you can <a href="https://rubygems.org/pages/download">download it from RubyGems.org</a>.</p>
<p><em><strong>UPDATE:</strong> <strike>RubyGems 1.5.0 and Bundler are not the best of friends! If you're depending on Bundler tonight, don't install RubyGems 1.5.0 just yet. However, a 1.5 compatible version of Bundler is due within the next 24 hours.</strike> A new version of Bundler has been released, supporting RubyGems 1.5.0. Upgrade now :-)</em></p>
<p class="s" style="padding: 8px; background-color: #ff9"><em>[ad]</em> <a href="http://engine.adzerk.net/redirect/0/3126/2952/1313/85766cb05a5245c0b7b7980b55224ca0/19/24/3398/634312088369843266?keywords=">Spreadable</a> is a powerful 'tell a friend' referral tool you can easily plug into your site. It brings your app powerful viral social tools you and your users can use to spread the word about your work.</p>
<div class="feedflare">
<a href="http://feeds.feedburner.com/~ff/RubyInside?a=vE86DE54JM0:BzavB8TFU4Q:qj6IDK7rITs"><img src="http://feeds.feedburner.com/~ff/RubyInside?d=qj6IDK7rITs" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/RubyInside?a=vE86DE54JM0:BzavB8TFU4Q:3H-1DwQop_U"><img src="http://feeds.feedburner.com/~ff/RubyInside?i=vE86DE54JM0:BzavB8TFU4Q:3H-1DwQop_U" border="0"></img></a>
</div><img src="http://feeds.feedburner.com/~r/RubyInside/~4/vE86DE54JM0" height="1" width="1"/>";s:7:"attribs";a:2:{s:0:"";a:1:{s:4:"type";s:4:"html";}s:36:"http://www.w3.org/XML/1998/namespace";a:1:{s:4:"base";s:83:"http://www.rubyinside.com/rubygems-1-5-0-released-now-supports-ruby-1-9-2-4240.html";}}s:8:"xml_base";s:83:"http://www.rubyinside.com/rubygems-1-5-0-released-now-supports-ruby-1-9-2-4240.html";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}}s:38:"http://purl.org/syndication/thread/1.0";a:1:{s:5:"total";a:1:{i:0;a:5:{s:4:"data";s:2:"10";s:7:"attribs";a:0:{}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}}s:42:"http://rssnamespace.org/feedburner/ext/1.0";a:1:{s:8:"origLink";a:1:{i:0;a:5:{s:4:"data";s:83:"http://www.rubyinside.com/rubygems-1-5-0-released-now-supports-ruby-1-9-2-4240.html";s:7:"attribs";a:0:{}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}}}}i:4;a:6:{s:4:"data";s:37:"
		
		
		
		
		
		
				
		
		
		
		
	";s:7:"attribs";a:0:{}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";s:5:"child";a:3:{s:27:"http://www.w3.org/2005/Atom";a:9:{s:6:"author";a:1:{i:0;a:6:{s:4:"data";s:17:"
			
						
					";s:7:"attribs";a:0:{}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";s:5:"child";a:1:{s:27:"http://www.w3.org/2005/Atom";a:2:{s:4:"name";a:1:{i:0;a:5:{s:4:"data";s:12:"Peter Cooper";s:7:"attribs";a:0:{}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}s:3:"uri";a:1:{i:0;a:5:{s:4:"data";s:25:"http://twitter.com/peterc";s:7:"attribs";a:0:{}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}}}}}s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:62:"Clever Algorithms: A Free Book of Nature-Inspired Ruby Recipes";s:7:"attribs";a:1:{s:0:"";a:1:{s:4:"type";s:4:"html";}}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}s:4:"link";a:3:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"rel";s:9:"alternate";s:4:"type";s:9:"text/html";s:4:"href";s:128:"http://feedproxy.google.com/~r/RubyInside/~3/aJ1cgmODpTk/clever-algorithms-a-free-book-of-nature-inspired-ruby-recipes-4227.html";}}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}i:1;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:2:{s:0:"";a:3:{s:3:"rel";s:7:"replies";s:4:"type";s:9:"text/html";s:4:"href";s:106:"http://www.rubyinside.com/clever-algorithms-a-free-book-of-nature-inspired-ruby-recipes-4227.html#comments";}s:38:"http://purl.org/syndication/thread/1.0";a:1:{s:5:"count";s:1:"2";}}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}i:2;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:2:{s:0:"";a:3:{s:3:"rel";s:7:"replies";s:4:"type";s:20:"application/atom+xml";s:4:"href";s:107:"http://www.rubyinside.com/clever-algorithms-a-free-book-of-nature-inspired-ruby-recipes-4227.html/feed/atom";}s:38:"http://purl.org/syndication/thread/1.0";a:1:{s:5:"count";s:1:"2";}}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}s:2:"id";a:1:{i:0;a:5:{s:4:"data";s:33:"http://www.rubyinside.com/?p=4227";s:7:"attribs";a:0:{}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}s:7:"updated";a:1:{i:0;a:5:{s:4:"data";s:20:"2011-02-13T05:58:20Z";s:7:"attribs";a:0:{}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}s:9:"published";a:1:{i:0;a:5:{s:4:"data";s:20:"2011-01-26T00:13:49Z";s:7:"attribs";a:0:{}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}s:8:"category";a:2:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:2:{s:6:"scheme";s:25:"http://www.rubyinside.com";s:4:"term";s:4:"Cool";}}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}i:1;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:2:{s:6:"scheme";s:25:"http://www.rubyinside.com";s:4:"term";s:4:"News";}}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}s:7:"summary";a:1:{i:0;a:5:{s:4:"data";s:982:"<p><a href="http://www.cleveralgorithms.com/"><img src="http://www.rubyinside.com/wp-content/uploads/2011/01/cleveralgorithms.png" width="177" height="267" alt="cleveralgorithms.png" style="float:right; margin-bottom:12px; margin-left:12px; border:1px #000000 solid;" /></a><a href="http://www.cleveralgorithms.com/">Clever Algorithms</a> is a newly released book by Jason Brownlee PhD that describes 45 algorithms from the Artificial Intelligence (AI) field with Ruby-based examples. It's well produced and, notably, <i>free</i> in its PDF and online formats. A print copy is available at a small cost.</p>
<p>The book kicks off with a chapter of background regarding AI and its problem domains and moves on to an array of algorithms in the probabilistic, neural networking, stochastic, swarm, and evolutionary spaces.
 <div class="read_more"><a href="http://www.rubyinside.com/clever-algorithms-a-free-book-of-nature-inspired-ruby-recipes-4227.html">Read More</a> &#187;</div></p>";s:7:"attribs";a:1:{s:0:"";a:1:{s:4:"type";s:4:"html";}}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}s:7:"content";a:1:{i:0;a:5:{s:4:"data";s:3229:"<p><a href="http://www.cleveralgorithms.com/"><img src="http://www.rubyinside.com/wp-content/uploads/2011/01/cleveralgorithms.png" width="177" height="267" alt="cleveralgorithms.png" style="float:right; margin-bottom:12px; margin-left:12px; border:1px #000000 solid;" /></a><a href="http://www.cleveralgorithms.com/">Clever Algorithms</a> is a newly released book by Jason Brownlee PhD that describes 45 algorithms from the Artificial Intelligence (AI) field with Ruby-based examples. It's well produced and, notably, <i>free</i> in its PDF and online formats. A print copy is available at a small cost.</p>
<p>The book kicks off with a chapter of background regarding AI and its problem domains and moves on to an array of algorithms in the probabilistic, neural networking, stochastic, swarm, and evolutionary spaces.</p>
<p>Ruby purists will note that even though the demonstrations are in Ruby, they're not very <i>Ruby like</i>. Classes are rarely defined and using methods defined in the <code>main</code> context as functions is the order of the day. Nonetheless, the book remains well written and interesting and the Ruby code - as generic as it is - will nonetheless help Rubyists get the idea behind many of the processes demonstrated.</p>
<blockquote class="stylized"><p>This book provides a handbook of algorithmic recipes from the fields of Metaheuristics, Biologically Inspired Computation and Computational Intelligence that have been described in a complete, consistent, and centralized manner. These standardized descriptions were carefully designed to be accessible, usable, and understandable.</p>
<p>Most of the algorithms described in this book were originally inspired by biological and natural systems, such as the adaptive capabilities of genetic evolution and the acquired immune system, and the foraging behaviors of birds, bees, ants and bacteria. An encyclopedic algorithm reference, this book is intended for research scientists, engineers, students, and interested amateurs.</p></blockquote>
<p><cite>Jason Brownlee</cite></p>
<p>Check out Jason's book at <a href="http://www.cleveralgorithms.com/">cleveralgorithms.com</a> and the <a href="https://github.com/jbrownlee/CleverAlgorithms">content and code are in this GitHub repository.</a></p>
<p class="s" style="padding: 8px; background-color: #ff9"><em>[ad]</em> <a href="http://engine.adzerk.net/redirect/0/3128/2954/1313/fc6773af6f384b7186b7ca87733e02fd/19/24/3400/634312088369843266">Jaconda</a> is a chat system designed for teams working on projects. It works from the browser, your IM app, or your phone, and lets you chat, share files, and keep up with tickets and project activity you can have sent automatically to your rooms.</p>
<div class="feedflare">
<a href="http://feeds.feedburner.com/~ff/RubyInside?a=aJ1cgmODpTk:beNsNUsHPq0:qj6IDK7rITs"><img src="http://feeds.feedburner.com/~ff/RubyInside?d=qj6IDK7rITs" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/RubyInside?a=aJ1cgmODpTk:beNsNUsHPq0:3H-1DwQop_U"><img src="http://feeds.feedburner.com/~ff/RubyInside?i=aJ1cgmODpTk:beNsNUsHPq0:3H-1DwQop_U" border="0"></img></a>
</div><img src="http://feeds.feedburner.com/~r/RubyInside/~4/aJ1cgmODpTk" height="1" width="1"/>";s:7:"attribs";a:2:{s:0:"";a:1:{s:4:"type";s:4:"html";}s:36:"http://www.w3.org/XML/1998/namespace";a:1:{s:4:"base";s:97:"http://www.rubyinside.com/clever-algorithms-a-free-book-of-nature-inspired-ruby-recipes-4227.html";}}s:8:"xml_base";s:97:"http://www.rubyinside.com/clever-algorithms-a-free-book-of-nature-inspired-ruby-recipes-4227.html";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}}s:38:"http://purl.org/syndication/thread/1.0";a:1:{s:5:"total";a:1:{i:0;a:5:{s:4:"data";s:1:"2";s:7:"attribs";a:0:{}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}}s:42:"http://rssnamespace.org/feedburner/ext/1.0";a:1:{s:8:"origLink";a:1:{i:0;a:5:{s:4:"data";s:97:"http://www.rubyinside.com/clever-algorithms-a-free-book-of-nature-inspired-ruby-recipes-4227.html";s:7:"attribs";a:0:{}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}}}}i:5;a:6:{s:4:"data";s:37:"
		
		
		
		
		
		
				
		
		
		
		
	";s:7:"attribs";a:0:{}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";s:5:"child";a:3:{s:27:"http://www.w3.org/2005/Atom";a:9:{s:6:"author";a:1:{i:0;a:6:{s:4:"data";s:17:"
			
						
					";s:7:"attribs";a:0:{}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";s:5:"child";a:1:{s:27:"http://www.w3.org/2005/Atom";a:2:{s:4:"name";a:1:{i:0;a:5:{s:4:"data";s:12:"Peter Cooper";s:7:"attribs";a:0:{}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}s:3:"uri";a:1:{i:0;a:5:{s:4:"data";s:25:"http://twitter.com/peterc";s:7:"attribs";a:0:{}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}}}}}s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:49:"Rails Ready: Ruby and Rails on Ubuntu in One Line";s:7:"attribs";a:1:{s:0:"";a:1:{s:4:"type";s:4:"html";}}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}s:4:"link";a:3:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"rel";s:9:"alternate";s:4:"type";s:9:"text/html";s:4:"href";s:115:"http://feedproxy.google.com/~r/RubyInside/~3/EaxgwBVjQx8/rails-ready-ruby-and-rails-on-ubuntu-in-one-line-4214.html";}}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}i:1;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:2:{s:0:"";a:3:{s:3:"rel";s:7:"replies";s:4:"type";s:9:"text/html";s:4:"href";s:93:"http://www.rubyinside.com/rails-ready-ruby-and-rails-on-ubuntu-in-one-line-4214.html#comments";}s:38:"http://purl.org/syndication/thread/1.0";a:1:{s:5:"count";s:1:"6";}}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}i:2;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:2:{s:0:"";a:3:{s:3:"rel";s:7:"replies";s:4:"type";s:20:"application/atom+xml";s:4:"href";s:94:"http://www.rubyinside.com/rails-ready-ruby-and-rails-on-ubuntu-in-one-line-4214.html/feed/atom";}s:38:"http://purl.org/syndication/thread/1.0";a:1:{s:5:"count";s:1:"6";}}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}s:2:"id";a:1:{i:0;a:5:{s:4:"data";s:33:"http://www.rubyinside.com/?p=4214";s:7:"attribs";a:0:{}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}s:7:"updated";a:1:{i:0;a:5:{s:4:"data";s:20:"2011-01-26T23:00:46Z";s:7:"attribs";a:0:{}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}s:9:"published";a:1:{i:0;a:5:{s:4:"data";s:20:"2011-01-21T20:20:06Z";s:7:"attribs";a:0:{}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}s:8:"category";a:2:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:2:{s:6:"scheme";s:25:"http://www.rubyinside.com";s:4:"term";s:14:"Linux Specific";}}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}i:1;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:2:{s:6:"scheme";s:25:"http://www.rubyinside.com";s:4:"term";s:5:"Tools";}}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}s:7:"summary";a:1:{i:0;a:5:{s:4:"data";s:1295:"<p><a href="https://github.com/joshfng/railsready">Rails Ready</a> is essentially just a shell script but one you might find useful if you're running Ubuntu (or - update - CentOS) and want to get the installation process done and over as quickly as possible. It follows on rather nicely to our last post: <a href="http://www.rubyinside.com/rails-installer-ruby-and-rails-on-windows-in-a-single-install-4201.html">Ruby Installer: Ruby and Rails on Windows in a Single, Easy Install</a>!</p>
<p>If you have the time or you're installing this on your main development machine, however, I would recommend following <a href="http://ryanbigg.com/2010/12/ubuntu-ruby-rvm-rails-and-you">Ryan Biggs' RVM based instructions</a> (or <a href="http://www.rubyinside.com/how-to-install-ruby-1-9-2-and-rails-3-0-on-ubuntu-10-10-4148.html">my equivalent screencast</a>) because RVM gives you more developer-level control later on (such as <a href="http://rvm.beginrescueend.com/gemsets/">gem sets</a>). <em><strong>UPDATE -</strong> Josh has been working hard and says that Rails Ready "now asks you if you want to build from source or install RVM" - nice!</em>
 <div class="read_more"><a href="http://www.rubyinside.com/rails-ready-ruby-and-rails-on-ubuntu-in-one-line-4214.html">Read More</a> &#187;</div></p>";s:7:"attribs";a:1:{s:0:"";a:1:{s:4:"type";s:4:"html";}}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}s:7:"content";a:1:{i:0;a:5:{s:4:"data";s:2605:"<blockquote class="stylized"><p>How would you like to get a full Ruby on Rails stack up on Ubuntu with one command?</p>
<p>Now you can by running <a href="https://github.com/joshfng/railsready">Rails Ready.</a> Rails Ready is a setup script that gets Ruby and Rails running on a fresh install of Ubuntu with one command (Tested on Ubuntu server 10.04 LTS (Long-term Support)).</p></blockquote>
<p><cite>Adam Stacoviak</cite></p>
<p><a href="https://github.com/joshfng/railsready">Rails Ready</a> is essentially just a shell script but one you might find useful if you're running Ubuntu (or - update - CentOS) and want to get the installation process done and over as quickly as possible. It follows on rather nicely to our last post: <a href="http://www.rubyinside.com/rails-installer-ruby-and-rails-on-windows-in-a-single-install-4201.html">Ruby Installer: Ruby and Rails on Windows in a Single, Easy Install</a>!</p>
<p>If you have the time or you're installing this on your main development machine, however, I would recommend following <a href="http://ryanbigg.com/2010/12/ubuntu-ruby-rvm-rails-and-you">Ryan Biggs' RVM based instructions</a> (or <a href="http://www.rubyinside.com/how-to-install-ruby-1-9-2-and-rails-3-0-on-ubuntu-10-10-4148.html">my equivalent screencast</a>) because RVM gives you more developer-level control later on (such as <a href="http://rvm.beginrescueend.com/gemsets/">gem sets</a>). <em><strong>UPDATE -</strong> Josh has been working hard and says that Rails Ready "now asks you if you want to build from source or install RVM" - nice!</em></p>
<p>Nonetheless, if you want to get a new Ubuntu (or CentOS) box running Rails as quickly as possible, Rails Ready is worth a try. The short version:</p>
<pre><code>wget --no-check-certificate https://github.com/joshfng/railsready/raw/master/railsready.sh &#038;& bash railsready.sh</code></pre>
<p>Before running the above, though, be aware of the ramifications. You should probably take a look at <code>https://github.com/joshfng/railsready/raw/master/railsready.sh</code> yourself to see if it's suitable for you.</p>
<div class="feedflare">
<a href="http://feeds.feedburner.com/~ff/RubyInside?a=EaxgwBVjQx8:IbN2hxO1E3A:qj6IDK7rITs"><img src="http://feeds.feedburner.com/~ff/RubyInside?d=qj6IDK7rITs" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/RubyInside?a=EaxgwBVjQx8:IbN2hxO1E3A:3H-1DwQop_U"><img src="http://feeds.feedburner.com/~ff/RubyInside?i=EaxgwBVjQx8:IbN2hxO1E3A:3H-1DwQop_U" border="0"></img></a>
</div><img src="http://feeds.feedburner.com/~r/RubyInside/~4/EaxgwBVjQx8" height="1" width="1"/>";s:7:"attribs";a:2:{s:0:"";a:1:{s:4:"type";s:4:"html";}s:36:"http://www.w3.org/XML/1998/namespace";a:1:{s:4:"base";s:84:"http://www.rubyinside.com/rails-ready-ruby-and-rails-on-ubuntu-in-one-line-4214.html";}}s:8:"xml_base";s:84:"http://www.rubyinside.com/rails-ready-ruby-and-rails-on-ubuntu-in-one-line-4214.html";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}}s:38:"http://purl.org/syndication/thread/1.0";a:1:{s:5:"total";a:1:{i:0;a:5:{s:4:"data";s:1:"6";s:7:"attribs";a:0:{}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}}s:42:"http://rssnamespace.org/feedburner/ext/1.0";a:1:{s:8:"origLink";a:1:{i:0;a:5:{s:4:"data";s:84:"http://www.rubyinside.com/rails-ready-ruby-and-rails-on-ubuntu-in-one-line-4214.html";s:7:"attribs";a:0:{}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}}}}i:6;a:6:{s:4:"data";s:37:"
		
		
		
		
		
		
				
		
		
		
		
	";s:7:"attribs";a:0:{}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";s:5:"child";a:3:{s:27:"http://www.w3.org/2005/Atom";a:9:{s:6:"author";a:1:{i:0;a:6:{s:4:"data";s:17:"
			
						
					";s:7:"attribs";a:0:{}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";s:5:"child";a:1:{s:27:"http://www.w3.org/2005/Atom";a:2:{s:4:"name";a:1:{i:0;a:5:{s:4:"data";s:12:"Peter Cooper";s:7:"attribs";a:0:{}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}s:3:"uri";a:1:{i:0;a:5:{s:4:"data";s:25:"http://twitter.com/peterc";s:7:"attribs";a:0:{}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}}}}}s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:68:"Rails Installer: Ruby and Rails on Windows in a Single, Easy Install";s:7:"attribs";a:1:{s:0:"";a:1:{s:4:"type";s:4:"html";}}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}s:4:"link";a:3:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"rel";s:9:"alternate";s:4:"type";s:9:"text/html";s:4:"href";s:128:"http://feedproxy.google.com/~r/RubyInside/~3/l70bVWPOGlQ/rails-installer-ruby-and-rails-on-windows-in-a-single-install-4201.html";}}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}i:1;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:2:{s:0:"";a:3:{s:3:"rel";s:7:"replies";s:4:"type";s:9:"text/html";s:4:"href";s:106:"http://www.rubyinside.com/rails-installer-ruby-and-rails-on-windows-in-a-single-install-4201.html#comments";}s:38:"http://purl.org/syndication/thread/1.0";a:1:{s:5:"count";s:2:"14";}}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}i:2;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:2:{s:0:"";a:3:{s:3:"rel";s:7:"replies";s:4:"type";s:20:"application/atom+xml";s:4:"href";s:107:"http://www.rubyinside.com/rails-installer-ruby-and-rails-on-windows-in-a-single-install-4201.html/feed/atom";}s:38:"http://purl.org/syndication/thread/1.0";a:1:{s:5:"count";s:2:"14";}}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}s:2:"id";a:1:{i:0;a:5:{s:4:"data";s:33:"http://www.rubyinside.com/?p=4201";s:7:"attribs";a:0:{}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}s:7:"updated";a:1:{i:0;a:5:{s:4:"data";s:20:"2011-02-13T04:48:29Z";s:7:"attribs";a:0:{}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}s:9:"published";a:1:{i:0;a:5:{s:4:"data";s:20:"2011-01-18T11:58:22Z";s:7:"attribs";a:0:{}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}s:8:"category";a:2:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:2:{s:6:"scheme";s:25:"http://www.rubyinside.com";s:4:"term";s:4:"News";}}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}i:1;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:2:{s:6:"scheme";s:25:"http://www.rubyinside.com";s:4:"term";s:16:"Windows Specific";}}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}s:7:"summary";a:1:{i:0;a:5:{s:4:"data";s:1285:"<p><img src="http://www.rubyinside.com/wp-content/uploads/2011/01/railsinstaller.png" width="93" height="98" alt="railsinstaller.png" style="float:left; margin-right:12px; margin-bottom:12px; border:1px #000000 solid;" /><a href="http://railsinstaller.org/">RailsInstaller</a> is a new project from Wayne E Seguin (of <a href="http://rvm.beginrescueend.com/">RVM</a> fame) that brings <a href="http://rubyinstaller.org/">RubyInstaller</a>-style simplicity to getting Ruby <i>and</i> Rails set up on Microsoft Windows (XP, Vista, or 7). In a single wizard-driven installation you get Ruby 1.8.7-p330 (with <a href="https://github.com/oneclick/rubyinstaller/wiki/Development-Kit">DevKit</a>), Rails 3.0.3, Git, and SQLite 3.</p>
<p><i>Rails Installer</i> was developed with help from Luis Lavena (a Ruby on Windows expert) and Dr. Nic Williams (Engine Yard's resident Australian <a href="http://www.youtube.com/watch?v=2RM18SzE33M">comedian</a>) and its release comes just weeks after <a href="http://www.engineyard.com/blog/2010/honey-im-home/">Wayne was (re)hired by Engine Yard</a> to work on new open source initiatives.
 <div class="read_more"><a href="http://www.rubyinside.com/rails-installer-ruby-and-rails-on-windows-in-a-single-install-4201.html">Read More</a> &#187;</div></p>";s:7:"attribs";a:1:{s:0:"";a:1:{s:4:"type";s:4:"html";}}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}s:7:"content";a:1:{i:0;a:5:{s:4:"data";s:4023:"<p><img src="http://www.rubyinside.com/wp-content/uploads/2011/01/railsinstaller.png" width="93" height="98" alt="railsinstaller.png" style="float:left; margin-right:12px; margin-bottom:12px; border:1px #000000 solid;" /><a href="http://railsinstaller.org/">RailsInstaller</a> is a new project from Wayne E Seguin (of <a href="http://rvm.beginrescueend.com/">RVM</a> fame) that brings <a href="http://rubyinstaller.org/">RubyInstaller</a>-style simplicity to getting Ruby <i>and</i> Rails set up on Microsoft Windows (XP, Vista, or 7). In a single wizard-driven installation you get Ruby 1.8.7-p330 (with <a href="https://github.com/oneclick/rubyinstaller/wiki/Development-Kit">DevKit</a>), Rails 3.0.3, Git, and SQLite 3.</p>
<p><i>Rails Installer</i> was developed with help from Luis Lavena (a Ruby on Windows expert) and Dr. Nic Williams (Engine Yard's resident Australian <a href="http://www.youtube.com/watch?v=2RM18SzE33M">comedian</a>) and its release comes just weeks after <a href="http://www.engineyard.com/blog/2010/honey-im-home/">Wayne was (re)hired by Engine Yard</a> to work on new open source initiatives.</p>
<p><strong>To get started, go to <a href="http://railsinstaller.org/">railsinstaller.org</a>, download the "Rails Welcome Kit" and run the installer.</strong> There's a <a href="http://vimeo.com/18787139">screencast</a> you can watch too. The process is as simple as it sounds and you can have a basic, empty Rails project running within minutes.</p>
<p><img src="http://www.rubyinside.com/wp-content/uploads/2011/01/railsinstaller1.png" alt="" title="railsinstaller" width="528" height="410" class="alignnone size-full wp-image-4212" /></p>
<p>If you want to follow along more, check out the <a href="http://twitter.com/railsinstaller">@RailsInstaller</a> Twitter account or the <a href="http://groups.google.com/group/railsinstaller/">Rails Installer Google Group / mailing list.</a></p>
<h3>Like RVM? Do Wayne a Favor..!</h3>
<p>I've been speaking to Wayne and in the long term he will extend the <i>RailsInstaller</i> site with more information on where to go next and links to tutorials, etc, but for now he wants RailsInstaller.org to be the #1 "go to" site for budding Windows-based Rails developers. To help with this, he's keen for people to link to <code>http://railsinstaller.org/</code> with the text <a href="http://railsinstaller.org/">Rails Windows Installer</a> - making it more likely to come up if people Google for <code>"rails windows"</code> and similar.</p>
<p>Wayne is also keen for you to share <i>Rails Installer</i> with any/all Windows-based developers you know who might be interested in trying out Rails. A one-file, wizard driven installation process makes it look a lot better than the previous <i>"download this, type that, download this, open that"</i> process.</p>
<p>If you're interested in the source code behind the project and helping out at that level, there's <a href="https://github.com/railsinstaller/railsinstaller-windows">the railsinstaller-windows project on GitHub</a> you can check out too.</p>
<h3>Ruby 1.9.2 Next, Please ;-)</h3>
<p>I have only one complaint about RailsInstaller; it's Ruby 1.8.7 only (for now) but 1.9 is where it's at in 2011, especially for Rails 3! Nonetheless, I suspect further and more varied packages will be coming in due course. If you care that much about it in the short term, of course, you can use <a href="http://rubyinstaller.org/">RubyInstaller</a> 1.9.2 and install Rails by yourself the long way ;-)</p>
<div class="feedflare">
<a href="http://feeds.feedburner.com/~ff/RubyInside?a=l70bVWPOGlQ:DfFlcbmLqJQ:qj6IDK7rITs"><img src="http://feeds.feedburner.com/~ff/RubyInside?d=qj6IDK7rITs" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/RubyInside?a=l70bVWPOGlQ:DfFlcbmLqJQ:3H-1DwQop_U"><img src="http://feeds.feedburner.com/~ff/RubyInside?i=l70bVWPOGlQ:DfFlcbmLqJQ:3H-1DwQop_U" border="0"></img></a>
</div><img src="http://feeds.feedburner.com/~r/RubyInside/~4/l70bVWPOGlQ" height="1" width="1"/>";s:7:"attribs";a:2:{s:0:"";a:1:{s:4:"type";s:4:"html";}s:36:"http://www.w3.org/XML/1998/namespace";a:1:{s:4:"base";s:97:"http://www.rubyinside.com/rails-installer-ruby-and-rails-on-windows-in-a-single-install-4201.html";}}s:8:"xml_base";s:97:"http://www.rubyinside.com/rails-installer-ruby-and-rails-on-windows-in-a-single-install-4201.html";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}}s:38:"http://purl.org/syndication/thread/1.0";a:1:{s:5:"total";a:1:{i:0;a:5:{s:4:"data";s:2:"14";s:7:"attribs";a:0:{}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}}s:42:"http://rssnamespace.org/feedburner/ext/1.0";a:1:{s:8:"origLink";a:1:{i:0;a:5:{s:4:"data";s:97:"http://www.rubyinside.com/rails-installer-ruby-and-rails-on-windows-in-a-single-install-4201.html";s:7:"attribs";a:0:{}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}}}}i:7;a:6:{s:4:"data";s:37:"
		
		
		
		
		
		
				
		
		
		
		
	";s:7:"attribs";a:0:{}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";s:5:"child";a:3:{s:27:"http://www.w3.org/2005/Atom";a:9:{s:6:"author";a:1:{i:0;a:6:{s:4:"data";s:17:"
			
						
					";s:7:"attribs";a:0:{}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";s:5:"child";a:1:{s:27:"http://www.w3.org/2005/Atom";a:2:{s:4:"name";a:1:{i:0;a:5:{s:4:"data";s:12:"Peter Cooper";s:7:"attribs";a:0:{}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}s:3:"uri";a:1:{i:0;a:5:{s:4:"data";s:25:"http://twitter.com/peterc";s:7:"attribs";a:0:{}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}}}}}s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:34:"A WebKit Plugin Written in MacRuby";s:7:"attribs";a:1:{s:0:"";a:1:{s:4:"type";s:4:"html";}}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}s:4:"link";a:3:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"rel";s:9:"alternate";s:4:"type";s:9:"text/html";s:4:"href";s:101:"http://feedproxy.google.com/~r/RubyInside/~3/u6IeImyVBtc/a-webkit-plugin-written-in-macruby-4189.html";}}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}i:1;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:2:{s:0:"";a:3:{s:3:"rel";s:7:"replies";s:4:"type";s:9:"text/html";s:4:"href";s:79:"http://www.rubyinside.com/a-webkit-plugin-written-in-macruby-4189.html#comments";}s:38:"http://purl.org/syndication/thread/1.0";a:1:{s:5:"count";s:1:"3";}}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}i:2;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:2:{s:0:"";a:3:{s:3:"rel";s:7:"replies";s:4:"type";s:20:"application/atom+xml";s:4:"href";s:80:"http://www.rubyinside.com/a-webkit-plugin-written-in-macruby-4189.html/feed/atom";}s:38:"http://purl.org/syndication/thread/1.0";a:1:{s:5:"count";s:1:"3";}}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}s:2:"id";a:1:{i:0;a:5:{s:4:"data";s:33:"http://www.rubyinside.com/?p=4189";s:7:"attribs";a:0:{}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}s:7:"updated";a:1:{i:0;a:5:{s:4:"data";s:20:"2011-01-13T10:28:18Z";s:7:"attribs";a:0:{}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}s:9:"published";a:1:{i:0;a:5:{s:4:"data";s:20:"2011-01-13T10:23:07Z";s:7:"attribs";a:0:{}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}s:8:"category";a:2:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:2:{s:6:"scheme";s:25:"http://www.rubyinside.com";s:4:"term";s:4:"Cool";}}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}i:1;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:2:{s:6:"scheme";s:25:"http://www.rubyinside.com";s:4:"term";s:13:"OS X Specific";}}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}s:7:"summary";a:1:{i:0;a:5:{s:4:"data";s:955:"<p><img src="http://www.rubyinside.com/wp-content/uploads/2011/01/webkit.png" width="66" height="70" alt="webkit.png" style="float:left; margin-right:12px; margin-bottom:12px;" />Eloy Duran (of the Dutch Rails consultancy <a href="http://www.fngtps.com/">Fingertips</a>) has put together an interesting side project: a <a href="https://github.com/alloy/MacRubyWebKitPlugInExample">WebKit plugin written in MacRuby</a>. His 'MacRubyWebKitPluginExample' project on GitHub is a short, self contained example of how to pull it off, so it's worth checking out if you want to do something similar. Eloy's example simply allows Ruby code to be supplied by a text box in a WebView and then executed by MacRuby on the back end.</p>
<p>Here's <a href="http://www.youtube.com/watch?v=EZXX4Esl3jM">a video</a> showing it in action.
 <div class="read_more"><a href="http://www.rubyinside.com/a-webkit-plugin-written-in-macruby-4189.html">Read More</a> &#187;</div></p>";s:7:"attribs";a:1:{s:0:"";a:1:{s:4:"type";s:4:"html";}}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}s:7:"content";a:1:{i:0;a:5:{s:4:"data";s:3021:"<p><img src="http://www.rubyinside.com/wp-content/uploads/2011/01/webkit.png" width="66" height="70" alt="webkit.png" style="float:left; margin-right:12px; margin-bottom:12px;" />Eloy Duran (of the Dutch Rails consultancy <a href="http://www.fngtps.com/">Fingertips</a>) has put together an interesting side project: a <a href="https://github.com/alloy/MacRubyWebKitPlugInExample">WebKit plugin written in MacRuby</a>. His 'MacRubyWebKitPluginExample' project on GitHub is a short, self contained example of how to pull it off, so it's worth checking out if you want to do something similar. Eloy's example simply allows Ruby code to be supplied by a text box in a WebView and then executed by MacRuby on the back end.</p>
<p>Here's <a href="http://www.youtube.com/watch?v=EZXX4Esl3jM">a video</a> showing it in action:</p>
<p><object width="600" height="475"><param name="movie" value="http://www.youtube.com/v/EZXX4Esl3jM?fs=1&amp;hl=en_US&amp;rel=0"></param><param name="allowFullScreen" value="true"></param><param name="allowscriptaccess" value="always"></param><embed src="http://www.youtube.com/v/EZXX4Esl3jM?fs=1&amp;hl=en_US&amp;rel=0" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" width="600" height="475"></embed></object></p>
<p>Before you get too excited, there are some significant provisos. Eloy explains:</p>
<blockquote class="stylized"><p>Whoa, hold your horses, son. Because this brings us to the most important note, and will most probably be sad news to you, which is that none of the common WebKit based browsers support this... This means <b>no</b> Safari <b>nor</b> Chrome. [Due to their lack of support for garbage collection.]</p>
<p>The latter could possibly be compiled with garbage collection support, it’s completely open-source after all, but I was not able to do so in my quick attempts. In case you'd like to have a go, I could not get ‘Chromium Framework.framework’ to support it. Let me know if you are successful.</p>
<p>However, it's possible to use the plugin from a Web browser because, well, that's what a WebView <i>is</i>. You can build a simple Web browser</p>
</blockquote>
<p><cite>Eloy Duran</cite></p>
<p>So it's early days, but these problems seem surmountable, and in the interim it could be a useful technique for those of you building MacRuby OS X apps with custom WebKit WebViews.</p>
<p><i>Thanks to</i> <a href="http://www.igvita.com/"><i>Ilya Grigorik</i></a> <i>for pointing this project out on Twitter.</i></p>
<div class="feedflare">
<a href="http://feeds.feedburner.com/~ff/RubyInside?a=u6IeImyVBtc:A8z6TrHAafE:qj6IDK7rITs"><img src="http://feeds.feedburner.com/~ff/RubyInside?d=qj6IDK7rITs" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/RubyInside?a=u6IeImyVBtc:A8z6TrHAafE:3H-1DwQop_U"><img src="http://feeds.feedburner.com/~ff/RubyInside?i=u6IeImyVBtc:A8z6TrHAafE:3H-1DwQop_U" border="0"></img></a>
</div><img src="http://feeds.feedburner.com/~r/RubyInside/~4/u6IeImyVBtc" height="1" width="1"/>";s:7:"attribs";a:2:{s:0:"";a:1:{s:4:"type";s:4:"html";}s:36:"http://www.w3.org/XML/1998/namespace";a:1:{s:4:"base";s:70:"http://www.rubyinside.com/a-webkit-plugin-written-in-macruby-4189.html";}}s:8:"xml_base";s:70:"http://www.rubyinside.com/a-webkit-plugin-written-in-macruby-4189.html";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}}s:38:"http://purl.org/syndication/thread/1.0";a:1:{s:5:"total";a:1:{i:0;a:5:{s:4:"data";s:1:"3";s:7:"attribs";a:0:{}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}}s:42:"http://rssnamespace.org/feedburner/ext/1.0";a:1:{s:8:"origLink";a:1:{i:0;a:5:{s:4:"data";s:70:"http://www.rubyinside.com/a-webkit-plugin-written-in-macruby-4189.html";s:7:"attribs";a:0:{}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}}}}i:8;a:6:{s:4:"data";s:37:"
		
		
		
		
		
		
				
		
		
		
		
	";s:7:"attribs";a:0:{}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";s:5:"child";a:3:{s:27:"http://www.w3.org/2005/Atom";a:9:{s:6:"author";a:1:{i:0;a:6:{s:4:"data";s:17:"
			
						
					";s:7:"attribs";a:0:{}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";s:5:"child";a:1:{s:27:"http://www.w3.org/2005/Atom";a:2:{s:4:"name";a:1:{i:0;a:5:{s:4:"data";s:12:"Peter Cooper";s:7:"attribs";a:0:{}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}s:3:"uri";a:1:{i:0;a:5:{s:4:"data";s:25:"http://twitter.com/peterc";s:7:"attribs";a:0:{}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}}}}}s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:54:"Parslet &#8211; A Simple PEG Parser Framework for Ruby";s:7:"attribs";a:1:{s:0:"";a:1:{s:4:"type";s:4:"html";}}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}s:4:"link";a:3:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"rel";s:9:"alternate";s:4:"type";s:9:"text/html";s:4:"href";s:113:"http://feedproxy.google.com/~r/RubyInside/~3/vYghQjAJhyc/parslet-a-simple-peg-parser-framework-for-ruby-4187.html";}}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}i:1;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:2:{s:0:"";a:3:{s:3:"rel";s:7:"replies";s:4:"type";s:9:"text/html";s:4:"href";s:91:"http://www.rubyinside.com/parslet-a-simple-peg-parser-framework-for-ruby-4187.html#comments";}s:38:"http://purl.org/syndication/thread/1.0";a:1:{s:5:"count";s:1:"5";}}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}i:2;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:2:{s:0:"";a:3:{s:3:"rel";s:7:"replies";s:4:"type";s:20:"application/atom+xml";s:4:"href";s:92:"http://www.rubyinside.com/parslet-a-simple-peg-parser-framework-for-ruby-4187.html/feed/atom";}s:38:"http://purl.org/syndication/thread/1.0";a:1:{s:5:"count";s:1:"5";}}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}s:2:"id";a:1:{i:0;a:5:{s:4:"data";s:82:"http://www.rubyinside.com/parslet-a-simple-peg-parser-framework-for-ruby-4187.html";s:7:"attribs";a:0:{}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}s:7:"updated";a:1:{i:0;a:5:{s:4:"data";s:20:"2011-01-12T02:45:38Z";s:7:"attribs";a:0:{}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}s:9:"published";a:1:{i:0;a:5:{s:4:"data";s:20:"2011-01-12T02:45:38Z";s:7:"attribs";a:0:{}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}s:8:"category";a:2:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:2:{s:6:"scheme";s:25:"http://www.rubyinside.com";s:4:"term";s:4:"Cool";}}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}i:1;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:2:{s:6:"scheme";s:25:"http://www.rubyinside.com";s:4:"term";s:5:"Tools";}}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}s:7:"summary";a:1:{i:0;a:5:{s:4:"data";s:1333:"<p><img src="http://www.rubyinside.com/wp-content/uploads/2011/01/Screen-shot-2011-01-12-at-2.32.49-AM.png" width="125" height="66" alt="Screen shot 2011-01-12 at 2.32.49 AM.png" style="float:left; margin-right:12px; margin-bottom:12px;" /><a href="http://kschiess.github.com/parslet/">Parslet</a> is a new "simple parser framework" for Ruby built by Kaspar Schiess. It follows the PEG (parsing expression grammar) style of parsing and its primary goals are to be simple, testable, and to have extensive and powerful error reporting features (something that Kaspar states <a href="http://treetop.rubyforge.org/">Treetop</a> sorely lacks).</p>
<p>If you've already used Treetop, you might wonder what the hoopla is about. The key difference is that Parslet does not generate code to represent the parsing grammars you create as Treetop does - it works directly from rules defined using standard Ruby syntax (Treetop has its own Ruby-<i>esque</i> grammar language). Parslet's error messages are also significantly nicer than Treetop's when you inevitably run into trouble with your grammar as they're generated by Parslet itself and don't spring from Treetop's internally generated code.
 <div class="read_more"><a href="http://www.rubyinside.com/parslet-a-simple-peg-parser-framework-for-ruby-4187.html">Read More</a> &#187;</div></p>";s:7:"attribs";a:1:{s:0:"";a:1:{s:4:"type";s:4:"html";}}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}s:7:"content";a:1:{i:0;a:5:{s:4:"data";s:2371:"<p><img src="http://www.rubyinside.com/wp-content/uploads/2011/01/Screen-shot-2011-01-12-at-2.32.49-AM.png" width="125" height="66" alt="Screen shot 2011-01-12 at 2.32.49 AM.png" style="float:left; margin-right:12px; margin-bottom:12px;" /><a href="http://kschiess.github.com/parslet/">Parslet</a> is a new "simple parser framework" for Ruby built by Kaspar Schiess. It follows the PEG (parsing expression grammar) style of parsing and its primary goals are to be simple, testable, and to have extensive and powerful error reporting features (something that Kaspar states <a href="http://treetop.rubyforge.org/">Treetop</a> sorely lacks).</p>
<p>If you've already used Treetop, you might wonder what the hoopla is about. The key difference is that Parslet does not generate code to represent the parsing grammars you create as Treetop does - it works directly from rules defined using standard Ruby syntax (Treetop has its own Ruby-<i>esque</i> grammar language). Parslet's error messages are also significantly nicer than Treetop's when you inevitably run into trouble with your grammar as they're generated by Parslet itself and don't spring from Treetop's internally generated code.</p>
<p><img src="http://www.rubyinside.com/wp-content/uploads/2011/01/ast.png" width="480" height="176" alt="ast.png" /></p>
<p>So if you need to build a parser (or think you <i>might</i>), check out <a href="http://kschiess.github.com/parslet/">Parslet</a> - it has a great homepage with some useful documentation. Installation is simple (<code>gem install parslet</code>) and Kaspar has put together <a href="http://kschiess.github.com/parslet/get-started.html">a "getting started" tutorial</a> that walks through building a basic grammar for a teeny-tiny programming language. It concludes with a complete example of a programming language interpreter in a mere 49 lines.</p>
<div class="feedflare">
<a href="http://feeds.feedburner.com/~ff/RubyInside?a=vYghQjAJhyc:41vQWv4049k:qj6IDK7rITs"><img src="http://feeds.feedburner.com/~ff/RubyInside?d=qj6IDK7rITs" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/RubyInside?a=vYghQjAJhyc:41vQWv4049k:3H-1DwQop_U"><img src="http://feeds.feedburner.com/~ff/RubyInside?i=vYghQjAJhyc:41vQWv4049k:3H-1DwQop_U" border="0"></img></a>
</div><img src="http://feeds.feedburner.com/~r/RubyInside/~4/vYghQjAJhyc" height="1" width="1"/>";s:7:"attribs";a:2:{s:0:"";a:1:{s:4:"type";s:4:"html";}s:36:"http://www.w3.org/XML/1998/namespace";a:1:{s:4:"base";s:82:"http://www.rubyinside.com/parslet-a-simple-peg-parser-framework-for-ruby-4187.html";}}s:8:"xml_base";s:82:"http://www.rubyinside.com/parslet-a-simple-peg-parser-framework-for-ruby-4187.html";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}}s:38:"http://purl.org/syndication/thread/1.0";a:1:{s:5:"total";a:1:{i:0;a:5:{s:4:"data";s:1:"5";s:7:"attribs";a:0:{}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}}s:42:"http://rssnamespace.org/feedburner/ext/1.0";a:1:{s:8:"origLink";a:1:{i:0;a:5:{s:4:"data";s:82:"http://www.rubyinside.com/parslet-a-simple-peg-parser-framework-for-ruby-4187.html";s:7:"attribs";a:0:{}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}}}}i:9;a:6:{s:4:"data";s:37:"
		
		
		
		
		
		
				
		
		
		
		
	";s:7:"attribs";a:0:{}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";s:5:"child";a:3:{s:27:"http://www.w3.org/2005/Atom";a:9:{s:6:"author";a:1:{i:0;a:6:{s:4:"data";s:17:"
			
						
					";s:7:"attribs";a:0:{}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";s:5:"child";a:1:{s:27:"http://www.w3.org/2005/Atom";a:2:{s:4:"name";a:1:{i:0;a:5:{s:4:"data";s:12:"Peter Cooper";s:7:"attribs";a:0:{}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}s:3:"uri";a:1:{i:0;a:5:{s:4:"data";s:25:"http://twitter.com/peterc";s:7:"attribs";a:0:{}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}}}}}s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:52:"JRuby 1.6.0 RC1 Released: JRuby Gets All 1.9.2 On Us";s:7:"attribs";a:1:{s:0:"";a:1:{s:4:"type";s:4:"html";}}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}s:4:"link";a:3:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"rel";s:9:"alternate";s:4:"type";s:9:"text/html";s:4:"href";s:118:"http://feedproxy.google.com/~r/RubyInside/~3/VsRV7cwG4Fs/jruby-1-6-0-rc1-released-jruby-gets-all-1-9-2-on-us-4184.html";}}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}i:1;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:2:{s:0:"";a:3:{s:3:"rel";s:7:"replies";s:4:"type";s:9:"text/html";s:4:"href";s:96:"http://www.rubyinside.com/jruby-1-6-0-rc1-released-jruby-gets-all-1-9-2-on-us-4184.html#comments";}s:38:"http://purl.org/syndication/thread/1.0";a:1:{s:5:"count";s:1:"2";}}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}i:2;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:2:{s:0:"";a:3:{s:3:"rel";s:7:"replies";s:4:"type";s:20:"application/atom+xml";s:4:"href";s:97:"http://www.rubyinside.com/jruby-1-6-0-rc1-released-jruby-gets-all-1-9-2-on-us-4184.html/feed/atom";}s:38:"http://purl.org/syndication/thread/1.0";a:1:{s:5:"count";s:1:"2";}}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}s:2:"id";a:1:{i:0;a:5:{s:4:"data";s:87:"http://www.rubyinside.com/jruby-1-6-0-rc1-released-jruby-gets-all-1-9-2-on-us-4184.html";s:7:"attribs";a:0:{}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}s:7:"updated";a:1:{i:0;a:5:{s:4:"data";s:20:"2011-02-19T02:06:06Z";s:7:"attribs";a:0:{}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}s:9:"published";a:1:{i:0;a:5:{s:4:"data";s:20:"2011-01-11T15:33:08Z";s:7:"attribs";a:0:{}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}s:8:"category";a:2:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:2:{s:6:"scheme";s:25:"http://www.rubyinside.com";s:4:"term";s:5:"JRuby";}}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}i:1;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:2:{s:6:"scheme";s:25:"http://www.rubyinside.com";s:4:"term";s:4:"News";}}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}s:7:"summary";a:1:{i:0;a:5:{s:4:"data";s:845:"<p><img src="http://www.rubyinside.com/wp-content/uploads/2011/01/jruby-new-logo.png" width="126" height="48" alt="jruby-new-logo.png" style="float:left; margin-right:12px; margin-bottom:12px; border:1px #000000 solid;" />The JRuby team has <a href="http://www.jruby.org/2011/01/10/jruby-1-6-0-rc1">announced the release of JRuby 1.6.0 Release Candidate 1</a>. The final release is still a little way off but the bulk of the work is in place. It's billed as the "largest release of JRuby to date" which, given how awesome 1.5 was, is a big deal, especially as it adds initial Ruby 1.9.2 language and standard library compatibility (though 1.8.7 is still the "default").</p>
<p>So, what's new?
 <div class="read_more"><a href="http://www.rubyinside.com/jruby-1-6-0-rc1-released-jruby-gets-all-1-9-2-on-us-4184.html">Read More</a> &#187;</div></p>";s:7:"attribs";a:1:{s:0:"";a:1:{s:4:"type";s:4:"html";}}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}s:7:"content";a:1:{i:0;a:5:{s:4:"data";s:2257:"<p><img src="http://www.rubyinside.com/wp-content/uploads/2011/01/jruby-new-logo.png" width="126" height="48" alt="jruby-new-logo.png" style="float:left; margin-right:12px; margin-bottom:12px; border:1px #000000 solid;" />The JRuby team has <a href="http://www.jruby.org/2011/01/10/jruby-1-6-0-rc1">announced the release of JRuby 1.6.0 Release Candidate 1</a>. The final release is still a little way off but the bulk of the work is in place. It's billed as the "largest release of JRuby to date" which, given how awesome 1.5 was, is a big deal, especially as it adds initial Ruby 1.9.2 language and standard library compatibility (though 1.8.7 is still the "default").</p>
<p>So, what's new?</p>
<ul>
<li>Ruby 1.9.2 language and API compatibility (use the --1.9 command line option to get it)</li>
<li>Ruby 1.9.2 stdlib included (even in jruby-complete.jar)</li>
<li>General performance and stability improvements</li>
<li>RubyGems 1.4.2 included</li>
<li>Experimental C extension support (!)</li>
</ul>
<p>The JRuby team are especially keen for people to try out the new Ruby 1.9.2 support so that they can round out and perfect their 1.9.2 compatibility before the final release.</p>
<p>You can grab the 1.6.0.RC1 builds of JRuby from <a href="http://www.jruby.org/download">the JRuby download page</a>. I haven't had any luck with RVM yet but I suspect it'll be supporting this release really soon..</p>
<p class="s" style="padding: 8px; background-color: #ff9"><em>[ad]</em> The <a href="http://engine.adzerk.net/redirect/0/3179/3005/1313/5fad312b82a64a6da8bb76a7bf353f6b/19">Red Dirt RubyConf</a> is taking place in Oklahoma City on April 21-22, 2011! Speakers include Aaron "tenderlove" Patterson and Dr. Nic Williams. Mark your calendars!</p>
<div class="feedflare">
<a href="http://feeds.feedburner.com/~ff/RubyInside?a=VsRV7cwG4Fs:2L-MOjNdC4w:qj6IDK7rITs"><img src="http://feeds.feedburner.com/~ff/RubyInside?d=qj6IDK7rITs" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/RubyInside?a=VsRV7cwG4Fs:2L-MOjNdC4w:3H-1DwQop_U"><img src="http://feeds.feedburner.com/~ff/RubyInside?i=VsRV7cwG4Fs:2L-MOjNdC4w:3H-1DwQop_U" border="0"></img></a>
</div><img src="http://feeds.feedburner.com/~r/RubyInside/~4/VsRV7cwG4Fs" height="1" width="1"/>";s:7:"attribs";a:2:{s:0:"";a:1:{s:4:"type";s:4:"html";}s:36:"http://www.w3.org/XML/1998/namespace";a:1:{s:4:"base";s:87:"http://www.rubyinside.com/jruby-1-6-0-rc1-released-jruby-gets-all-1-9-2-on-us-4184.html";}}s:8:"xml_base";s:87:"http://www.rubyinside.com/jruby-1-6-0-rc1-released-jruby-gets-all-1-9-2-on-us-4184.html";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}}s:38:"http://purl.org/syndication/thread/1.0";a:1:{s:5:"total";a:1:{i:0;a:5:{s:4:"data";s:1:"2";s:7:"attribs";a:0:{}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}}s:42:"http://rssnamespace.org/feedburner/ext/1.0";a:1:{s:8:"origLink";a:1:{i:0;a:5:{s:4:"data";s:87:"http://www.rubyinside.com/jruby-1-6-0-rc1-released-jruby-gets-all-1-9-2-on-us-4184.html";s:7:"attribs";a:0:{}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}}}}}}s:42:"http://rssnamespace.org/feedburner/ext/1.0";a:3:{s:4:"info";a:1:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:1:{s:3:"uri";s:10:"rubyinside";}}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}s:14:"emailServiceId";a:1:{i:0;a:5:{s:4:"data";s:10:"RubyInside";s:7:"attribs";a:0:{}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}s:18:"feedburnerHostname";a:1:{i:0;a:5:{s:4:"data";s:28:"http://feedburner.google.com";s:7:"attribs";a:0:{}s:8:"xml_base";s:37:"http://www.rubyinside.com/wp-atom.php";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:2:"en";}}}}}}}}s:4:"type";i:512;s:7:"headers";a:11:{s:12:"content-type";s:23:"text/xml; charset=UTF-8";s:4:"etag";s:27:"qQsR09E5s7XgD8tLsaO1caztSgQ";s:13:"last-modified";s:29:"Tue, 22 Feb 2011 14:02:06 GMT";s:16:"content-encoding";s:4:"gzip";s:17:"transfer-encoding";s:7:"chunked";s:4:"date";s:29:"Tue, 22 Feb 2011 14:22:34 GMT";s:7:"expires";s:29:"Tue, 22 Feb 2011 14:22:34 GMT";s:13:"cache-control";s:18:"private, max-age=0";s:22:"x-content-type-options";s:7:"nosniff";s:16:"x-xss-protection";s:13:"1; mode=block";s:6:"server";s:3:"GSE";}s:5:"build";s:14:"20110128231735";}