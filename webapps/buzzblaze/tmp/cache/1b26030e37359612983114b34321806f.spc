a:4:{s:5:"child";a:1:{s:0:"";a:1:{s:3:"rss";a:1:{i:0;a:6:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:1:{s:7:"version";s:4:"0.91";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:0:"";a:1:{s:7:"channel";a:1:{i:0;a:6:{s:4:"data";s:0:"";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:10:"Planet PHP";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:21:"http://planet-php.net";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:25:"People blogging about PHP";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:8:"language";a:1:{i:0;a:5:{s:4:"data";s:2:"en";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"item";a:10:{i:0;a:6:{s:4:"data";s:0:"";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:0:"";a:4:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:27:"Short URLs - Derick Rethans";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:39:"http://derickrethans.nl/short-urls.html";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Tue, 22 Feb 2011 09:43:00 +0000";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:5126:"<div class="article">
  <div class="body">
    <div class="articleListItem">
      <h1><a name="short_urls"/>Short URLs</h1>
      <dl class="head"/><div class="articleMetaData">
        <div class="location"> London, UK</div>
        <div class="date">Tuesday, February 22nd 2011, 09:43 GMT</div>
      </div>
      <p>When using twitter, or other mobile devices where space is a premium, it is quite common to use shortened URLs. Many people will not be keen on typing <a href="http://www.openstreetmap.org/?lat=51.5073&lon=-0.1278&zoom=14&layers=M">http://www.openstreetmap.org/?lat=51.5073&lon=-0.1278&zoom=14&layers=M</a>, and will prefer something like <a href="http://osm.org/go/euu4gY@w-">http://osm.org/go/euu4gY@w-</a> instead <a href="http://derickrethans.nl#_footnote_0_1" class="footnote">1</a>.</p>
      <p>The URLs for my articles are automatically generated from the title. There is a little function that uses <a href="http://derickrethans.nl/projects.html#translit">translit</a>'s <em>transliterate()</em> function to ASCII-ify the titles. It transforms for example "pfcongrez, P2P Конференция, php|tek, PHP Vikinger, DPC and eZ Conference and Awards" to "pfcongrez-p2p-konferenciya-phptek-php-vikinger-dpc-and-ez-conference-and-awards" with code similar to:</p>
      <pre>$titleShort = transliterate( $fullTitle,
    array(
        'cyrillic_transliterate', 'lowercase_latin',
        'normalize_ligature', 'diacritical_remove',
        'normalize_punctuation', 'remove_punctuation',
        'spaces_to_underscore', 'compact_underscores'
    ),
    'utf8', 'us-ascii'
);

</pre>
      <p>However, <a href="http://derickrethans.nl/pfcongrez-p2p-konferenciya-phptek-php-vikinger-dpc-and-ez-conference-and-awards.html">http://derickrethans.nl/pfcongrez-p2p-konferenciya-phptek-php-vikinger-dpc-and-ez-conference-and-awards.html</a> is hardly a short URL. What we want is something short and descriptive. First of all, I thought it would work to generate short URLs automatically, following the following algorithm:</p>
      <ol><li>
          <p>Strip out all chars that are not <code>A-Z</code>, <code>a-z</code>, <code>0-9</code>, <code>.</code>, space and <code>-</code>.</p>
        </li>
        <li>
          <p>Split the title up in words, splitting on space.</p>
        </li>
        <li>
          <p>If the sanitized URL is shorter than 14 chars: join the words back together with a "-", otherwise:</p>
        </li>
        <li>
          <p>Loop over each word, replacing each word with the first letter of the word, unless it is one of the important words (such as "php" or "xdebug").</p>
        </li>
        <li>
          <p>Add a marker for the date, to ensure that short URLs are unique. The date marker is generated like:</p>
          <ol><li>
              <p>Format the date as <code>two digit year</code>, <code>ISO week</code> and <code>ISO weekday</code></p>
            </li>
            <li>
              <p>Convert the created number to base 36 with:</p>
            </li>
          </ol><pre>php -r "echo date_create( '20090410' )->format( 'yWN' );"
09155

php -r 'echo base_convert("09155", 10, 36), "\n";'
72b

</pre>
        </li>
      </ol><p>Our long title from above, then turns into <code>pp-p-php-vdaecaa-72b</code>. Although relatively short, it is still not a descriptive URL. To be honest, it's a bit difficult to come up with a short, descriptive URL for this title, so let us examine another one, of a more recent post.</p>
      <p>The title "64-bit integers in MongoDB" is converted into "6iim-7yp", which is again short, but not very informative; and "Xdebug 2.1 Released" is converted into "xdebug-2.1-7x2", which <em>does</em> make sense.</p>
      <p>Because I did not get very good results with automatically converting titles into sort URLs, I decided that for all new articles I will just define my own.</p>
      <p>Now, once we have the short URLs, they need to be used. Instead of my long main domain <a href="http://derickrethans.nl">http://derickrethans.nl</a>, I registered a new one just for short URLs: <a href="http://drck.me">http://drck.me</a> to reduce the URL length even more. For the current article, the length of the URL shrinks from 39 to 26 characters. The short URL is also embedded in the html source with a <code>rev=canonical</code> tag and a <code>rel=shortlink</code> tag, such as:</p>
      <pre><link rev="canonical" type="text/html" href="http://drck.me/shrturl-8ju"/><link rel="shortlink" type="text/html" href="http://drck.me/shrturl-8ju"/></pre>
      <p>This tag is meant to provide alternative URLs for the current one. For more information on <code>rev=canonical</code> see <a href="http://revcanonical.appspot.com/">http://revcanonical.appspot.com/</a> or Chris Shiflett's <a href="http://shiflett.org/blog/2009/apr/save-the-internet-with-rev-canonical">entry</a>, and for <code>rel=shortlink</code> see the <a href="http://microfo&lt;/body>"/></p></div></div></div><p><i>Truncated by Planet PHP, read more at <a href="http://derickrethans.nl/short-urls.html">the original</a> (another 1024 bytes)</i></p>";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:1;a:6:{s:4:"data";s:0:"";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:0:"";a:4:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:76:"PHP:  Master slave load balancing in mysqlnd - how transparent? - Ulf Wendel";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:32:"http://blog.ulf-wendel.de/?p=300";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Mon, 21 Feb 2011 20:44:58 +0000";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:4976:"	<p>
<strong>How transparent does master slave load balancing support for <a href="http://de3.php.net/mysqlnd">mysqlnd</a> have to be?</strong> Transparency, when driven to the extremes, has three limiting factory: power users not needing it, increase of messages send to MySQL, time intensive SQL monitoring and parsing.  The <a href="http://svn.php.net/viewvc/pecl/mysqlnd_ms/">PECL/mysqlnd_ms</a> proof-of-concept <a href="http://de3.php.net/manual/en/mysqlnd.plugin.php">mysqlnd plugin</a> is <em>almost</em> transparent to make it easy to use.  Almost because there <em>are</em> some design limits. Please let us know how you rate the severity of these limits. <strong>For example, can we ignore transactions?</strong> Your feedback on the <a href="http://blog.ulf-wendel.de/?p=299">previous blog post</a> has been most helpful - thanks!
</p>
	<p>
Give me four paragraphs, one minute, for the introduction and background.
</p>
	<p align="center">
<img src="http://blog.ulf-wendel.de/images/semi_transparent_foggy.jpg" alt="A bit transparent"/><br/>
A foggy day. Somewhat transparent.<br/></p>
	<h3>Change: a connection handle represents a pool</h3>
	<p>
By default <a href="http://svn.php.net/viewvc/pecl/mysqlnd_ms/">PECL/mysqlnd_ms</a>  hides what it does from the application developer. PHP application open a connection using any of the existing PHP MySQL APIs - mysqli, mysql, PDO_MySQL - and get a connection handle. Traditionally the connection handle represents one physical network connection to one server (1:1 relationship). Every MySQL query executed with the connection handle ends up on the same server.
</p>
	<p>
<code/></p>
	<pre>
/* all of those will be load balanced */
$mysqli = new mysqli("second_best_forum", "user", "password");
$mysql = mysql_connect("second_best_forum", "user", "password");
$pdo = new PDO("mysql:host=second_best_forum", "user", "password");
</pre>
	<p>
</p>
	<p><i>You made 50% of the introduction….</i></p>
	<p>
With the master slave load balancing plugin a connection handle represents a pool of physical network connections to the master and slave servers (1:n relationship).  Although semantics have changed, the API is still the same. A connection handle shall behave like ever to make using the master slave load balancing plugin as easy as possible.
</p>
	<table><tr bgcolor="#f0f0f0"><th align="center" valign="top">Standard</th>
	<th> </th>
	<th align="center" valign="top" colspan="3">PECL/mysqlnd_ms</th>
	</tr><tr bgcolor="#e0e0e0"><td align="center" valign="top">$connection_handle</td>
	<td align="center" valign="top"> </td>
	<td align="center" valign="top" colspan="3">
$connection_handle
</td>
	</tr><tr><td align="center" valign="top"><strong>1</strong></td>
	<td align="center" valign="top"> </td>
	<td align="center" valign="top" colspan="3">
<strong>1</strong>
</td>
	</tr><tr bgcolor="#e0e0e0"><td align="center" valign="top">|</td>
	<td align="center" valign="top"> </td>
	<td align="center" valign="top">|</td>
	<p>´<br/></p><td align="center" valign="top">|</td>
	<td align="center" valign="top">|</td>
	</tr><tr><td align="center" valign="top"><strong>1</strong></td>
	<td align="center" valign="top"> </td>
	<td align="center" valign="top" colspan="3">
<strong>n</strong>
</td>
	</tr><tr bgcolor="#e0e0e0"><td align="center" valign="top">MySQL Server</td>
	<td align="center" valign="top"> </td>
	<td align="center" valign="top">Master</td>
	<td align="center" valign="top">Slave 1</td>
	<td align="center" valign="top">Slave n</td>
	</tr></table><h3>Connections have a state</h3>
	<p>
The trouble is that every connection in the pool has its own state. Whenever the state of a connection changes one needs to decide if the change shall be reflected in the other connections from the pool. For example, if you change the character set when connected to Slave 1, do you expect Slave n, which may be running your next load balanced query, to use the character set you have just set? When it comes to character sets there is not much of a discussion. Character set play into string escaping (e.g. <a href="http://de3.php.net/manual/en/mysqli.real-escape-string.php">mysqli_real_escape_string()</a>) and thus the change of the character set must be dispatched to all connections in the pool, must it?
</p>
	<p><i>You made it….</i></p>
	<p>
We are now at the hearth of the discussion. You can change the character set either via API calls (e.g. <a href="http://de3.php.net/manual/en/mysqli.set-charset.php">mysqli_set_charset()</a>) or using SQL statements such as <code>SET NAMES</code>. It is strongly recommended to use the API calls. The client does the string escaping and the client needs to know the current charset. If you use the SQL command, the client will not recognize the new charset … welcome my dear website hacker.
</p>
	<h3>Ouch: transact</h3><p><i>Truncated by Planet PHP, read more at <a href="http://blog.ulf-wendel.de/?p=300">the original</a> (another 5288 bytes)</i></p>";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:2;a:6:{s:4:"data";s:0:"";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:0:"";a:4:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:47:"Using Pango for PHP: a taster - Michael Maclean";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:51:"http://mgdm.net/weblog/using-pango-for-php-a-taster";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Mon, 21 Feb 2011 20:42:15 +0000";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:5209:"<p>The <a href="http://pecl.php.net/package/cairo">PECL/Cairo</a> library is pretty good at drawing vector graphics (in our opinion, as the developers, at least!), but one thing it's not able to do by itself is draw text with mildly advanced layout. It has the CairoContext::showText() function, but that doesn't really let you do anything GD can't. That's because the developers of the Cairo library decided to let another more specialised library handle the job of text layout. Much of the time, the library that gets used for this is <a href="http://pango.org">Pango</a>. It has several bindings already for most popular languages on Unix-like platforms. It's quite capable, and able to lay out text while taking care of things such as paragraph alignment, line breaking, bold/italic text, justification, and various other features. In this post, I intend to give a little tour of some of its features.</p><p>Quite a while ago now, I wrote an extension to wrap Pango for PHP. It's available on its <a href="https://github.com/mgdm/php-pango">Github repository</a>. It's not available on PECL right now, but you can check it out from there and install it using the <a href="http://php.net/manual/en/install.pecl.phpize.php">normal method</a>. (Sorry Windows users, I've not had time to test it out on there, and likely won't any time soon. Patches are welcome, though...). It requires that the Pango headers are installed, and that PECL/Cairo is already installed into PHP.</p><p>Once installed, you can use it with Cairo. The best way to show it off is probably some example code:</p><p><geshi lang="php">&lt;?php<br>header("Content-Type: image/png");<br>/* Make a 300x300px image surface */<br>$s = new CairoImageSurface(CairoFormat::ARGB32, 300, 300);<br>$c = new CairoContext($s);</p><p>/* Set the background to white */<br>$c->setSourceRGB(1, 1, 1); <br>$c->paint();</p><p>/* Let's draw using black 'ink' */<br>$c->setSourceRGB(0, 0, 0); </p><p>/* Make a Pango layout, set the font, then set the layout size */<br>$l = new PangoLayout($c);<br>$desc = new PangoFontDescription("Bitstream Charter 28");<br>$l->setFontDescription($desc);<br>$l->setWidth(250 * PANGO_SCALE);</p><p>/* Here, we use Pango markup to make part of the text bold */<br>$l->setMarkup("Hello <b>world!</b> Here is a rather long paragraph which should get wrapped");</p><p>/* Draw the layout on the surface */<br>$l->showLayout($c);</p><p>/* Output the PNG to the browser */<br>$s->writeToPng("php://output");</geshi></p><p>If all goes to plan, you should see a PNG in your browser with the above text.</p><p>Going through each step, firstly we set up the Cairo surface to draw on, and the context we use to draw with. Once we have done that, we can create a PangoLayout object which lets us draw the text we require. The PangoLayout is passed a context, so it can invoke the drawing methods itself to draw the text. We pass the PangoLayout a PangoFontDescription object, which lets us choose from the fonts already installed on the machine. This means that we don't need to concern ourselves with the paths to actual TrueType font files, or similar - the fonts are resolved by Fontconfig or whatever system is available on your machine.</p><p>Next, we set the width of the layout. We can also set a height, but I haven't bothered on this occasion. This lets Pango know where to wrap the text - if we don't set this, it won't bother, which may result in text falling off the edge of the image. You may note that the width is multiplied by the PANGO_SCALE - this is because Pango deals in units which are a tiny fraction (1/1024, in fact) of a pixel, in order to handle antialiasing properly. Because we're using a CairoImageSurface, this means that they layout will be 250 pixels wide.</p><p>Next up, we set the text to be drawn. There are two methods available to do this; PangoLayout::setText() is used when we just want to render text with no formatting instructions. In this case, I've opted for the PangoLayout::setMarkup() method, which lets me use <a href="http://library.gnome.org/devel/pango/stable/PangoMarkupFormat.html">Pango's markup language</a> to make part of the text bold. Many other attributes can be changed using this markup, which has shortcuts that somewhat resemble html.</p><p>Finally, the call to showLayout() renders the layout onto the surface. You can also render just a path, using layoutPath(), which sets the path on the surface so you can then use more advanced effects with Cairo. The layout is drawn using whatever the current source is on the Cairo context, so you can render using flat colours, gradients, other source images, or whatever takes your fancy. Additionally, this means that any transformations you have set on the Cairo context also take effect, allowing you to rotate, scale, shear and otherwise distort the text.</p><p>It probably looks a little complex just to write some text on an image, but it is rather flexible. This flexibility is handy when you consider that Cairo can render more than just PNG images; PDFs, PostScript and SVG are also easy to create. I hope that this post may inspire someone else to give it a try. Feedback and reports of issues are always welcome.</p>";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:3;a:6:{s:4:"data";s:0:"";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:0:"";a:4:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:55:"QA Teams, Truth or Myth? - Helgi Þormar Þorbjörnsson";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:50:"http://helgi.ws/2011/02/21/qa-teams-truth-or-myth/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Mon, 21 Feb 2011 14:00:47 +0000";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:5146:"<p>This article was originally published in <a title="php|arch" href="http://www.phparch.com/">php|architect</a> in May 2009 and I published it mostly as it appeared in the magazine shy of the odd formatting to fit the blog format better.</p>
<p>—</p>
<p>In the last couple of years, there seems to be a growing trend in the PHP world where application and library developers put out claims that their piece of code is high-quality and thoroughly tested. Indeed, often this is true, but how can you really guarantee quality like this?</p>
<p><!-- p.p1 {margin: 0.0px 0.0px 0.0px 0.0px; font: 14.0px Helvetica; color: #134a4d} p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; font: 10.0px Helvetica; color: #1a1a18} p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; font: 8.9px Helvetica; color: #fffffe} span.s1 {color: #1a1a18} span.s2 {color: #8a8b8a} span.s3 {font: 11.0px Helvetica} span.s4 {font: 14.0px Helvetica} span.s5 {font: 9.0px Times; color: #0066cc} span.Apple-tab-span {white-space:pre} --></p>
<h2>Quality Assurance, What Is It All About?</h2>
<p>You might wonder, what is Quality Assurance (QA) all about? Is it something you might want to start utilizing for your project?</p>
<p>I don’t want to go too deep into this topic since this is a mere short article but QA can be so many different things depending on who you ask. I’m going to take the plunge and attempt to give my thoughts on QA teams and hopefully enlighten you in one way or another along the way.</p>
<h2>The QA Team</h2>
<p>So what is the QA team? They are the keepers of quality, those who aid the developers in maintaining the balance between productivity and chaos, these are the people who strive for perfection – The QA Team *cue theme song for “The A team”* Modern day heroes.</p>
<p>From my perspective, the responsibilities that a QA team would take on range from monitoring the ticket system, gathering more accurate information for tickets, verifying tickets, and making sure developers are upholding the coding standards, and any other standards, the project is employing, just to name a few.</p>
<p>One important purpose of QA teams is to think up new ways to make it easier for developers to adhere to the standards, to make it really easy for end users to report issues and to find information they need to reduce duplicate reports or invalid ones. To create a better end-user experience usually requires the QA team to bother the developers to write proper API documentation and harass the documentation team to produce a proper user manual. In many projects, the QA team will also deal with the tests – Writing user stories based on the specifications (if they are so lucky to have such a thing) so that the developers can write accurate functional and unit tests. This will also allow the QA team to do proper verification before releases and sprint closures.</p>
<p>QA teams are an impartial third-party, they have an outside perspective on the application. The problem with developers is that they don’t make good users due to how close they are to the product. They know what can be done and what can’t be done and are thus less likely to be as creative as end users when it comes to using/testing the product, QA is the bridge between the two.</p>
<p>QA will point out things that work but are not as clear or obvious as they could be, e.g. obscure error messages, unintuitive interface (be it user interface or API design) or finding fragile code where something is a little off and ends up blowing up in your face.</p>
<p>This is just the tip of the iceberg and, as you may have noticed, QA teams need to able to touch every aspect of the product, know it inside out, and play nicely with everyone inside the project. They are indeed the most powerful weapon a project manager can have in his/her arsenal, and if used correctly, the entire team will be more productive and produce higher-quality products on time … Well that’s the general idea, at least. ;-)</p>
<h2>They Are Around – Even When You Think They Aren’t!</h2>
<p>More often than not, projects will have a QA team, or at least QA people, without anyone involved even knowing about it!</p>
<p>Just think for a moment about all of those projects that you have come across that are high-quality and are well-managed, yet have no official QA team nor any mention of QA anywhere.</p>
<p>This scenario tends to happen when you have smaller companies or smaller development teams within companies. They become their own QA team, usually without appointing someone to take care of the bug system, with no one doing proper bug triage sessions and with verification simply happening when someone tries to fix the bug and ends up chasing down the person that filed the report just to get enough information to be able to actually fix the problem. This is all highly inefficient but still displays an effort to maintain a certain amount of quality.</p>
<h2>QA and PEAR</h2>
<p>A good 7 years ago, the PEAR QA efforts fel</p><p><i>Truncated by Planet PHP, read more at <a href="http://helgi.ws/2011/02/21/qa-teams-truth-or-myth/">the original</a> (another 4404 bytes)</i></p>";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:4;a:6:{s:4:"data";s:0:"";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:0:"";a:4:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:78:"PHP and setlocale - getting more locales than English to work - Henrik Sarvell";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:97:"http://www.prodevtips.com/2011/02/21/php-and-setlocale-getting-more-locales-than-english-to-work/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Mon, 21 Feb 2011 05:52:32 +0000";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:540:"Copyright © 2011 <a href="http://www.prodevtips.com">http://www.prodevtips.com</a>. Visit the original article at <a href="http://www.prodevtips.com/2011/02/21/php-and-setlocale-getting-more-locales-than-english-to-work/">http://www.prodevtips.com/2011/02/21/php-and-setlocale-getting-more-locales-than-english-to-work/</a>.<br /><p>The following is required to get for instance Swedish to work:... <a href='http://www.prodevtips.com/2011/02/21/php-and-setlocale-getting-more-locales-than-english-to-work/' rel="nofollow">Read More</a></p>";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:5;a:6:{s:4:"data";s:0:"";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:0:"";a:4:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:49:"PHP-GTK installer for windows - PHP-GTK Community";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:55:"http://php-gtk.eu/en/apps/php-gtk-installer-for-windows";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Mon, 21 Feb 2011 03:39:43 +0000";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:570:"<p>A PHP-GTK installer for Windows, it includes PHP-GTK (PHP 5.3 + php-gtk snap + cairo),PHP Extensions,
Some Gtk Locales, File Associations and demo scripts</p>

<p><img  src="/files/php-gtk_installer.png"
" style="float: right; margin: 0 0 0.5em 1em; width: 200px"
 alt="screenshot for PHP-GTK installer" />
<p>

<p>You can install only PHP-GTK core files, the full install or choose what to install.
Made with Inno Setup, questions, suggestions and feature requests are welcome</p><p><a href="http://php-gtk.eu/en/apps/php-gtk-installer-for-windows">read more</a></p>";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:6;a:6:{s:4:"data";s:0:"";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:0:"";a:4:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:77:"Using Horde_Xml_Element to quickly generate XML from arrays - Chuck Hagenbuch";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:26:"http://hagenbu.ch/blog/517";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Sun, 20 Feb 2011 04:13:18 +0000";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:93:"Horde_Xml_Element gives you a quick shortcut for taking PHP arrays and turning them into XML.";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:7;a:6:{s:4:"data";s:0:"";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:0:"";a:4:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:49:"Symfony – subfolders for partials - Anna Filina";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:59:"http://annafilina.com/blog/symfony-subfolders-for-partials/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Sat, 19 Feb 2011 23:41:37 +0000";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:2065:"<p>Symfony 1.2 – 1.4 expects all partials to follow this convention: templates/_partial.php</p>
<p>What happens when you need to organize your partials in subfolder? I tried a number of “Symfunky” avenues. Feel free to skip to the solution.</p>
<h3>Avenues Explored</h3>
<p>I first try the call the include_partial helper with “subfolder/partial”, but that results in Symfony attempting to find the partial in the “subfolder” module.</p>
<p>Alright, so I try “module/subfolder/partial”, but that results in Symfony looking for “_subfolder/partial” because it simply split at the first backslash. I don’t blame the framework developers: I am trying to do something it was not meant to do.</p>
<p>So now I realize that we can set any template from an action using $this->setTemplate(’subfolder/_partial’). Since actions are NOT partials by definition, I decide to use a component. Unfortunately the component doesn’t allow the developer to override templates.</p>
<p>I am starting to feel that the framework mocks me. So this is how you wanna play it, huh? I will override your sfView class, load it in factories.yml, and there’s nothing you can do about it (insert diabolical laughter)! But then, after almost half an hour, I realize that I’m trying to make it too elegant for something so basic as concatenating a few strings.</p>
<h3>Solution</h3>
<p>The solution ended up ridiculously simple and does not risk breaking any existing code.</p>
<p>1. Copy get_partial() helper with an extra param: get_partial_subfolder($templateName, $vars = array(), $subfolder)<br />
2. Edit the line that concatenates the file name: $actionName = $subfolder.’/_’.$templateName; (instead of ‘_’.$templateName)</p>
<p>There you go, no more headaches. Just remember to use “echo get_partial()” instead of “include_partial()” unless you want to override that helper as well. If you are unsure how to create custom helpers, see here under Adding Your Own Helpers: http://www.symfony-project.org/book/1_2/07-Inside-the-View-Layer</p>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:8;a:6:{s:4:"data";s:0:"";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:0:"";a:4:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:52:"PHP on Azure and you in Vegas - Michelangelo van Dam";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:93:"http://feedproxy.google.com/~r/dragonbe-php/~3/F83g7h6h--I/php-on-azure-and-you-in-vegas.html";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Sat, 19 Feb 2011 19:14:00 +0000";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:2338:"<div class="separator" style="clear: both; text-align: center;"><a href="http://www.phpazurecontest.com/wp-content/uploads/2011/01/azurecontestthumb-213x300.png" imageanchor="1" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;"><img border="0" height="200" src="http://www.phpazurecontest.com/wp-content/uploads/2011/01/azurecontestthumb-213x300.png" width="141" /></a></div>If you're developing apps in <a href="http://php.net/">PHP</a> and you want a challenge that will get you some places, be sure to check out the <a href="http://phpazurecontest.com/">PHP on Azure</a> contest. Build an app with PHP, deploy it to Windows Azure and participate in a contest with a killer prize: an all-in trip to Las Vegas!<br /><br />The rules are simple:<br /><ul><li>your app has to be written in PHP</li><li>preferably own development app</li><li>use as much as Windows Azure services</li><li>blog about overcoming this challenge (good/bad/ugly) </li></ul>A jury will review your app and give you points on implementation, challenge and usage of Windows Azure technologies. But also on how you documented the process of deploying your app to Windows Azure.<br /><br />Register before February 28, 2011. The contest itself runs from February 1, 2011 until May 15, 2011. If you register quickly, you can get attend a free Windows Azure training course given by Maarten "Mr. Azure" Balliauw on February 22, 2011.<br /><br />Show the world your skills and participate. Full details of the contest can be found on <a href="http://phpazurecontest.com/">http://phpazurecontest.com</a>.<br /><br />If you're unsure how to start, I'm working on an example application to be deployed anywhere, including Windows Azure.<br /><ul><li> Get the sources: <a href="http://github.com/DragonBe/wingz">http://github.com/DragonBe/wingz</a></li><li>See it run on Linux: <a href="http://wingz.cc/">http://wingz.cc</a></li><li>See it run on Windows 2008 Server with IIS 7.5: <a href="http://wingz.be/">http://wingz.be</a></li><li>See it run on Windows Azure: Updating…</li></ul><div class="blogger-post-footer"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/28215292-6855769807097195282?l=www.dragonbe.com' alt='' /></div><img src="http://feeds.feedburner.com/~r/dragonbe-php/~4/F83g7h6h--I" height="1" width="1"/>";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:9;a:6:{s:4:"data";s:0:"";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:0:"";a:4:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:43:"PECL MogileFs 0.8.1 released - Lars Strojny";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:67:"http://usrportage.de/archives/925-PECL-MogileFs-0.8.1-released.html";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Sat, 19 Feb 2011 06:15:43 +0000";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:1795:"
            <div >
                	<p >On Wednesday version 0.8.1 of <a href="http://pecl.php.net/mogilefs"><span class="caps">PECL</span> MogileFs</a> has been released. The new version features a few important changes and fixes:</p>

	<ul >
		<li >Changing timeout parameter for <code >MogileFs::connect()</code> to float to allow specifying microseconds. This is an important change if you want to do connection pooling for your trackers in <span class="caps">PHP</span>. You can now limit the time the client tries to connect to a tracker and connect to an alternative one if this fails</li>
		<li >Connect timeout does not set read timeout. This change became necessary with the better connect timeout handling and is the whole reason there is a 0.8.<strong >1</strong>. The previous assumption was to reuse the connect timeout as read timeout. This is no longer feasible. If somebody needs the functionality of setting a specific read timeout, I would be happy to implement that as a specific option though. I personally have no use for it.</li>
		<li >Fixing arginfo for <code >MogileFs::put()</code>. You dawg, I’ve heard you like reflections. So I’ve put some reflection into your reflection so you can reflect while you reflect</li>
		<li >Adding read timeout handling. Andre Pascha of <a href="http://www.kwick.de/">Kwick</a> provided a patch for better read timeout handling. Previously read timeouts were silently ignored, this behavior has been fixed. Thanks!</li>
		<li >Adding <span class="caps">EOF</span> check before reading/writing to a socket (Andre Pascha)</li>
	</ul>

	<p >Also it’s marked as “beta” I’m fairly confident with this release. We already upgraded production environments to the newest version, so you could too.</p> 
            </div>
        ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}}}}}}}}}}}}s:4:"type";i:6;s:7:"headers";a:12:{s:6:"server";s:12:"nginx/0.7.67";s:4:"date";s:29:"Tue, 22 Feb 2011 14:21:50 GMT";s:12:"content-type";s:22:"text/xml;charset=utf-8";s:17:"transfer-encoding";s:7:"chunked";s:10:"connection";s:10:"keep-alive";s:4:"vary";s:32:"Accept-Encoding, Accept-Encoding";s:12:"x-powered-by";s:16:"PHP/5.2.9RC4-dev";s:13:"cache-control";s:19:"public, max-age=180";s:4:"etag";s:32:"fb91cf7d87c72c0ab25eb293a107065d";s:13:"last-modified";s:29:"Tue, 22 Feb 2011 14:09:40 GMT";s:21:"x-popoon-cache-status";s:4:"true";s:16:"content-encoding";s:4:"gzip";}s:5:"build";s:14:"20110128231735";}